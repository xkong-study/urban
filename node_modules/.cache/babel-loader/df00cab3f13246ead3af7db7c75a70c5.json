{"ast":null,"code":"import _toConsumableArray from \"/Users/kong/Downloads/urban computing/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/kong/Downloads/urban computing/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kong/Downloads/urban computing/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _createClass from \"/Users/kong/Downloads/urban computing/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/kong/Downloads/urban computing/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/Users/kong/Downloads/urban computing/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kong/Downloads/urban computing/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kong/Downloads/urban computing/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport { _registerComponent, registerVersion, _getProvider, getApp } from '@firebase/app';\nimport { FirebaseError, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nvar UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues( // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n  var result = {};\n\n  for (var key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n\n  return result;\n}\n/**\r\n * Takes data and encodes it in a JSON-friendly way, such that types such as\r\n * Date are preserved.\r\n * @internal\r\n * @param data - Data to encode.\r\n */\n\n\nfunction encode(data) {\n  if (data == null) {\n    return null;\n  }\n\n  if (data instanceof Number) {\n    data = data.valueOf();\n  }\n\n  if (typeof data === 'number' && isFinite(data)) {\n    // Any number in JS is safe to put directly in JSON and parse as a double\n    // without any loss of precision.\n    return data;\n  }\n\n  if (data === true || data === false) {\n    return data;\n  }\n\n  if (Object.prototype.toString.call(data) === '[object String]') {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    return data.toISOString();\n  }\n\n  if (Array.isArray(data)) {\n    return data.map(function (x) {\n      return encode(x);\n    });\n  }\n\n  if (typeof data === 'function' || typeof data === 'object') {\n    return mapValues(data, function (x) {\n      return encode(x);\n    });\n  } // If we got this far, the data is not encodable.\n\n\n  throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n/**\r\n * Takes data that's been encoded in a JSON-friendly form and returns a form\r\n * with richer datatypes, such as Dates, etc.\r\n * @internal\r\n * @param json - JSON to convert.\r\n */\n\n\nfunction decode(json) {\n  if (json == null) {\n    return json;\n  }\n\n  if (json['@type']) {\n    switch (json['@type']) {\n      case LONG_TYPE: // Fall through and handle this the same as unsigned.\n\n      case UNSIGNED_LONG_TYPE:\n        {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          var value = Number(json['value']);\n\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n\n          return value;\n        }\n\n      default:\n        {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n    }\n  }\n\n  if (Array.isArray(json)) {\n    return json.map(function (x) {\n      return decode(x);\n    });\n  }\n\n  if (typeof json === 'function' || typeof json === 'object') {\n    return mapValues(json, function (x) {\n      return decode(x);\n    });\n  } // Anything else is safe to return.\n\n\n  return json;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Functions.\r\n */\n\n\nvar FUNCTIONS_TYPE = 'functions';\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\n\nvar errorCodeMap = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\n\nvar FunctionsError = /*#__PURE__*/function (_FirebaseError) {\n  _inherits(FunctionsError, _FirebaseError);\n\n  function FunctionsError(\n  /**\r\n   * A standard error code that will be returned to the client. This also\r\n   * determines the HTTP status code of the response, as defined in code.proto.\r\n   */\n  code, message,\n  /**\r\n   * Extra data to be converted to JSON and included in the error response.\r\n   */\n  details) {\n    var _this;\n\n    _classCallCheck(this, FunctionsError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FunctionsError).call(this, \"\".concat(FUNCTIONS_TYPE, \"/\").concat(code), message || ''));\n    _this.details = details;\n    return _this;\n  }\n\n  return FunctionsError;\n}(FirebaseError);\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\n\n\nfunction codeForHTTPStatus(status) {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n\n    case 400:\n      return 'invalid-argument';\n\n    case 401:\n      return 'unauthenticated';\n\n    case 403:\n      return 'permission-denied';\n\n    case 404:\n      return 'not-found';\n\n    case 409:\n      return 'aborted';\n\n    case 429:\n      return 'resource-exhausted';\n\n    case 499:\n      return 'cancelled';\n\n    case 500:\n      return 'internal';\n\n    case 501:\n      return 'unimplemented';\n\n    case 503:\n      return 'unavailable';\n\n    case 504:\n      return 'deadline-exceeded';\n  }\n\n  return 'unknown';\n}\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\n\n\nfunction _errorForResponse(status, bodyJSON) {\n  var code = codeForHTTPStatus(status); // Start with reasonable defaults from the status code.\n\n  var description = code;\n  var details = undefined; // Then look through the body for explicit details.\n\n  try {\n    var errorJSON = bodyJSON && bodyJSON.error;\n\n    if (errorJSON) {\n      var _status = errorJSON.status;\n\n      if (typeof _status === 'string') {\n        if (!errorCodeMap[_status]) {\n          // They must've included an unknown error code in the body.\n          return new FunctionsError('internal', 'internal');\n        }\n\n        code = errorCodeMap[_status]; // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n\n        description = _status;\n      }\n\n      var message = errorJSON.message;\n\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n\n      if (details !== undefined) {\n        details = decode(details);\n      }\n    }\n  } catch (e) {// If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new FunctionsError(code, description, details);\n}\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n * @internal\r\n */\n\n\nvar ContextProvider = /*#__PURE__*/function () {\n  function ContextProvider(authProvider, messagingProvider, appCheckProvider) {\n    var _this2 = this;\n\n    _classCallCheck(this, ContextProvider);\n\n    this.auth = null;\n    this.messaging = null;\n    this.appCheck = null;\n    this.auth = authProvider.getImmediate({\n      optional: true\n    });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(function (auth) {\n        return _this2.auth = auth;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(function (messaging) {\n        return _this2.messaging = messaging;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n\n    if (!this.appCheck) {\n      appCheckProvider.get().then(function (appCheck) {\n        return _this2.appCheck = appCheck;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n  }\n\n  _createClass(ContextProvider, [{\n    key: \"getAuthToken\",\n    value: function () {\n      var _getAuthToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var token;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.auth) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", undefined);\n\n              case 2:\n                _context.prev = 2;\n                _context.next = 5;\n                return this.auth.getToken();\n\n              case 5:\n                token = _context.sent;\n                return _context.abrupt(\"return\", token === null || token === void 0 ? void 0 : token.accessToken);\n\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n                return _context.abrupt(\"return\", undefined);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n\n      function getAuthToken() {\n        return _getAuthToken.apply(this, arguments);\n      }\n\n      return getAuthToken;\n    }()\n  }, {\n    key: \"getMessagingToken\",\n    value: function () {\n      var _getMessagingToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(!this.messaging || !('Notification' in self) || Notification.permission !== 'granted')) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", undefined);\n\n              case 2:\n                _context2.prev = 2;\n                _context2.next = 5;\n                return this.messaging.getToken();\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](2);\n                return _context2.abrupt(\"return\", undefined);\n\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 8]]);\n      }));\n\n      function getMessagingToken() {\n        return _getMessagingToken.apply(this, arguments);\n      }\n\n      return getMessagingToken;\n    }()\n  }, {\n    key: \"getAppCheckToken\",\n    value: function () {\n      var _getAppCheckToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.appCheck) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                _context3.next = 3;\n                return this.appCheck.getToken();\n\n              case 3:\n                result = _context3.sent;\n\n                if (!result.error) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", null);\n\n              case 6:\n                return _context3.abrupt(\"return\", result.token);\n\n              case 7:\n                return _context3.abrupt(\"return\", null);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getAppCheckToken() {\n        return _getAppCheckToken.apply(this, arguments);\n      }\n\n      return getAppCheckToken;\n    }()\n  }, {\n    key: \"getContext\",\n    value: function () {\n      var _getContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var authToken, messagingToken, appCheckToken;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getAuthToken();\n\n              case 2:\n                authToken = _context4.sent;\n                _context4.next = 5;\n                return this.getMessagingToken();\n\n              case 5:\n                messagingToken = _context4.sent;\n                _context4.next = 8;\n                return this.getAppCheckToken();\n\n              case 8:\n                appCheckToken = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  authToken: authToken,\n                  messagingToken: messagingToken,\n                  appCheckToken: appCheckToken\n                });\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getContext() {\n        return _getContext.apply(this, arguments);\n      }\n\n      return getContext;\n    }()\n  }]);\n\n  return ContextProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_REGION = 'us-central1';\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type FunctionsError.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\n\nfunction failAfter(millis) {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var timer = null;\n  return {\n    promise: new Promise(function (_, reject) {\n      timer = setTimeout(function () {\n        reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\n      }, millis);\n    }),\n    cancel: function cancel() {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    }\n  };\n}\n/**\r\n * The main class for the Firebase Functions SDK.\r\n * @internal\r\n */\n\n\nvar FunctionsService = /*#__PURE__*/function () {\n  /**\r\n   * Creates a new Functions service for the given app.\r\n   * @param app - The FirebaseApp to use.\r\n   */\n  function FunctionsService(app, authProvider, messagingProvider, appCheckProvider) {\n    var _this3 = this;\n\n    var regionOrCustomDomain = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_REGION;\n    var fetchImpl = arguments.length > 5 ? arguments[5] : undefined;\n\n    _classCallCheck(this, FunctionsService);\n\n    this.app = app;\n    this.fetchImpl = fetchImpl;\n    this.emulatorOrigin = null;\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider, appCheckProvider); // Cancels all ongoing requests when resolved.\n\n    this.cancelAllRequests = new Promise(function (resolve) {\n      _this3.deleteService = function () {\n        return Promise.resolve(resolve());\n      };\n    }); // Resolve the region or custom domain overload by attempting to parse it.\n\n    try {\n      var url = new URL(regionOrCustomDomain);\n      this.customDomain = url.origin;\n      this.region = DEFAULT_REGION;\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain;\n    }\n  }\n\n  _createClass(FunctionsService, [{\n    key: \"_delete\",\n    value: function _delete() {\n      return this.deleteService();\n    }\n    /**\r\n     * Returns the URL for a callable with the given name.\r\n     * @param name - The name of the callable.\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"_url\",\n    value: function _url(name) {\n      var projectId = this.app.options.projectId;\n\n      if (this.emulatorOrigin !== null) {\n        var origin = this.emulatorOrigin;\n        return \"\".concat(origin, \"/\").concat(projectId, \"/\").concat(this.region, \"/\").concat(name);\n      }\n\n      if (this.customDomain !== null) {\n        return \"\".concat(this.customDomain, \"/\").concat(name);\n      }\n\n      return \"https://\".concat(this.region, \"-\").concat(projectId, \".cloudfunctions.net/\").concat(name);\n    }\n  }]);\n\n  return FunctionsService;\n}();\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host The emulator host (ex: localhost)\r\n * @param port The emulator port (ex: 5001)\r\n * @public\r\n */\n\n\nfunction connectFunctionsEmulator$1(functionsInstance, host, port) {\n  functionsInstance.emulatorOrigin = \"http://\".concat(host, \":\").concat(port);\n}\n/**\r\n * Returns a reference to the callable https trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\n\n\nfunction httpsCallable$1(functionsInstance, name, options) {\n  return function (data) {\n    return call(functionsInstance, name, data, options || {});\n  };\n}\n/**\r\n * Returns a reference to the callable https trigger with the given url.\r\n * @param url - The url of the trigger.\r\n * @public\r\n */\n\n\nfunction httpsCallableFromURL$1(functionsInstance, url, options) {\n  return function (data) {\n    return callAtURL(functionsInstance, url, data, options || {});\n  };\n}\n/**\r\n * Does an HTTP POST and returns the completed response.\r\n * @param url The url to post to.\r\n * @param body The JSON body of the post.\r\n * @param headers The HTTP headers to include in the request.\r\n * @return A Promise that will succeed when the request finishes.\r\n */\n\n\nfunction postJSON(_x, _x2, _x3, _x4) {\n  return _postJSON.apply(this, arguments);\n}\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param name The name of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\n\n\nfunction _postJSON() {\n  _postJSON = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(url, body, headers, fetchImpl) {\n    var response, json;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            headers['Content-Type'] = 'application/json';\n            _context5.prev = 1;\n            _context5.next = 4;\n            return fetchImpl(url, {\n              method: 'POST',\n              body: JSON.stringify(body),\n              headers: headers\n            });\n\n          case 4:\n            response = _context5.sent;\n            _context5.next = 10;\n            break;\n\n          case 7:\n            _context5.prev = 7;\n            _context5.t0 = _context5[\"catch\"](1);\n            return _context5.abrupt(\"return\", {\n              status: 0,\n              json: null\n            });\n\n          case 10:\n            json = null;\n            _context5.prev = 11;\n            _context5.next = 14;\n            return response.json();\n\n          case 14:\n            json = _context5.sent;\n            _context5.next = 19;\n            break;\n\n          case 17:\n            _context5.prev = 17;\n            _context5.t1 = _context5[\"catch\"](11);\n\n          case 19:\n            return _context5.abrupt(\"return\", {\n              status: response.status,\n              json: json\n            });\n\n          case 20:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[1, 7], [11, 17]]);\n  }));\n  return _postJSON.apply(this, arguments);\n}\n\nfunction call(functionsInstance, name, data, options) {\n  var url = functionsInstance._url(name);\n\n  return callAtURL(functionsInstance, url, data, options);\n}\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param url The url of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\n\n\nfunction callAtURL(_x5, _x6, _x7, _x8) {\n  return _callAtURL.apply(this, arguments);\n}\n\nfunction _callAtURL() {\n  _callAtURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(functionsInstance, url, data, options) {\n    var body, headers, context, timeout, failAfterHandle, response, error, responseData, decodedData;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            // Encode any special types, such as dates, in the input data.\n            data = encode(data);\n            body = {\n              data: data\n            }; // Add a header for the authToken.\n\n            headers = {};\n            _context6.next = 5;\n            return functionsInstance.contextProvider.getContext();\n\n          case 5:\n            context = _context6.sent;\n\n            if (context.authToken) {\n              headers['Authorization'] = 'Bearer ' + context.authToken;\n            }\n\n            if (context.messagingToken) {\n              headers['Firebase-Instance-ID-Token'] = context.messagingToken;\n            }\n\n            if (context.appCheckToken !== null) {\n              headers['X-Firebase-AppCheck'] = context.appCheckToken;\n            } // Default timeout to 70s, but let the options override it.\n\n\n            timeout = options.timeout || 70000;\n            failAfterHandle = failAfter(timeout);\n            _context6.next = 13;\n            return Promise.race([postJSON(url, body, headers, functionsInstance.fetchImpl), failAfterHandle.promise, functionsInstance.cancelAllRequests]);\n\n          case 13:\n            response = _context6.sent;\n            // Always clear the failAfter timeout\n            failAfterHandle.cancel(); // If service was deleted, interrupted response throws an error.\n\n            if (response) {\n              _context6.next = 17;\n              break;\n            }\n\n            throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');\n\n          case 17:\n            // Check for an error status, regardless of http status.\n            error = _errorForResponse(response.status, response.json);\n\n            if (!error) {\n              _context6.next = 20;\n              break;\n            }\n\n            throw error;\n\n          case 20:\n            if (response.json) {\n              _context6.next = 22;\n              break;\n            }\n\n            throw new FunctionsError('internal', 'Response is not valid JSON object.');\n\n          case 22:\n            responseData = response.json.data; // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n            // backwards compatibility.\n\n            if (typeof responseData === 'undefined') {\n              responseData = response.json.result;\n            }\n\n            if (!(typeof responseData === 'undefined')) {\n              _context6.next = 26;\n              break;\n            }\n\n            throw new FunctionsError('internal', 'Response is missing data field.');\n\n          case 26:\n            // Decode any special types, such as dates, in the returned data.\n            decodedData = decode(responseData);\n            return _context6.abrupt(\"return\", {\n              data: decodedData\n            });\n\n          case 28:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _callAtURL.apply(this, arguments);\n}\n\nvar name = \"@firebase/functions\";\nvar version = \"0.8.8\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar AUTH_INTERNAL_NAME = 'auth-internal';\nvar APP_CHECK_INTERNAL_NAME = 'app-check-internal';\nvar MESSAGING_INTERNAL_NAME = 'messaging-internal';\n\nfunction registerFunctions(fetchImpl, variant) {\n  var factory = function factory(container, _ref) {\n    var regionOrCustomDomain = _ref.instanceIdentifier;\n    // Dependencies\n    var app = container.getProvider('app').getImmediate();\n    var authProvider = container.getProvider(AUTH_INTERNAL_NAME);\n    var messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\n    var appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);\n  };\n\n  _registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version, variant); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a {@link Functions} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param regionOrCustomDomain - one of:\r\n *   a) The region the callable functions are located in (ex: us-central1)\r\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\r\n * @public\r\n */\n\n\nfunction getFunctions() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  var regionOrCustomDomain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_REGION;\n\n  // Dependencies\n  var functionsProvider = _getProvider(getModularInstance(app), FUNCTIONS_TYPE);\n\n  var functionsInstance = functionsProvider.getImmediate({\n    identifier: regionOrCustomDomain\n  });\n  var emulator = getDefaultEmulatorHostnameAndPort('functions');\n\n  if (emulator) {\n    connectFunctionsEmulator.apply(void 0, [functionsInstance].concat(_toConsumableArray(emulator)));\n  }\n\n  return functionsInstance;\n}\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @public\r\n */\n\n\nfunction connectFunctionsEmulator(functionsInstance, host, port) {\n  connectFunctionsEmulator$1(getModularInstance(functionsInstance), host, port);\n}\n/**\r\n * Returns a reference to the callable HTTPS trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\n\n\nfunction httpsCallable(functionsInstance, name, options) {\n  return httpsCallable$1(getModularInstance(functionsInstance), name, options);\n}\n/**\r\n * Returns a reference to the callable HTTPS trigger with the specified url.\r\n * @param url - The url of the trigger.\r\n * @public\r\n */\n\n\nfunction httpsCallableFromURL(functionsInstance, url, options) {\n  return httpsCallableFromURL$1(getModularInstance(functionsInstance), url, options);\n}\n/**\r\n * Cloud Functions for Firebase\r\n *\r\n * @packageDocumentation\r\n */\n\n\nregisterFunctions(fetch.bind(self));\nexport { connectFunctionsEmulator, getFunctions, httpsCallable, httpsCallableFromURL };","map":null,"metadata":{},"sourceType":"module"}