{"ast":null,"code":"import _classCallCheck from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport firebase from '@firebase/app-compat';\nimport { _getChild, uploadBytesResumable, _dataFromString, _UploadTask, _FbsBlob, StringFormat, listAll as _listAll, list as _list, getMetadata as _getMetadata, updateMetadata as _updateMetadata, getDownloadURL as _getDownloadURL, deleteObject, _invalidRootOperation, _invalidArgument, ref as _ref2, _Location, connectStorageEmulator, _TaskState, _TaskEvent } from '@firebase/storage';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar UploadTaskSnapshotCompat = /*#__PURE__*/function () {\n  function UploadTaskSnapshotCompat(_delegate, task, ref) {\n    _classCallCheck(this, UploadTaskSnapshotCompat);\n\n    this._delegate = _delegate;\n    this.task = task;\n    this.ref = ref;\n  }\n\n  _createClass(UploadTaskSnapshotCompat, [{\n    key: \"bytesTransferred\",\n    get: function get() {\n      return this._delegate.bytesTransferred;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return this._delegate.metadata;\n    }\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._delegate.state;\n    }\n  }, {\n    key: \"totalBytes\",\n    get: function get() {\n      return this._delegate.totalBytes;\n    }\n  }]);\n\n  return UploadTaskSnapshotCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar UploadTaskCompat = /*#__PURE__*/function () {\n  function UploadTaskCompat(_delegate, _ref) {\n    _classCallCheck(this, UploadTaskCompat);\n\n    this._delegate = _delegate;\n    this._ref = _ref;\n    this.cancel = this._delegate.cancel.bind(this._delegate);\n    this.catch = this._delegate.catch.bind(this._delegate);\n    this.pause = this._delegate.pause.bind(this._delegate);\n    this.resume = this._delegate.resume.bind(this._delegate);\n  }\n\n  _createClass(UploadTaskCompat, [{\n    key: \"then\",\n    value: function then(onFulfilled, onRejected) {\n      var _this = this;\n\n      return this._delegate.then(function (snapshot) {\n        if (onFulfilled) {\n          return onFulfilled(new UploadTaskSnapshotCompat(snapshot, _this, _this._ref));\n        }\n      }, onRejected);\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, nextOrObserver, error, completed) {\n      var _this2 = this;\n\n      var wrappedNextOrObserver = undefined;\n\n      if (!!nextOrObserver) {\n        if (typeof nextOrObserver === 'function') {\n          wrappedNextOrObserver = function wrappedNextOrObserver(taskSnapshot) {\n            return nextOrObserver(new UploadTaskSnapshotCompat(taskSnapshot, _this2, _this2._ref));\n          };\n        } else {\n          wrappedNextOrObserver = {\n            next: !!nextOrObserver.next ? function (taskSnapshot) {\n              return nextOrObserver.next(new UploadTaskSnapshotCompat(taskSnapshot, _this2, _this2._ref));\n            } : undefined,\n            complete: nextOrObserver.complete || undefined,\n            error: nextOrObserver.error || undefined\n          };\n        }\n      }\n\n      return this._delegate.on(type, wrappedNextOrObserver, error || undefined, completed || undefined);\n    }\n  }, {\n    key: \"snapshot\",\n    get: function get() {\n      return new UploadTaskSnapshotCompat(this._delegate.snapshot, this, this._ref);\n    }\n  }]);\n\n  return UploadTaskCompat;\n}();\n\nvar ListResultCompat = /*#__PURE__*/function () {\n  function ListResultCompat(_delegate, _service) {\n    _classCallCheck(this, ListResultCompat);\n\n    this._delegate = _delegate;\n    this._service = _service;\n  }\n\n  _createClass(ListResultCompat, [{\n    key: \"prefixes\",\n    get: function get() {\n      var _this3 = this;\n\n      return this._delegate.prefixes.map(function (ref) {\n        return new ReferenceCompat(ref, _this3._service);\n      });\n    }\n  }, {\n    key: \"items\",\n    get: function get() {\n      var _this4 = this;\n\n      return this._delegate.items.map(function (ref) {\n        return new ReferenceCompat(ref, _this4._service);\n      });\n    }\n  }, {\n    key: \"nextPageToken\",\n    get: function get() {\n      return this._delegate.nextPageToken || null;\n    }\n  }]);\n\n  return ListResultCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *  http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ReferenceCompat = /*#__PURE__*/function () {\n  function ReferenceCompat(_delegate, storage) {\n    _classCallCheck(this, ReferenceCompat);\n\n    this._delegate = _delegate;\n    this.storage = storage;\n  }\n\n  _createClass(ReferenceCompat, [{\n    key: \"toString\",\n    value: function toString() {\n      return this._delegate.toString();\n    }\n    /**\r\n     * @returns A reference to the object obtained by\r\n     * appending childPath, removing any duplicate, beginning, or trailing\r\n     * slashes.\r\n     */\n\n  }, {\n    key: \"child\",\n    value: function child(childPath) {\n      var reference = _getChild(this._delegate, childPath);\n\n      return new ReferenceCompat(reference, this.storage);\n    }\n  }, {\n    key: \"put\",\n\n    /**\r\n     * Uploads a blob to this object's location.\r\n     * @param data - The blob to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\n    value: function put(data, metadata) {\n      this._throwIfRoot('put');\n\n      return new UploadTaskCompat(uploadBytesResumable(this._delegate, data, metadata), this);\n    }\n    /**\r\n     * Uploads a string to this object's location.\r\n     * @param value - The string to upload.\r\n     * @param format - The format of the string to upload.\r\n     * @returns An UploadTask that lets you control and\r\n     * observe the upload.\r\n     */\n\n  }, {\n    key: \"putString\",\n    value: function putString(value) {\n      var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : StringFormat.RAW;\n      var metadata = arguments.length > 2 ? arguments[2] : undefined;\n\n      this._throwIfRoot('putString');\n\n      var data = _dataFromString(format, value);\n\n      var metadataClone = Object.assign({}, metadata);\n\n      if (metadataClone['contentType'] == null && data.contentType != null) {\n        metadataClone['contentType'] = data.contentType;\n      }\n\n      return new UploadTaskCompat(new _UploadTask(this._delegate, new _FbsBlob(data.data, true), metadataClone), this);\n    }\n    /**\r\n     * List all items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * This is a helper method for calling list() repeatedly until there are\r\n     * no more results. The default pagination size is 1000.\r\n     *\r\n     * Note: The results may not be consistent if objects are changed while this\r\n     * operation is running.\r\n     *\r\n     * Warning: listAll may potentially consume too many resources if there are\r\n     * too many results.\r\n     *\r\n     * @returns A Promise that resolves with all the items and prefixes under\r\n     *  the current storage reference. `prefixes` contains references to\r\n     *  sub-directories and `items` contains references to objects in this\r\n     *  folder. `nextPageToken` is never returned.\r\n     */\n\n  }, {\n    key: \"listAll\",\n    value: function listAll() {\n      var _this5 = this;\n\n      return _listAll(this._delegate).then(function (r) {\n        return new ListResultCompat(r, _this5.storage);\n      });\n    }\n    /**\r\n     * List items (files) and prefixes (folders) under this storage reference.\r\n     *\r\n     * List API is only available for Firebase Rules Version 2.\r\n     *\r\n     * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\r\n     * delimited folder structure. Refer to GCS's List API if you want to learn more.\r\n     *\r\n     * To adhere to Firebase Rules's Semantics, Firebase Storage does not\r\n     * support objects whose paths end with \"/\" or contain two consecutive\r\n     * \"/\"s. Firebase Storage List API will filter these unsupported objects.\r\n     * list() may fail if there are too many unsupported objects in the bucket.\r\n     *\r\n     * @param options - See ListOptions for details.\r\n     * @returns A Promise that resolves with the items and prefixes.\r\n     * `prefixes` contains references to sub-folders and `items`\r\n     * contains references to objects in this folder. `nextPageToken`\r\n     * can be used to get the rest of the results.\r\n     */\n\n  }, {\n    key: \"list\",\n    value: function list(options) {\n      var _this6 = this;\n\n      return _list(this._delegate, options || undefined).then(function (r) {\n        return new ListResultCompat(r, _this6.storage);\n      });\n    }\n    /**\r\n     * A `Promise` that resolves with the metadata for this object. If this\r\n     * object doesn't exist or metadata cannot be retreived, the promise is\r\n     * rejected.\r\n     */\n\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata() {\n      return _getMetadata(this._delegate);\n    }\n    /**\r\n     * Updates the metadata for this object.\r\n     * @param metadata - The new metadata for the object.\r\n     * Only values that have been explicitly set will be changed. Explicitly\r\n     * setting a value to null will remove the metadata.\r\n     * @returns A `Promise` that resolves\r\n     * with the new metadata for this object.\r\n     * @see firebaseStorage.Reference.prototype.getMetadata\r\n     */\n\n  }, {\n    key: \"updateMetadata\",\n    value: function updateMetadata(metadata) {\n      return _updateMetadata(this._delegate, metadata);\n    }\n    /**\r\n     * @returns A `Promise` that resolves with the download\r\n     * URL for this object.\r\n     */\n\n  }, {\n    key: \"getDownloadURL\",\n    value: function getDownloadURL() {\n      return _getDownloadURL(this._delegate);\n    }\n    /**\r\n     * Deletes the object at this location.\r\n     * @returns A `Promise` that resolves if the deletion succeeds.\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      this._throwIfRoot('delete');\n\n      return deleteObject(this._delegate);\n    }\n  }, {\n    key: \"_throwIfRoot\",\n    value: function _throwIfRoot(name) {\n      if (this._delegate._location.path === '') {\n        throw _invalidRootOperation(name);\n      }\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._delegate.name;\n    }\n  }, {\n    key: \"bucket\",\n    get: function get() {\n      return this._delegate.bucket;\n    }\n  }, {\n    key: \"fullPath\",\n    get: function get() {\n      return this._delegate.fullPath;\n    }\n  }, {\n    key: \"root\",\n    get: function get() {\n      return new ReferenceCompat(this._delegate.root, this.storage);\n    }\n    /**\r\n     * @returns A reference to the parent of the\r\n     * current object, or null if the current object is the root.\r\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var reference = this._delegate.parent;\n\n      if (reference == null) {\n        return null;\n      }\n\n      return new ReferenceCompat(reference, this.storage);\n    }\n  }]);\n\n  return ReferenceCompat;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A service that provides firebaseStorage.Reference instances.\r\n * @param opt_url gs:// url to a custom Storage Bucket\r\n */\n\n\nvar StorageServiceCompat = /*#__PURE__*/function () {\n  function StorageServiceCompat(app, _delegate) {\n    _classCallCheck(this, StorageServiceCompat);\n\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  _createClass(StorageServiceCompat, [{\n    key: \"ref\",\n\n    /**\r\n     * Returns a firebaseStorage.Reference for the given path in the default\r\n     * bucket.\r\n     */\n    value: function ref(path) {\n      if (isUrl(path)) {\n        throw _invalidArgument('ref() expected a child path but got a URL, use refFromURL instead.');\n      }\n\n      return new ReferenceCompat(_ref2(this._delegate, path), this);\n    }\n    /**\r\n     * Returns a firebaseStorage.Reference object for the given absolute URL,\r\n     * which must be a gs:// or http[s]:// URL.\r\n     */\n\n  }, {\n    key: \"refFromURL\",\n    value: function refFromURL(url) {\n      if (!isUrl(url)) {\n        throw _invalidArgument('refFromURL() expected a full URL but got a child path, use ref() instead.');\n      }\n\n      try {\n        _Location.makeFromUrl(url, this._delegate.host);\n      } catch (e) {\n        throw _invalidArgument('refFromUrl() expected a valid full URL but got an invalid one.');\n      }\n\n      return new ReferenceCompat(_ref2(this._delegate, url), this);\n    }\n  }, {\n    key: \"setMaxUploadRetryTime\",\n    value: function setMaxUploadRetryTime(time) {\n      this._delegate.maxUploadRetryTime = time;\n    }\n  }, {\n    key: \"setMaxOperationRetryTime\",\n    value: function setMaxOperationRetryTime(time) {\n      this._delegate.maxOperationRetryTime = time;\n    }\n  }, {\n    key: \"useEmulator\",\n    value: function useEmulator(host, port) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      connectStorageEmulator(this._delegate, host, port, options);\n    }\n  }, {\n    key: \"maxOperationRetryTime\",\n    get: function get() {\n      return this._delegate.maxOperationRetryTime;\n    }\n  }, {\n    key: \"maxUploadRetryTime\",\n    get: function get() {\n      return this._delegate.maxUploadRetryTime;\n    }\n  }]);\n\n  return StorageServiceCompat;\n}();\n\nfunction isUrl(path) {\n  return /^[A-Za-z]+:\\/\\//.test(path);\n}\n\nvar name = \"@firebase/storage-compat\";\nvar version = \"0.1.22\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Storage.\r\n */\n\nvar STORAGE_TYPE = 'storage-compat';\n\nfunction factory(container, _ref3) {\n  var url = _ref3.instanceIdentifier;\n  // Dependencies\n  var app = container.getProvider('app-compat').getImmediate();\n  var storageExp = container.getProvider('storage').getImmediate({\n    identifier: url\n  });\n  var storageServiceCompat = new StorageServiceCompat(app, storageExp);\n  return storageServiceCompat;\n}\n\nfunction registerStorage(instance) {\n  var namespaceExports = {\n    // no-inline\n    TaskState: _TaskState,\n    TaskEvent: _TaskEvent,\n    StringFormat: StringFormat,\n    Storage: StorageServiceCompat,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(new Component(STORAGE_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase);\nexport { registerStorage };","map":null,"metadata":{},"sourceType":"module"}