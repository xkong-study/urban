{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _toCapitalString = require('./toCapitalString');\n\nvar _toCapitalString2 = _interopRequireDefault(_toCapitalString);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction withPropsReactive(MapComponent) {\n  return function (_React$Component) {\n    _inherits(_class, _React$Component);\n\n    function _class(props) {\n      _classCallCheck(this, _class);\n\n      var _this = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));\n\n      _this.instanceCreated = false;\n      _this.myMapComponent = null;\n      _this.registeredEvents = [];\n      _this.onInstanceCreated = _this.onInstanceCreated.bind(_this);\n      return _this;\n    }\n\n    _createClass(_class, [{\n      key: 'onInstanceCreated',\n      value: function onInstanceCreated() {\n        this.instanceCreated = true;\n\n        if ('events' in this.props) {\n          var instance = this.myMapComponent.instance;\n\n          if (this.props.events.created) {\n            this.props.events.created(instance);\n          }\n        }\n\n        this.reactivePropChange(this.props, false);\n      }\n    }, {\n      key: 'createEventsProxy',\n      value: function createEventsProxy(props) {\n        var self = this;\n        var instance = this.myMapComponent.instance;\n        var evs = Object.keys(props.events || {});\n        evs.length && evs.forEach(function (ev) {\n          if (self.registeredEvents.indexOf(ev) === -1) {\n            self.registeredEvents.push(ev);\n            instance.on(ev, function (ev) {\n              return function () {\n                if (self.props.events && ev in self.props.events) {\n                  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n                    args[_key] = arguments[_key];\n                  }\n\n                  self.props.events[ev].apply(null, args);\n                }\n              };\n            }(ev));\n          }\n        });\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        this.reactivePropChange(nextProps, true);\n      }\n    }, {\n      key: 'reactivePropChange',\n      value: function reactivePropChange(nextProps) {\n        var _this2 = this;\n\n        var shouldDetectChange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (!this.instanceCreated) {\n          return false;\n        }\n\n        var _myMapComponent = this.myMapComponent,\n            _myMapComponent$sette = _myMapComponent.setterMap,\n            setterMap = _myMapComponent$sette === undefined ? {} : _myMapComponent$sette,\n            _myMapComponent$conve = _myMapComponent.converterMap,\n            converterMap = _myMapComponent$conve === undefined ? {} : _myMapComponent$conve,\n            _myMapComponent$insta = _myMapComponent.instance,\n            instance = _myMapComponent$insta === undefined ? {} : _myMapComponent$insta;\n        var list = Object.keys(nextProps);\n        list.length && list.forEach(function (key) {\n          if (key === 'events') {\n            return _this2.createEventsProxy(nextProps);\n          }\n\n          var willReactive = true;\n\n          if (shouldDetectChange) {\n            willReactive = _this2.detectPropChange(key, nextProps, _this2.props);\n          }\n\n          if (!willReactive) {\n            return false;\n          }\n\n          var setterParam = nextProps[key];\n\n          if (key in converterMap) {\n            setterParam = converterMap[key](nextProps[key]);\n          }\n\n          if (key in setterMap) {\n            setterMap[key](setterParam);\n          } else {\n            var trySetterName = 'set' + (0, _toCapitalString2.default)(key);\n\n            if (trySetterName in instance) {\n              instance[trySetterName](setterParam);\n            }\n          }\n        });\n      }\n    }, {\n      key: 'detectPropChange',\n      value: function detectPropChange(key, nextProps, oldProps) {\n        return nextProps[key] !== oldProps[key];\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this3 = this;\n\n        return _react2.default.createElement(MapComponent, _extends({\n          onInstanceCreated: this.onInstanceCreated,\n          ref: function ref(comp) {\n            _this3.myMapComponent = comp;\n          }\n        }, this.props));\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        var instance = this.myMapComponent.instance;\n        if (!instance) return;\n\n        if ('destroy' in instance) {\n          setTimeout(function () {\n            instance.destroy();\n          }, 10);\n        }\n\n        if ('hide' in instance) {\n          instance.hide();\n        }\n\n        if ('__map__' in this.props && 'setMap' in instance) {\n          instance.setMap(null);\n        }\n      }\n    }]);\n\n    return _class;\n  }(_react2.default.Component);\n}\n\n;\nexports.default = withPropsReactive;","map":null,"metadata":{},"sourceType":"script"}