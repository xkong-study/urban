{"ast":null,"code":"var _jsxFileName = \"/Users/kong/Desktop/urban_react/src/pages/test.jsx\";\n\n/* jshint esversion: 6 */\nimport { MarkerClusterer, useJsApiLoader } from \"@react-google-maps/api\"; // const randomPosition = () => ({\n//     longitude: 53 + Math.random(),\n//     latitude: -6 + Math.random()\n// });\n// const randomMarker = (len) => (\n//     Array(len).fill(true).map((e, idx) => ({\n//         position: randomPosition()\n//     }))\n// );\n//\n//\n//     const [count,setCount] = React.useState({markers: randomMarker(10)});\n//     const randomMarkers=function (){\n//         setCount({markers: randomMarker(10)});\n//     };\n//     const plugins = [\n//         'MapType',\n//         'Scale',\n//         'OverView',\n//         'ControlBar', // v1.1.0 新增\n//         {\n//             name: 'ToolBar',\n//             options: {\n//                 visible: true,  // 不设置该属性默认就是 true\n//                 onCreated(ins){\n//                     console.log(ins);\n//                 },\n//             },\n//         }\n//     ];\n//     return(\n//             <div>\n//             <div style={{width: '100%', height: 372}}>\n//                 <Map plugins={plugins}  zoom={6} center={{longitude: 53,latitude: -6}}>\n//                     <Markers\n//                         markers={count.markers}\n//                     />\n//                 </Map>\n//             </div>\n//             <button onClick={randomMarkers.bind(this)}>Random Markers</button>\n//         </div>\n//         )\n// }\n//\n//\n//\n//\n// // import React, { Component } from 'react';\n// // import { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n// //\n// // import CurrentLocation from './Map';\n// // import {Map} from \"react-amap\";\n// //\n// // export default function Test(){\n// //     const state = {\n// //         showingInfoWindow: false,\n// //         activeMarker: {},\n// //         selectedPlace: {}\n// //     };\n// //\n// //     const onMarkerClick = (props, marker, e) =>\n// //         this.setState({\n// //             selectedPlace: props,\n// //             activeMarker: marker,\n// //             showingInfoWindow: true\n// //         });\n// //\n// //     const onClose = props => {\n// //         if (this.state.showingInfoWindow) {\n// //             this.setState({\n// //                 showingInfoWindow: false,\n// //                 activeMarker: null\n// //             });\n// //         }\n// //     };\n// //\n// //         return (\n// //             <CurrentLocation\n// //                 centerAroundCurrentLocation\n// //                 google={this.props.google}\n// //             ><Map\n// //                 google={this.props.google}\n// //                 zoom={14}\n// //                 initialCenter={{\n// //                     lat: -1.2884,\n// //                     lng: 36.8233\n// //                 }}\n// //             />\n// //\n// //                 <Marker onClick={onMarkerClick} name={'current location'} />\n// //                 <InfoWindow\n// //                     marker={state.activeMarker}\n// //                     visible={state.showingInfoWindow}\n// //                     onClose={onClose}\n// //                 >\n// //                     <div>\n// //                         <h4>{state.selectedPlace.name}</h4>\n// //                     </div>\n// //                 </InfoWindow>\n// //             </CurrentLocation>\n// //         );\n// //   }\n// //\n//Create a new map\n\nexport default function Test() {\n  var map;\n  var infowindow;\n\n  function initMap() {\n    var pyrmont = {\n      lat: -33.867,\n      lng: 151.195\n    };\n    map = new window.google.maps.Map(document.getElementById('map'), {\n      center: pyrmont,\n      zoom: 15\n    });\n    infowindow = new window.google.maps.InfoWindow();\n    var service = new window.google.maps.places.PlacesService(map);\n    service.nearbySearch({\n      location: pyrmont,\n      radius: 500,\n      type: ['hotel']\n    }, callback);\n  }\n\n  function callback(results, status) {\n    if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n      for (var i = 0; i < results.length; i++) {\n        createMarker(results[i]);\n      }\n    }\n  }\n\n  function createMarker(place) {\n    var placeLoc = place.geometry.location;\n    var marker = new window.google.maps.Marker({\n      map: map,\n      position: place.geometry.location\n    });\n    window.google.maps.event.addListener(marker, 'click', function () {\n      infowindow.setContent(place.name);\n      infowindow.open(map, this);\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"script\", {\n    src: \"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places&callback=initMap\",\n    async: true,\n    defer: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/kong/Desktop/urban_react/src/pages/test.jsx"],"names":["MarkerClusterer","useJsApiLoader","Test","map","infowindow","initMap","pyrmont","lat","lng","window","google","maps","Map","document","getElementById","center","zoom","InfoWindow","service","places","PlacesService","nearbySearch","location","radius","type","callback","results","status","PlacesServiceStatus","OK","i","length","createMarker","place","placeLoc","geometry","marker","Marker","position","event","addListener","setContent","name","open"],"mappings":";;AAAA;AACA,SAAQA,eAAR,EAAyBC,cAAzB,QAA8C,weAAe,SAASC,IAAT,GAAe;AAClB,MAAIC,GAAJ;AACA,MAAIC,UAAJ;;AAEA,WAASC,OAAT,GAAmB;AACnB,QAAIC,OAAO,GAAG;AAACC,MAAAA,GAAG,EAAE,CAAC,MAAP;AAAeC,MAAAA,GAAG,EAAE;AAApB,KAAd;AAEAL,IAAAA,GAAG,GAAG,IAAIM,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,GAAvB,CAA2BC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAA3B,EAA2D;AACjEC,MAAAA,MAAM,EAAET,OADyD;AAEjEU,MAAAA,IAAI,EAAE;AAF2D,KAA3D,CAAN;AAKAZ,IAAAA,UAAU,GAAG,IAAIK,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBM,UAAvB,EAAb;AACA,QAAIC,OAAO,GAAG,IAAIT,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBQ,MAAnB,CAA0BC,aAA9B,CAA4CjB,GAA5C,CAAd;AACAe,IAAAA,OAAO,CAACG,YAAR,CAAqB;AACrBC,MAAAA,QAAQ,EAAEhB,OADW;AAErBiB,MAAAA,MAAM,EAAE,GAFa;AAGrBC,MAAAA,IAAI,EAAE,CAAC,OAAD;AAHe,KAArB,EAIDC,QAJC;AAKH;;AAEG,WAASA,QAAT,CAAkBC,OAAlB,EAA2BC,MAA3B,EAAmC;AACnC,QAAIA,MAAM,KAAKlB,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBQ,MAAnB,CAA0BS,mBAA1B,CAA8CC,EAA7D,EAAiE;AACjE,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACK,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACzCE,QAAAA,YAAY,CAACN,OAAO,CAACI,CAAD,CAAR,CAAZ;AACH;AACA;AACA;;AAEG,WAASE,YAAT,CAAsBC,KAAtB,EAA6B;AAC7B,QAAIC,QAAQ,GAAGD,KAAK,CAACE,QAAN,CAAeb,QAA9B;AACA,QAAIc,MAAM,GAAG,IAAI3B,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB0B,MAAvB,CAA8B;AAC3ClC,MAAAA,GAAG,EAAEA,GADsC;AAE3CmC,MAAAA,QAAQ,EAAEL,KAAK,CAACE,QAAN,CAAeb;AAFkB,KAA9B,CAAb;AAKAb,IAAAA,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmB4B,KAAnB,CAAyBC,WAAzB,CAAqCJ,MAArC,EAA6C,OAA7C,EAAsD,YAAW;AACjEhC,MAAAA,UAAU,CAACqC,UAAX,CAAsBR,KAAK,CAACS,IAA5B;AACAtC,MAAAA,UAAU,CAACuC,IAAX,CAAgBxC,GAAhB,EAAqB,IAArB;AACH,KAHG;AAIH;;AAEF,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA;AAAQ,IAAA,GAAG,EAAC,4FAAZ;AAAyG,IAAA,KAAK,MAA9G;AAA+G,IAAA,KAAK,MAApH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,eAEA;AAAK,IAAA,EAAE,EAAC,KAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFA,CADD;AAMN","sourcesContent":["/* jshint esversion: 6 */\nimport {MarkerClusterer, useJsApiLoader} from \"@react-google-maps/api\";\n// const randomPosition = () => ({\n//     longitude: 53 + Math.random(),\n//     latitude: -6 + Math.random()\n// });\n// const randomMarker = (len) => (\n//     Array(len).fill(true).map((e, idx) => ({\n//         position: randomPosition()\n//     }))\n// );\n//\n\n//\n//     const [count,setCount] = React.useState({markers: randomMarker(10)});\n//     const randomMarkers=function (){\n//         setCount({markers: randomMarker(10)});\n//     };\n//     const plugins = [\n//         'MapType',\n//         'Scale',\n//         'OverView',\n//         'ControlBar', // v1.1.0 新增\n//         {\n//             name: 'ToolBar',\n//             options: {\n//                 visible: true,  // 不设置该属性默认就是 true\n//                 onCreated(ins){\n//                     console.log(ins);\n//                 },\n//             },\n//         }\n//     ];\n//     return(\n//             <div>\n//             <div style={{width: '100%', height: 372}}>\n//                 <Map plugins={plugins}  zoom={6} center={{longitude: 53,latitude: -6}}>\n//                     <Markers\n//                         markers={count.markers}\n//                     />\n//                 </Map>\n//             </div>\n//             <button onClick={randomMarkers.bind(this)}>Random Markers</button>\n//         </div>\n//         )\n// }\n//\n//\n//\n//\n// // import React, { Component } from 'react';\n// // import { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n// //\n// // import CurrentLocation from './Map';\n// // import {Map} from \"react-amap\";\n// //\n// // export default function Test(){\n// //     const state = {\n// //         showingInfoWindow: false,\n// //         activeMarker: {},\n// //         selectedPlace: {}\n// //     };\n// //\n// //     const onMarkerClick = (props, marker, e) =>\n// //         this.setState({\n// //             selectedPlace: props,\n// //             activeMarker: marker,\n// //             showingInfoWindow: true\n// //         });\n// //\n// //     const onClose = props => {\n// //         if (this.state.showingInfoWindow) {\n// //             this.setState({\n// //                 showingInfoWindow: false,\n// //                 activeMarker: null\n// //             });\n// //         }\n// //     };\n// //\n// //         return (\n// //             <CurrentLocation\n// //                 centerAroundCurrentLocation\n// //                 google={this.props.google}\n// //             ><Map\n// //                 google={this.props.google}\n// //                 zoom={14}\n// //                 initialCenter={{\n// //                     lat: -1.2884,\n// //                     lng: 36.8233\n// //                 }}\n// //             />\n// //\n// //                 <Marker onClick={onMarkerClick} name={'current location'} />\n// //                 <InfoWindow\n// //                     marker={state.activeMarker}\n// //                     visible={state.showingInfoWindow}\n// //                     onClose={onClose}\n// //                 >\n// //                     <div>\n// //                         <h4>{state.selectedPlace.name}</h4>\n// //                     </div>\n// //                 </InfoWindow>\n// //             </CurrentLocation>\n// //         );\n// //   }\n// //\n\n\n//Create a new map\n\n\nexport default function Test(){\n            var map;\n            var infowindow;\n\n            function initMap() {\n            var pyrmont = {lat: -33.867, lng: 151.195};\n\n            map = new window.google.maps.Map(document.getElementById('map'), {\n            center: pyrmont,\n            zoom: 15\n        });\n\n            infowindow = new window.google.maps.InfoWindow();\n            var service = new window.google.maps.places.PlacesService(map);\n            service.nearbySearch({\n            location: pyrmont,\n            radius: 500,\n            type: ['hotel']\n        }, callback);\n        }\n\n            function callback(results, status) {\n            if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n            for (var i = 0; i < results.length; i++) {\n            createMarker(results[i]);\n        }\n        }\n        }\n\n            function createMarker(place) {\n            var placeLoc = place.geometry.location;\n            var marker = new window.google.maps.Marker({\n            map: map,\n            position: place.geometry.location\n        });\n\n            window.google.maps.event.addListener(marker, 'click', function() {\n            infowindow.setContent(place.name);\n            infowindow.open(map, this);\n        });\n        }\n\n       return(\n        <div>\n        <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places&callback=initMap\" async defer/>\n        <div id=\"map\"/>\n        </div>\n       )\n}\n\n"]},"metadata":{},"sourceType":"module"}