{"ast":null,"code":"import _slicedToArray from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kong/Desktop/urban_react/src/pages/map.jsx\";\n\n/* jshint esversion: 6 */\nimport React, { useState } from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\nimport { Map, Markers } from 'react-amap';\nimport firebase from \"firebase/compat\";\nimport axios from \"axios\";\nimport { Input } from \"antd\";\nvar Search = Input.Search;\nvar containerStyle = {\n  width: '800px',\n  height: '400px'\n};\nexport default function map() {\n  var randomPosition = function randomPosition() {\n    return {\n      longitude: 53 + Math.random() * 1,\n      latitude: -6 + Math.random() * 1\n    };\n  };\n\n  var randomMarker = function randomMarker(len) {\n    return Array(len).fill(true).map(function (e, idx) {\n      return {\n        position: randomPosition()\n      };\n    });\n  };\n\n  var state = {\n    markers: randomMarker(100),\n    center: randomPosition()\n  };\n\n  var _useState = useState({\n    markers: randomMarker(10)\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      randomMarkers = _useState2[0],\n      setRandomMarkers = _useState2[1];\n\n  var firebaseConfig = {\n    apiKey: \"AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c\",\n    authDomain: \"urban-computing-cb07c.firebaseapp.com\",\n    databaseURL: \"https://urban-computing-cb07c-default-rtdb.firebaseio.com\",\n    projectId: \"urban-computing-cb07c\",\n    storageBucket: \"urban-computing-cb07c.appspot.com\",\n    messagingSenderId: \"293478437107\",\n    appId: \"1:293478437107:web:4cd5199b68f68eac542786\",\n    measurementId: \"G-3Z5DD1SJYQ\"\n  };\n\n  var _React$useState = React.useState({\n    lat: 53.49332,\n    lng: -6.31718\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      count = _React$useState2[0],\n      setCount = _React$useState2[1];\n\n  var myArr = [];\n  React.useEffect(function () {\n    firebase.initializeApp(firebaseConfig);\n    firebase.database().ref('/').on('value', function (snap) {\n      var obj = snap.val();\n\n      if (obj !== null) {\n        for (var key in obj) {\n          if (key.split(',')[2] > '22 13:35:00') {\n            setCount(obj[key]);\n            console.log(obj[key]);\n          }\n        }\n      }\n    });\n  }, []);\n\n  var _useJsApiLoader = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c\"\n  }),\n      isLoaded = _useJsApiLoader.isLoaded;\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      map = _React$useState4[0],\n      setMap = _React$useState4[1];\n\n  function query(map) {\n    var marker2 = new window.google.maps.Marker({\n      position: {\n        lat: 51.49332,\n        lng: -6.31718\n      },\n      title: \"starting\"\n    });\n    axios.get('https://maps.googleapis.com/maps/api/place/nearbysearch/json', {\n      params: {\n        key: 'AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c',\n        types: 'cafe',\n        location: '53.26,-6.15',\n        radius: '100000'\n      }\n    }).then(function (response) {\n      var result = response.data.results;\n\n      for (var key in result) {\n        myArr.push(result[key].geometry.location);\n      }\n\n      for (var _key in myArr) {\n        var marker = new window.google.maps.Marker({\n          position: myArr[_key],\n          title: \"starting\"\n        });\n        marker.setMap(map);\n        console.log(myArr[_key]);\n      }\n    }).catch(function (error) {\n      console.log(error);\n    });\n    marker2.setMap(map);\n  }\n\n  ;\n\n  function callback(map) {\n    var marker1 = new window.google.maps.Marker({\n      position: count,\n      title: \"starting\"\n    });\n    axios.get('https://maps.googleapis.com/maps/api/place/nearbysearch/json', {\n      params: {\n        key: 'AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c',\n        types: 'dinner',\n        location: '53.26,-6.15',\n        radius: '100000'\n      }\n    }).then(function (response) {\n      var result = response.data.results;\n\n      for (var key in result) {\n        myArr.push(result[key].geometry.location);\n      }\n\n      for (var _key2 in myArr) {\n        var marker = new window.google.maps.Marker({\n          position: myArr[_key2]\n        });\n        marker.setMap(map);\n        console.log(myArr[_key2]);\n      }\n    });\n    console.log(count);\n    marker1.setMap(map);\n  }\n\n  ;\n  return isLoaded ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: count,\n    zoom: 20,\n    onLoad: query,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Markers, {\n    markers: state.markers,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 103\n    }\n  }), \" \"), /*#__PURE__*/React.createElement(\"p\", {\n    style: {\n      marginLeft: '5px',\n      fontWeight: 'bold',\n      marginTop: '10px',\n      color: '#0066FF'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, \"\\u641C\\u7D22\\u9644\\u8FD1\\u9910\\u996E\\u5E97:\"), /*#__PURE__*/React.createElement(Search, {\n    style: {\n      width: '330px',\n      marginLeft: '110px',\n      marginBottom: '5px',\n      marginTop: '-42px'\n    },\n    placeholder: \"input search text\",\n    onSearch: query,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 106\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null);\n}","map":{"version":3,"sources":["/Users/kong/Desktop/urban_react/src/pages/map.jsx"],"names":["React","useState","GoogleMap","useJsApiLoader","Map","Markers","firebase","axios","Input","Search","containerStyle","width","height","map","randomPosition","longitude","Math","random","latitude","randomMarker","len","Array","fill","e","idx","position","state","markers","center","randomMarkers","setRandomMarkers","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","lat","lng","count","setCount","myArr","useEffect","initializeApp","database","ref","on","snap","obj","val","key","split","console","log","id","googleMapsApiKey","isLoaded","setMap","query","marker2","window","google","maps","Marker","title","get","params","types","location","radius","then","response","result","data","results","push","geometry","marker","catch","error","callback","marker1","marginLeft","fontWeight","marginTop","color","marginBottom"],"mappings":";;;AAAA;AAEA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,SAAR,EAAkBC,cAAlB,QAAuC,wBAAvC;AACA,SAASC,GAAT,EAAcC,OAAd,QAA6B,YAA7B;AAEA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,MAApB;IACQC,M,GAAWD,K,CAAXC,M;AAGR,IAAMC,cAAc,GAAG;AACnBC,EAAAA,KAAK,EAAE,OADY;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAAvB;AAMA,eAAe,SAASC,GAAT,GAAe;AAC1B,MAAMC,cAAc,GAAG,SAAjBA,cAAiB;AAAA,WAAO;AAC1BC,MAAAA,SAAS,EAAE,KAAKC,IAAI,CAACC,MAAL,KAAgB,CADN;AAE1BC,MAAAA,QAAQ,EAAE,CAAC,CAAD,GAAKF,IAAI,CAACC,MAAL,KAAgB;AAFL,KAAP;AAAA,GAAvB;;AAIA,MAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,GAAD;AAAA,WACjBC,KAAK,CAACD,GAAD,CAAL,CAAWE,IAAX,CAAgB,IAAhB,EAAsBT,GAAtB,CAA0B,UAACU,CAAD,EAAIC,GAAJ;AAAA,aAAa;AACnCC,QAAAA,QAAQ,EAAEX,cAAc;AADW,OAAb;AAAA,KAA1B,CADiB;AAAA,GAArB;;AAKA,MAAMY,KAAK,GAAG;AACVC,IAAAA,OAAO,EAAER,YAAY,CAAC,GAAD,CADX;AAEVS,IAAAA,MAAM,EAAEd,cAAc;AAFZ,GAAd;;AAV0B,kBAccb,QAAQ,CAAC;AAAC0B,IAAAA,OAAO,EAAER,YAAY,CAAC,EAAD;AAAtB,GAAD,CAdtB;AAAA;AAAA,MAcnBU,aAdmB;AAAA,MAcLC,gBAdK;;AAgB1B,MAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,yCADW;AAEnBC,IAAAA,UAAU,EAAE,uCAFO;AAGnBC,IAAAA,WAAW,EAAE,2DAHM;AAInBC,IAAAA,SAAS,EAAE,uBAJQ;AAKnBC,IAAAA,aAAa,EAAE,mCALI;AAMnBC,IAAAA,iBAAiB,EAAE,cANA;AAOnBC,IAAAA,KAAK,EAAE,2CAPY;AAQnBC,IAAAA,aAAa,EAAE;AARI,GAAvB;;AAhB0B,wBA0BDvC,KAAK,CAACC,QAAN,CAAe;AAACuC,IAAAA,GAAG,EAAE,QAAN;AAAgBC,IAAAA,GAAG,EAAE,CAAC;AAAtB,GAAf,CA1BC;AAAA;AAAA,MA0BnBC,KA1BmB;AAAA,MA0BZC,QA1BY;;AA2B1B,MAAIC,KAAK,GAAC,EAAV;AAEA5C,EAAAA,KAAK,CAAC6C,SAAN,CAAgB,YAAI;AACZvC,IAAAA,QAAQ,CAACwC,aAAT,CAAuBf,cAAvB;AACAzB,IAAAA,QAAQ,CAACyC,QAAT,GAAoBC,GAApB,CAAwB,GAAxB,EAA6BC,EAA7B,CAAgC,OAAhC,EAAwC,UAACC,IAAD,EAAS;AAC7C,UAAIC,GAAG,GAAGD,IAAI,CAACE,GAAL,EAAV;;AACA,UAAID,GAAG,KAAK,IAAZ,EAAkB;AACd,aAAK,IAAIE,GAAT,IAAgBF,GAAhB,EAAqB;AACjB,cAAGE,GAAG,CAACC,KAAJ,CAAU,GAAV,EAAe,CAAf,IAAkB,aAArB,EAAoC;AAChCX,YAAAA,QAAQ,CAACQ,GAAG,CAACE,GAAD,CAAJ,CAAR;AACAE,YAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACE,GAAD,CAAf;AACH;AACJ;AACJ;AACJ,KAVD;AAWP,GAbD,EAaE,EAbF;;AA7B0B,wBA6CLlD,cAAc,CAAC;AAChCsD,IAAAA,EAAE,EAAE,mBAD4B;AAEhCC,IAAAA,gBAAgB,EAAE;AAFc,GAAD,CA7CT;AAAA,MA6ClBC,QA7CkB,mBA6ClBA,QA7CkB;;AAAA,yBAiDJ3D,KAAK,CAACC,QAAN,CAAe,IAAf,CAjDI;AAAA;AAAA,MAiDnBY,GAjDmB;AAAA,MAiDd+C,MAjDc;;AAmD1B,WAASC,KAAT,CAAehD,GAAf,EAAmB;AACf,QAAMiD,OAAO,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,MAAvB,CAA8B;AAC1CzC,MAAAA,QAAQ,EAAE;AAACe,QAAAA,GAAG,EAAE,QAAN;AAAgBC,QAAAA,GAAG,EAAE,CAAC;AAAtB,OADgC;AAE1C0B,MAAAA,KAAK,EAAE;AAFmC,KAA9B,CAAhB;AAIA5D,IAAAA,KAAK,CAAC6D,GAAN,CAAU,8DAAV,EAA0E;AACtEC,MAAAA,MAAM,EAAE;AACJhB,QAAAA,GAAG,EAAE,yCADD;AAEJiB,QAAAA,KAAK,EAAE,MAFH;AAGJC,QAAAA,QAAQ,EAAE,aAHN;AAIJC,QAAAA,MAAM,EAAE;AAJJ;AAD8D,KAA1E,EAOGC,IAPH,CAOQ,UAAUC,QAAV,EAAoB;AACxB,UAAMC,MAAM,GAAGD,QAAQ,CAACE,IAAT,CAAcC,OAA7B;;AACA,WAAK,IAAIxB,GAAT,IAAgBsB,MAAhB,EAAwB;AACpB/B,QAAAA,KAAK,CAACkC,IAAN,CAAWH,MAAM,CAACtB,GAAD,CAAN,CAAY0B,QAAZ,CAAqBR,QAAhC;AACH;;AACD,WAAI,IAAIlB,IAAR,IAAeT,KAAf,EAAsB;AAClB,YAAMoC,MAAM,GAAG,IAAIjB,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,MAAvB,CAA8B;AACzCzC,UAAAA,QAAQ,EAAEmB,KAAK,CAACS,IAAD,CAD0B;AAEzCc,UAAAA,KAAK,EAAE;AAFkC,SAA9B,CAAf;AAIAa,QAAAA,MAAM,CAACpB,MAAP,CAAc/C,GAAd;AACA0C,QAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACS,IAAD,CAAjB;AACH;AACJ,KApBD,EAqBK4B,KArBL,CAqBW,UAAUC,KAAV,EAAiB;AACpB3B,MAAAA,OAAO,CAACC,GAAR,CAAY0B,KAAZ;AACH,KAvBL;AAwBApB,IAAAA,OAAO,CAACF,MAAR,CAAe/C,GAAf;AACH;;AAAA;;AAED,WAASsE,QAAT,CAAkBtE,GAAlB,EAAuB;AACnB,QAAMuE,OAAO,GAAG,IAAIrB,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,MAAvB,CAA8B;AAC1CzC,MAAAA,QAAQ,EAAEiB,KADgC;AAE1CyB,MAAAA,KAAK,EAAE;AAFmC,KAA9B,CAAhB;AAIA5D,IAAAA,KAAK,CAAC6D,GAAN,CAAU,8DAAV,EAA0E;AACtEC,MAAAA,MAAM,EAAE;AACJhB,QAAAA,GAAG,EAAE,yCADD;AAEJiB,QAAAA,KAAK,EAAE,QAFH;AAGJC,QAAAA,QAAQ,EAAE,aAHN;AAIJC,QAAAA,MAAM,EAAE;AAJJ;AAD8D,KAA1E,EAOGC,IAPH,CAOQ,UAAUC,QAAV,EAAoB;AACxB,UAAMC,MAAM,GAAGD,QAAQ,CAACE,IAAT,CAAcC,OAA7B;;AACA,WAAK,IAAIxB,GAAT,IAAgBsB,MAAhB,EAAwB;AACpB/B,QAAAA,KAAK,CAACkC,IAAN,CAAWH,MAAM,CAACtB,GAAD,CAAN,CAAY0B,QAAZ,CAAqBR,QAAhC;AACH;;AACD,WAAK,IAAIlB,KAAT,IAAgBT,KAAhB,EAAuB;AACnB,YAAMoC,MAAM,GAAG,IAAIjB,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,MAAvB,CAA8B;AACzCzC,UAAAA,QAAQ,EAAEmB,KAAK,CAACS,KAAD;AAD0B,SAA9B,CAAf;AAGA2B,QAAAA,MAAM,CAACpB,MAAP,CAAc/C,GAAd;AACA0C,QAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACS,KAAD,CAAjB;AACH;AACJ,KAnBD;AAoBAE,IAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;AACA0C,IAAAA,OAAO,CAACxB,MAAR,CAAe/C,GAAf;AACH;;AAAA;AAID,SAAO8C,QAAQ,gBACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAY,IAAA,iBAAiB,EAAEjD,cAA/B;AAAgD,IAAA,MAAM,EAAEgC,KAAxD;AAAgE,IAAA,IAAI,EAAE,EAAtE;AAA2E,IAAA,MAAM,EAAEmB,KAAnF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA0F,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAEnC,KAAK,CAACC,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1F,MADJ,eAEI;AAAG,IAAA,KAAK,EAAE;AAAC0D,MAAAA,UAAU,EAAC,KAAZ;AAAkBC,MAAAA,UAAU,EAAC,MAA7B;AAAoCC,MAAAA,SAAS,EAAC,MAA9C;AAAqDC,MAAAA,KAAK,EAAC;AAA3D,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mDAFJ,eAEiG,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE;AAAC7E,MAAAA,KAAK,EAAC,OAAP;AAAe0E,MAAAA,UAAU,EAAC,OAA1B;AAAkCI,MAAAA,YAAY,EAAC,KAA/C;AAAqDF,MAAAA,SAAS,EAAC;AAA/D,KAAf;AAAwF,IAAA,WAAW,EAAC,mBAApG;AAAwH,IAAA,QAAQ,EAAE1B,KAAlI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFjG,CADW,gBAMX,yCANJ;AAOH","sourcesContent":["/* jshint esversion: 6 */\n\nimport React, {useState} from 'react';\nimport {GoogleMap,useJsApiLoader} from '@react-google-maps/api';\nimport { Map, Markers } from 'react-amap';\n\nimport firebase from \"firebase/compat\";\nimport axios from \"axios\";\nimport {Input} from \"antd\";\nconst { Search } = Input;\n\n\nconst containerStyle = {\n    width: '800px',\n    height: '400px'\n};\n\n\nexport default function map() {\n    const randomPosition = () => ({\n        longitude: 53 + Math.random() * 1,\n        latitude: -6 + Math.random() * 1\n    });\n    const randomMarker = (len) => (\n        Array(len).fill(true).map((e, idx) => ({\n            position: randomPosition()\n        }))\n    );\n    const state = {\n        markers: randomMarker(100),\n        center: randomPosition()\n    };\n    const [randomMarkers,setRandomMarkers]= useState({markers: randomMarker(10)});\n\n    const firebaseConfig = {\n        apiKey: \"AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c\",\n        authDomain: \"urban-computing-cb07c.firebaseapp.com\",\n        databaseURL: \"https://urban-computing-cb07c-default-rtdb.firebaseio.com\",\n        projectId: \"urban-computing-cb07c\",\n        storageBucket: \"urban-computing-cb07c.appspot.com\",\n        messagingSenderId: \"293478437107\",\n        appId: \"1:293478437107:web:4cd5199b68f68eac542786\",\n        measurementId: \"G-3Z5DD1SJYQ\"\n    };\n    const [count, setCount] =React.useState({lat: 53.49332, lng: -6.31718});\n    let myArr=[];\n\n    React.useEffect(()=>{\n            firebase.initializeApp(firebaseConfig);\n            firebase.database().ref('/').on('value',(snap)=> {\n                let obj = snap.val();\n                if (obj !== null) {\n                    for (var key in obj) {\n                        if(key.split(',')[2]>'22 13:35:00') {\n                            setCount(obj[key]);\n                            console.log(obj[key]);\n                        }\n                    }\n                }\n            });\n    },[]);\n\n\n    const { isLoaded } = useJsApiLoader({\n        id: 'google-map-script',\n        googleMapsApiKey: \"AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c\"\n    });\n    const [map, setMap] = React.useState(null);\n\n    function query(map){\n        const marker2 = new window.google.maps.Marker({\n            position: {lat: 51.49332, lng: -6.31718},\n            title: \"starting\"\n        });\n        axios.get('https://maps.googleapis.com/maps/api/place/nearbysearch/json', {\n            params: {\n                key: 'AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c',\n                types: 'cafe',\n                location: '53.26,-6.15',\n                radius: '100000'\n            }\n        }).then(function (response) {\n            const result = response.data.results;\n            for (var key in result) {\n                myArr.push(result[key].geometry.location);\n            }\n            for(let key in myArr) {\n                const marker = new window.google.maps.Marker({\n                    position: myArr[key],\n                    title: \"starting\"\n                });\n                marker.setMap(map);\n                console.log(myArr[key]);\n            }\n        })\n            .catch(function (error) {\n                console.log(error);\n            });\n        marker2.setMap(map);\n    };\n\n    function callback(map) {\n        const marker1 = new window.google.maps.Marker({\n            position: count,\n            title: \"starting\"\n        });\n        axios.get('https://maps.googleapis.com/maps/api/place/nearbysearch/json', {\n            params: {\n                key: 'AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c',\n                types: 'dinner',\n                location: '53.26,-6.15',\n                radius: '100000'\n            }\n        }).then(function (response) {\n            const result = response.data.results;\n            for (var key in result) {\n                myArr.push(result[key].geometry.location);\n            }\n            for (let key in myArr) {\n                const marker = new window.google.maps.Marker({\n                    position: myArr[key],\n                });\n                marker.setMap(map);\n                console.log(myArr[key]);\n            }\n        });\n        console.log(count);\n        marker1.setMap(map);\n    };\n\n\n\n    return isLoaded ? (\n        <div>\n            <GoogleMap  mapContainerStyle={containerStyle}  center={count}  zoom={20}  onLoad={query}><Markers markers={state.markers}/> </GoogleMap>\n            <p style={{marginLeft:'5px',fontWeight:'bold',marginTop:'10px',color:'#0066FF'}}>搜索附近餐饮店:</p><Search style={{width:'330px',marginLeft:'110px',marginBottom:'5px',marginTop:'-42px'}} placeholder=\"input search text\" onSearch={query}></Search>\n            {/*<GoogleMap  mapContainerStyle={containerStyle}  center={count}  zoom={20}  onLoad={callback}><Markers markers={state.markers}/> </GoogleMap><button onClick={setRandomMarkers(this)}>Random Markers</button>*/}\n        </div>\n    ) : <></>\n}\n"]},"metadata":{},"sourceType":"module"}