{"ast":null,"code":"import _classCallCheck from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\n\nvar _jsxFileName = \"/Users/kong/Desktop/urban_react/src/pages/test.jsx\",\n    _this = this;\n\n/* jshint esversion: 6 */\nimport { MarkerClusterer, useJsApiLoader } from \"@react-google-maps/api\"; // const randomPosition = () => ({\n//     longitude: 53 + Math.random(),\n//     latitude: -6 + Math.random()\n// });\n// const randomMarker = (len) => (\n//     Array(len).fill(true).map((e, idx) => ({\n//         position: randomPosition()\n//     }))\n// );\n//\n//\n//     const [count,setCount] = React.useState({markers: randomMarker(10)});\n//     const randomMarkers=function (){\n//         setCount({markers: randomMarker(10)});\n//     };\n//     const plugins = [\n//         'MapType',\n//         'Scale',\n//         'OverView',\n//         'ControlBar', // v1.1.0 新增\n//         {\n//             name: 'ToolBar',\n//             options: {\n//                 visible: true,  // 不设置该属性默认就是 true\n//                 onCreated(ins){\n//                     console.log(ins);\n//                 },\n//             },\n//         }\n//     ];\n//     return(\n//             <div>\n//             <div style={{width: '100%', height: 372}}>\n//                 <Map plugins={plugins}  zoom={6} center={{longitude: 53,latitude: -6}}>\n//                     <Markers\n//                         markers={count.markers}\n//                     />\n//                 </Map>\n//             </div>\n//             <button onClick={randomMarkers.bind(this)}>Random Markers</button>\n//         </div>\n//         )\n// }\n//\n//\n//\n//\n// // import React, { Component } from 'react';\n// // import { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n// //\n// // import CurrentLocation from './Map';\n// // import {Map} from \"react-amap\";\n// //\n// // export default function Test(){\n// //     const state = {\n// //         showingInfoWindow: false,\n// //         activeMarker: {},\n// //         selectedPlace: {}\n// //     };\n// //\n// //     const onMarkerClick = (props, marker, e) =>\n// //         this.setState({\n// //             selectedPlace: props,\n// //             activeMarker: marker,\n// //             showingInfoWindow: true\n// //         });\n// //\n// //     const onClose = props => {\n// //         if (this.state.showingInfoWindow) {\n// //             this.setState({\n// //                 showingInfoWindow: false,\n// //                 activeMarker: null\n// //             });\n// //         }\n// //     };\n// //\n// //         return (\n// //             <CurrentLocation\n// //                 centerAroundCurrentLocation\n// //                 google={this.props.google}\n// //             ><Map\n// //                 google={this.props.google}\n// //                 zoom={14}\n// //                 initialCenter={{\n// //                     lat: -1.2884,\n// //                     lng: 36.8233\n// //                 }}\n// //             />\n// //\n// //                 <Marker onClick={onMarkerClick} name={'current location'} />\n// //                 <InfoWindow\n// //                     marker={state.activeMarker}\n// //                     visible={state.showingInfoWindow}\n// //                     onClose={onClose}\n// //                 >\n// //                     <div>\n// //                         <h4>{state.selectedPlace.name}</h4>\n// //                     </div>\n// //                 </InfoWindow>\n// //             </CurrentLocation>\n// //         );\n// //   }\n// //\n//Create a new map\n\n/*global google*/\n\nimport React from \"react\";\nimport { compose, withProps, withHandlers, withState } from \"recompose\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\nvar MyMapComponent = compose(withProps({\n  googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n  loadingElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 25\n    }\n  }),\n  containerElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"400px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 27\n    }\n  }),\n  mapElement: /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"100%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 21\n    }\n  })\n}), withScriptjs, withGoogleMap, withState('places', 'updatePlaces', ''), withHandlers(function () {\n  var refs = {\n    map: undefined\n  };\n  return {\n    onMapMounted: function onMapMounted() {\n      return function (ref) {\n        refs.map = ref;\n      };\n    },\n    fetchPlaces: function fetchPlaces(_ref) {\n      var updatePlaces = _ref.updatePlaces;\n      var places;\n      var bounds = refs.map.getBounds();\n      var service = new google.maps.places.PlacesService(refs.map.context.__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);\n      var request = {\n        bounds: bounds,\n        type: ['hotel']\n      };\n      service.nearbySearch(request, function (results, status) {\n        if (status == google.maps.places.PlacesServiceStatus.OK) {\n          console.log(results);\n          updatePlaces(results);\n        }\n      });\n    }\n  };\n}))(function (props) {\n  return /*#__PURE__*/React.createElement(GoogleMap, {\n    onTilesLoaded: props.fetchPlaces,\n    ref: props.onMapMounted,\n    onBoundsChanged: props.fetchPlaces,\n    defaultZoom: 8,\n    defaultCenter: {\n      lat: 51.508530,\n      lng: -0.076132\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }, props.places && props.places.map(function (place, i) {\n    return /*#__PURE__*/React.createElement(Marker, {\n      key: i,\n      position: {\n        lat: place.geometry.location.lat(),\n        lng: place.geometry.location.lng()\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }\n    });\n  }));\n});\n\nvar _useJsApiLoader = useJsApiLoader({\n  id: 'google-map-script',\n  googleMapsApiKey: \"AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c\"\n}),\n    isLoaded = _useJsApiLoader.isLoaded;\n\nvar MyFancyComponent = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(MyFancyComponent, _React$PureComponent);\n\n  function MyFancyComponent() {\n    _classCallCheck(this, MyFancyComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(MyFancyComponent).apply(this, arguments));\n  }\n\n  _createClass(MyFancyComponent, [{\n    key: \"render\",\n    value: function render() {\n      return isLoaded ? /*#__PURE__*/React.createElement(MyMapComponent, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }\n      }) : /*#__PURE__*/React.createElement(React.Fragment, null);\n    }\n  }]);\n\n  return MyFancyComponent;\n}(React.PureComponent);\n\nexport { MyFancyComponent as default };","map":{"version":3,"sources":["/Users/kong/Desktop/urban_react/src/pages/test.jsx"],"names":["MarkerClusterer","useJsApiLoader","React","compose","withProps","withHandlers","withState","withScriptjs","withGoogleMap","GoogleMap","Marker","MyMapComponent","googleMapURL","loadingElement","height","containerElement","mapElement","refs","map","undefined","onMapMounted","ref","fetchPlaces","updatePlaces","places","bounds","getBounds","service","google","maps","PlacesService","context","__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","request","type","nearbySearch","results","status","PlacesServiceStatus","OK","console","log","props","lat","lng","place","i","geometry","location","id","googleMapsApiKey","isLoaded","MyFancyComponent","PureComponent"],"mappings":";;;;;;;;;AAAA;AACA,SAAQA,eAAR,EAAyBC,cAAzB,QAA8C,wkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,SAAlB,EAA6BC,YAA7B,EAA2CC,SAA3C,QAA4D,WAA5D;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,SAAtC,EAAiDC,MAAjD,QAA+D,mBAA/D;AAEA,IAAMC,cAAc,GAAGR,OAAO,CAC1BC,SAAS,CAAC;AACNQ,EAAAA,YAAY,EAAE,mFADR;AAENC,EAAAA,cAAc,eAAE;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,MAAM;AAAR,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFV;AAGNC,EAAAA,gBAAgB,eAAE;AAAK,IAAA,KAAK,EAAE;AAAED,MAAAA,MAAM;AAAR,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHZ;AAINE,EAAAA,UAAU,eAAE;AAAK,IAAA,KAAK,EAAE;AAAEF,MAAAA,MAAM;AAAR,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJN,CAAD,CADiB,EAO1BP,YAP0B,EAQ1BC,aAR0B,EAS1BF,SAAS,CAAC,QAAD,EAAW,cAAX,EAA2B,EAA3B,CATiB,EAU1BD,YAAY,CAAC,YAAM;AACf,MAAMY,IAAI,GAAG;AACTC,IAAAA,GAAG,EAAEC;AADI,GAAb;AAIA,SAAO;AACHC,IAAAA,YAAY,EAAE;AAAA,aAAM,UAAAC,GAAG,EAAI;AACvBJ,QAAAA,IAAI,CAACC,GAAL,GAAWG,GAAX;AACH,OAFa;AAAA,KADX;AAIHC,IAAAA,WAAW,EAAE,2BAAsB;AAAA,UAAnBC,YAAmB,QAAnBA,YAAmB;AAC/B,UAAIC,MAAJ;AACA,UAAMC,MAAM,GAAGR,IAAI,CAACC,GAAL,CAASQ,SAAT,EAAf;AACA,UAAMC,OAAO,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYL,MAAZ,CAAmBM,aAAvB,CAAqCb,IAAI,CAACC,GAAL,CAASa,OAAT,CAAiBC,4CAAtD,CAAhB;AACA,UAAMC,OAAO,GAAG;AACZR,QAAAA,MAAM,EAAEA,MADI;AAEZS,QAAAA,IAAI,EAAE,CAAC,OAAD;AAFM,OAAhB;AAIAP,MAAAA,OAAO,CAACQ,YAAR,CAAqBF,OAArB,EAA8B,UAACG,OAAD,EAAUC,MAAV,EAAqB;AAC/C,YAAIA,MAAM,IAAIT,MAAM,CAACC,IAAP,CAAYL,MAAZ,CAAmBc,mBAAnB,CAAuCC,EAArD,EAAyD;AACrDC,UAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACAb,UAAAA,YAAY,CAACa,OAAD,CAAZ;AACH;AACJ,OALD;AAMH;AAlBE,GAAP;AAoBH,CAzBW,CAVc,CAAP,CAoCrB,UAACM,KAAD,EAAW;AACT,sBACI,oBAAC,SAAD;AACI,IAAA,aAAa,EAAEA,KAAK,CAACpB,WADzB;AAEI,IAAA,GAAG,EAAEoB,KAAK,CAACtB,YAFf;AAGI,IAAA,eAAe,EAAEsB,KAAK,CAACpB,WAH3B;AAII,IAAA,WAAW,EAAE,CAJjB;AAKI,IAAA,aAAa,EAAE;AAAEqB,MAAAA,GAAG,EAAE,SAAP;AAAkBC,MAAAA,GAAG,EAAE,CAAC;AAAxB,KALnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOKF,KAAK,CAAClB,MAAN,IAAgBkB,KAAK,CAAClB,MAAN,CAAaN,GAAb,CAAiB,UAAC2B,KAAD,EAAQC,CAAR;AAAA,wBAC9B,oBAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,CAAb;AAAgB,MAAA,QAAQ,EAAE;AAAEH,QAAAA,GAAG,EAAEE,KAAK,CAACE,QAAN,CAAeC,QAAf,CAAwBL,GAAxB,EAAP;AAAsCC,QAAAA,GAAG,EAAEC,KAAK,CAACE,QAAN,CAAeC,QAAf,CAAwBJ,GAAxB;AAA3C,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAD8B;AAAA,GAAjB,CAPrB,CADJ;AAaH,CAlDsB,CAAvB;;sBAmDqB3C,cAAc,CAAC;AAChCgD,EAAAA,EAAE,EAAE,mBAD4B;AAEhCC,EAAAA,gBAAgB,EAAE;AAFc,CAAD,C;IAA3BC,Q,mBAAAA,Q;;IAKaC,gB;;;;;;;;;;;6BACP;AACN,aAAOD,QAAQ,gBACX,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADW,gBAEZ,yCAFH;AAGH;;;;EALyCjD,KAAK,CAACmD,a;;SAA/BD,gB","sourcesContent":["/* jshint esversion: 6 */\nimport {MarkerClusterer, useJsApiLoader} from \"@react-google-maps/api\";\n// const randomPosition = () => ({\n//     longitude: 53 + Math.random(),\n//     latitude: -6 + Math.random()\n// });\n// const randomMarker = (len) => (\n//     Array(len).fill(true).map((e, idx) => ({\n//         position: randomPosition()\n//     }))\n// );\n//\n\n//\n//     const [count,setCount] = React.useState({markers: randomMarker(10)});\n//     const randomMarkers=function (){\n//         setCount({markers: randomMarker(10)});\n//     };\n//     const plugins = [\n//         'MapType',\n//         'Scale',\n//         'OverView',\n//         'ControlBar', // v1.1.0 新增\n//         {\n//             name: 'ToolBar',\n//             options: {\n//                 visible: true,  // 不设置该属性默认就是 true\n//                 onCreated(ins){\n//                     console.log(ins);\n//                 },\n//             },\n//         }\n//     ];\n//     return(\n//             <div>\n//             <div style={{width: '100%', height: 372}}>\n//                 <Map plugins={plugins}  zoom={6} center={{longitude: 53,latitude: -6}}>\n//                     <Markers\n//                         markers={count.markers}\n//                     />\n//                 </Map>\n//             </div>\n//             <button onClick={randomMarkers.bind(this)}>Random Markers</button>\n//         </div>\n//         )\n// }\n//\n//\n//\n//\n// // import React, { Component } from 'react';\n// // import { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n// //\n// // import CurrentLocation from './Map';\n// // import {Map} from \"react-amap\";\n// //\n// // export default function Test(){\n// //     const state = {\n// //         showingInfoWindow: false,\n// //         activeMarker: {},\n// //         selectedPlace: {}\n// //     };\n// //\n// //     const onMarkerClick = (props, marker, e) =>\n// //         this.setState({\n// //             selectedPlace: props,\n// //             activeMarker: marker,\n// //             showingInfoWindow: true\n// //         });\n// //\n// //     const onClose = props => {\n// //         if (this.state.showingInfoWindow) {\n// //             this.setState({\n// //                 showingInfoWindow: false,\n// //                 activeMarker: null\n// //             });\n// //         }\n// //     };\n// //\n// //         return (\n// //             <CurrentLocation\n// //                 centerAroundCurrentLocation\n// //                 google={this.props.google}\n// //             ><Map\n// //                 google={this.props.google}\n// //                 zoom={14}\n// //                 initialCenter={{\n// //                     lat: -1.2884,\n// //                     lng: 36.8233\n// //                 }}\n// //             />\n// //\n// //                 <Marker onClick={onMarkerClick} name={'current location'} />\n// //                 <InfoWindow\n// //                     marker={state.activeMarker}\n// //                     visible={state.showingInfoWindow}\n// //                     onClose={onClose}\n// //                 >\n// //                     <div>\n// //                         <h4>{state.selectedPlace.name}</h4>\n// //                     </div>\n// //                 </InfoWindow>\n// //             </CurrentLocation>\n// //         );\n// //   }\n// //\n\n\n//Create a new map\n\n\n/*global google*/\nimport React from \"react\";\nimport { compose, withProps, withHandlers, withState } from \"recompose\";\nimport { withScriptjs, withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\n\nconst MyMapComponent = compose(\n    withProps({\n        googleMapURL: \"https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=geometry,drawing,places\",\n        loadingElement: <div style={{ height: `100%` }} />,\n        containerElement: <div style={{ height: `400px` }} />,\n        mapElement: <div style={{ height: `100%` }} />,\n    }),\n    withScriptjs,\n    withGoogleMap,\n    withState('places', 'updatePlaces', ''),\n    withHandlers(() => {\n        const refs = {\n            map: undefined,\n        }\n\n        return {\n            onMapMounted: () => ref => {\n                refs.map = ref\n            },\n            fetchPlaces: ({ updatePlaces }) => {\n                let places;\n                const bounds = refs.map.getBounds();\n                const service = new google.maps.places.PlacesService(refs.map.context.__SECRET_MAP_DO_NOT_USE_OR_YOU_WILL_BE_FIRED);\n                const request = {\n                    bounds: bounds,\n                    type: ['hotel']\n                };\n                service.nearbySearch(request, (results, status) => {\n                    if (status == google.maps.places.PlacesServiceStatus.OK) {\n                        console.log(results);\n                        updatePlaces(results);\n                    }\n                })\n            }\n        }\n    }),\n)((props) => {\n    return (\n        <GoogleMap\n            onTilesLoaded={props.fetchPlaces}\n            ref={props.onMapMounted}\n            onBoundsChanged={props.fetchPlaces}\n            defaultZoom={8}\n            defaultCenter={{ lat: 51.508530, lng: -0.076132 }}\n        >\n            {props.places && props.places.map((place, i) =>\n                <Marker key={i} position={{ lat: place.geometry.location.lat(), lng: place.geometry.location.lng() }} />\n            )}\n        </GoogleMap>\n    )\n})\nconst { isLoaded } = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c\"\n});\n\nexport default class MyFancyComponent extends React.PureComponent {\n    render () {\n        return isLoaded ?(\n            <MyMapComponent />\n        ): <></>\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}