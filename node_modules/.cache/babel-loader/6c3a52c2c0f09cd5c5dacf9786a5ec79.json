{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _withPropsReactive = require('../utils/withPropsReactive');\n\nvar _withPropsReactive2 = _interopRequireDefault(_withPropsReactive);\n\nvar _log = require('../utils/log');\n\nvar _log2 = _interopRequireDefault(_log);\n\nvar _common = require('../utils/common');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/*\n * props\n * {\n *  __map__ 父级组件传过来的地图实例\n * }\n */\n\n\nvar Component = _react2.default.Component;\nvar configurableProps = ['content', 'position', 'size',\n/* 以下属性是本插件的扩展 */\n'visible',\n/* 这个 setOffset  方法高德并没有明确在文档中列出来，不确定会不会撤销 */\n'offset'];\nvar allProps = configurableProps.concat(['isCustom', 'autoMove', 'closeWhenClickMap', 'showShadow']);\n\nvar InfoWindow = function (_Component) {\n  _inherits(InfoWindow, _Component);\n\n  function InfoWindow(props) {\n    _classCallCheck(this, InfoWindow);\n\n    var _this = _possibleConstructorReturn(this, (InfoWindow.__proto__ || Object.getPrototypeOf(InfoWindow)).call(this, props));\n\n    if (typeof window !== 'undefined') {\n      if (!props.__map__) {\n        _log2.default.warning('MAP_INSTANCE_REQUIRED');\n      } else {\n        var self = _this;\n        _this.setterMap = {\n          visible: function visible(val) {\n            if (val) {\n              self.showWindow();\n              self.setClassName(self.props);\n              self.setChild(self.props);\n            } else {\n              self.closeWindow();\n            }\n          }\n        };\n        _this.converterMap = {\n          size: _common.toSize,\n          offset: _common.toPixel,\n          position: _common.toLnglat\n        };\n        _this.map = props.__map__;\n        _this.isCustom = true;\n        setTimeout(function () {\n          _this.createInfoWindow(props);\n        }, 13);\n      }\n    }\n\n    return _this;\n  }\n\n  _createClass(InfoWindow, [{\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (this.map) {\n        this.refreshWindowLayout(nextProps);\n      }\n    }\n  }, {\n    key: 'createInfoWindow',\n    value: function createInfoWindow(props) {\n      var options = this.buildCreateOptions(props);\n      this.infoWindow = new window.AMap.InfoWindow(options);\n      this.props.onInstanceCreated && this.props.onInstanceCreated();\n    }\n  }, {\n    key: 'refreshWindowLayout',\n    value: function refreshWindowLayout(nextProps) {\n      this.setChild(nextProps);\n      this.setClassName(nextProps);\n    }\n  }, {\n    key: 'checkPropChanged',\n    value: function checkPropChanged(key, nextProps) {\n      return this.props[key] !== nextProps[key];\n    }\n  }, {\n    key: 'showWindow',\n    value: function showWindow() {\n      this.infoWindow.open(this.map, this.infoWindow.getPosition());\n    }\n  }, {\n    key: 'closeWindow',\n    value: function closeWindow() {\n      this.infoWindow.close();\n    }\n  }, {\n    key: 'buildCreateOptions',\n    value: function buildCreateOptions(props) {\n      var _this2 = this;\n\n      var options = {}; // 如果开发者没有设置 isCustom 属性，默认设置为 false\n\n      if ('isCustom' in props) {\n        options.isCustom = !!props.isCustom;\n      } else {\n        options.isCustom = false;\n      }\n\n      if ('content' in props) {\n        options.content = props.content;\n      } else {\n        this.infoDOM = document.createElement('div');\n        options.content = this.infoDOM;\n      }\n\n      allProps.forEach(function (key) {\n        if (key in props) {\n          if (['visible', 'isCustom', 'content'].indexOf(key) === -1) {\n            options[key] = _this2.getSetterValue(key, props[key]);\n          }\n        }\n      });\n      return options;\n    }\n  }, {\n    key: 'getSetterValue',\n    value: function getSetterValue(key, value) {\n      if (key in this.converterMap) {\n        return this.converterMap[key](value);\n      }\n\n      return value;\n    }\n  }, {\n    key: 'setChild',\n    value: function setChild(props) {\n      var child = props.children;\n\n      if (this.infoDOM && child) {\n        (0, _reactDom.render)(_react2.default.createElement('div', null, child), this.infoDOM);\n      } else {\n        if (props.children) {\n          console.warn('因为你设置 isCustom 为 true，InfoWindow 的 Children 被忽略');\n        }\n      }\n    }\n  }, {\n    key: 'setClassName',\n    value: function setClassName(props) {\n      if (this.infoDOM) {\n        var baseClsValue = ''; // 刷新 className\n\n        if ('className' in props && props.className) {\n          baseClsValue += props.className;\n        } else if (props.isCustom === true) {\n          baseClsValue += 'amap_markers_pop_window';\n        }\n\n        this.infoDOM.className = baseClsValue;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }, {\n    key: 'instance',\n    get: function get() {\n      return this.infoWindow;\n    }\n  }]);\n\n  return InfoWindow;\n}(Component);\n\nexports.default = (0, _withPropsReactive2.default)(InfoWindow);","map":null,"metadata":{},"sourceType":"script"}