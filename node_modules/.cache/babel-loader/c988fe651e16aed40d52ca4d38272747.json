{"ast":null,"code":"var _jsxFileName = \"/Users/kong/Desktop/urban_react/src/pages/test.jsx\";\n\n/* jshint esversion: 6 */\nimport { MarkerClusterer, useJsApiLoader } from \"@react-google-maps/api\"; // const randomPosition = () => ({\n//     longitude: 53 + Math.random(),\n//     latitude: -6 + Math.random()\n// });\n// const randomMarker = (len) => (\n//     Array(len).fill(true).map((e, idx) => ({\n//         position: randomPosition()\n//     }))\n// );\n//\n//\n//     const [count,setCount] = React.useState({markers: randomMarker(10)});\n//     const randomMarkers=function (){\n//         setCount({markers: randomMarker(10)});\n//     };\n//     const plugins = [\n//         'MapType',\n//         'Scale',\n//         'OverView',\n//         'ControlBar', // v1.1.0 新增\n//         {\n//             name: 'ToolBar',\n//             options: {\n//                 visible: true,  // 不设置该属性默认就是 true\n//                 onCreated(ins){\n//                     console.log(ins);\n//                 },\n//             },\n//         }\n//     ];\n//     return(\n//             <div>\n//             <div style={{width: '100%', height: 372}}>\n//                 <Map plugins={plugins}  zoom={6} center={{longitude: 53,latitude: -6}}>\n//                     <Markers\n//                         markers={count.markers}\n//                     />\n//                 </Map>\n//             </div>\n//             <button onClick={randomMarkers.bind(this)}>Random Markers</button>\n//         </div>\n//         )\n// }\n//\n//\n//\n//\n// // import React, { Component } from 'react';\n// // import { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n// //\n// // import CurrentLocation from './Map';\n// // import {Map} from \"react-amap\";\n// //\n// // export default function Test(){\n// //     const state = {\n// //         showingInfoWindow: false,\n// //         activeMarker: {},\n// //         selectedPlace: {}\n// //     };\n// //\n// //     const onMarkerClick = (props, marker, e) =>\n// //         this.setState({\n// //             selectedPlace: props,\n// //             activeMarker: marker,\n// //             showingInfoWindow: true\n// //         });\n// //\n// //     const onClose = props => {\n// //         if (this.state.showingInfoWindow) {\n// //             this.setState({\n// //                 showingInfoWindow: false,\n// //                 activeMarker: null\n// //             });\n// //         }\n// //     };\n// //\n// //         return (\n// //             <CurrentLocation\n// //                 centerAroundCurrentLocation\n// //                 google={this.props.google}\n// //             ><Map\n// //                 google={this.props.google}\n// //                 zoom={14}\n// //                 initialCenter={{\n// //                     lat: -1.2884,\n// //                     lng: 36.8233\n// //                 }}\n// //             />\n// //\n// //                 <Marker onClick={onMarkerClick} name={'current location'} />\n// //                 <InfoWindow\n// //                     marker={state.activeMarker}\n// //                     visible={state.showingInfoWindow}\n// //                     onClose={onClose}\n// //                 >\n// //                     <div>\n// //                         <h4>{state.selectedPlace.name}</h4>\n// //                     </div>\n// //                 </InfoWindow>\n// //             </CurrentLocation>\n// //         );\n// //   }\n// //\n//Create a new map\n\nimport React from 'react';\nimport { Map, InfoWindow, Marker } from 'google-maps-react';\nexport default function test() {\n  var _this = this;\n\n  var state = {\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {}\n  };\n\n  var onMarkerClick = function onMarkerClick(props, marker, e) {\n    return _this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n  };\n\n  var onMapClicked = function onMapClicked(props) {\n    if (_this.state.showingInfoWindow) {\n      _this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n  var _useJsApiLoader = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c\"\n  }),\n      isLoaded = _useJsApiLoader.isLoaded;\n\n  return isLoaded ? /*#__PURE__*/React.createElement(Map, {\n    google: this.props.google,\n    initialCenter: {\n      lat: 39.9060115,\n      lng: 116.3956187\n    },\n    zoom: 16.75,\n    onClick: onMapClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    onClick: onMarkerClick,\n    name: 'descripton',\n    position: {\n      lat: 39.9055688,\n      lng: 116.39749\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(InfoWindow, {\n    marker: state.activeMarker,\n    visible: state.showingInfoWindow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 25\n    }\n  }, state.selectedPlace.name)))) : /*#__PURE__*/React.createElement(React.Fragment, null);\n}","map":{"version":3,"sources":["/Users/kong/Desktop/urban_react/src/pages/test.jsx"],"names":["MarkerClusterer","useJsApiLoader","React","Map","InfoWindow","Marker","test","state","showingInfoWindow","activeMarker","selectedPlace","onMarkerClick","props","marker","e","setState","onMapClicked","id","googleMapsApiKey","isLoaded","google","lat","lng","name"],"mappings":";;AAAA;AACA,SAAQA,eAAR,EAAyBC,cAAzB,QAA8C,wkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,UAAb,EAAyBC,MAAzB,QAAsC,mBAAtC;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,MAAMC,KAAK,GAAG;AACVC,IAAAA,iBAAiB,EAAE,KADT;AAEVC,IAAAA,YAAY,EAAE,EAFJ;AAGVC,IAAAA,aAAa,EAAE;AAHL,GAAd;;AAMA,MAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,MAAR,EAAgBC,CAAhB;AAAA,WAClB,KAAI,CAACC,QAAL,CAAc;AACVL,MAAAA,aAAa,EAAEE,KADL;AAEVH,MAAAA,YAAY,EAAEI,MAFJ;AAGVL,MAAAA,iBAAiB,EAAE;AAHT,KAAd,CADkB;AAAA,GAAtB;;AAOA,MAAMQ,YAAY,GAAG,SAAfA,YAAe,CAACJ,KAAD,EAAW;AAC5B,QAAI,KAAI,CAACL,KAAL,CAAWC,iBAAf,EAAkC;AAC9B,MAAA,KAAI,CAACO,QAAL,CAAc;AACVP,QAAAA,iBAAiB,EAAE,KADT;AAEVC,QAAAA,YAAY,EAAE;AAFJ,OAAd;AAIH;AACJ,GAPD;;AAd2B,wBAsBRR,cAAc,CAAC;AAC9BgB,IAAAA,EAAE,EAAE,mBAD0B;AAE9BC,IAAAA,gBAAgB,EAAE;AAFY,GAAD,CAtBN;AAAA,MAsBpBC,QAtBoB,mBAsBpBA,QAtBoB;;AA0B3B,SAAOA,QAAQ,gBACX,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,KAAKP,KAAL,CAAWQ,MAAxB;AACK,IAAA,aAAa,EAAE;AACXC,MAAAA,GAAG,EAAE,UADM;AAEXC,MAAAA,GAAG,EAAE;AAFM,KADpB;AAKK,IAAA,IAAI,EAAE,KALX;AAMK,IAAA,OAAO,EAAEN,YANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEL,aAAjB;AACQ,IAAA,IAAI,EAAE,YADd;AAEQ,IAAA,QAAQ,EAAE;AAACU,MAAAA,GAAG,EAAE,UAAN;AAAkBC,MAAAA,GAAG,EAAE;AAAvB,KAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,eAWI,oBAAC,UAAD;AACI,IAAA,MAAM,EAAEf,KAAK,CAACE,YADlB;AAEI,IAAA,OAAO,EAAEF,KAAK,CAACC,iBAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKD,KAAK,CAACG,aAAN,CAAoBa,IAAzB,CADJ,CAHJ,CAXJ,CADW,gBAoBZ,yCApBH;AAqBH","sourcesContent":["/* jshint esversion: 6 */\nimport {MarkerClusterer, useJsApiLoader} from \"@react-google-maps/api\";\n// const randomPosition = () => ({\n//     longitude: 53 + Math.random(),\n//     latitude: -6 + Math.random()\n// });\n// const randomMarker = (len) => (\n//     Array(len).fill(true).map((e, idx) => ({\n//         position: randomPosition()\n//     }))\n// );\n//\n\n//\n//     const [count,setCount] = React.useState({markers: randomMarker(10)});\n//     const randomMarkers=function (){\n//         setCount({markers: randomMarker(10)});\n//     };\n//     const plugins = [\n//         'MapType',\n//         'Scale',\n//         'OverView',\n//         'ControlBar', // v1.1.0 新增\n//         {\n//             name: 'ToolBar',\n//             options: {\n//                 visible: true,  // 不设置该属性默认就是 true\n//                 onCreated(ins){\n//                     console.log(ins);\n//                 },\n//             },\n//         }\n//     ];\n//     return(\n//             <div>\n//             <div style={{width: '100%', height: 372}}>\n//                 <Map plugins={plugins}  zoom={6} center={{longitude: 53,latitude: -6}}>\n//                     <Markers\n//                         markers={count.markers}\n//                     />\n//                 </Map>\n//             </div>\n//             <button onClick={randomMarkers.bind(this)}>Random Markers</button>\n//         </div>\n//         )\n// }\n//\n//\n//\n//\n// // import React, { Component } from 'react';\n// // import { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n// //\n// // import CurrentLocation from './Map';\n// // import {Map} from \"react-amap\";\n// //\n// // export default function Test(){\n// //     const state = {\n// //         showingInfoWindow: false,\n// //         activeMarker: {},\n// //         selectedPlace: {}\n// //     };\n// //\n// //     const onMarkerClick = (props, marker, e) =>\n// //         this.setState({\n// //             selectedPlace: props,\n// //             activeMarker: marker,\n// //             showingInfoWindow: true\n// //         });\n// //\n// //     const onClose = props => {\n// //         if (this.state.showingInfoWindow) {\n// //             this.setState({\n// //                 showingInfoWindow: false,\n// //                 activeMarker: null\n// //             });\n// //         }\n// //     };\n// //\n// //         return (\n// //             <CurrentLocation\n// //                 centerAroundCurrentLocation\n// //                 google={this.props.google}\n// //             ><Map\n// //                 google={this.props.google}\n// //                 zoom={14}\n// //                 initialCenter={{\n// //                     lat: -1.2884,\n// //                     lng: 36.8233\n// //                 }}\n// //             />\n// //\n// //                 <Marker onClick={onMarkerClick} name={'current location'} />\n// //                 <InfoWindow\n// //                     marker={state.activeMarker}\n// //                     visible={state.showingInfoWindow}\n// //                     onClose={onClose}\n// //                 >\n// //                     <div>\n// //                         <h4>{state.selectedPlace.name}</h4>\n// //                     </div>\n// //                 </InfoWindow>\n// //             </CurrentLocation>\n// //         );\n// //   }\n// //\n\n\n//Create a new map\n    import React from 'react';\n    import {Map, InfoWindow, Marker} from 'google-maps-react';\n\n    export default function test() {\n        const state = {\n            showingInfoWindow: false,\n            activeMarker: {},\n            selectedPlace: {},\n        };\n\n        const onMarkerClick = (props, marker, e) =>\n            this.setState({\n                selectedPlace: props,\n                activeMarker: marker,\n                showingInfoWindow: true\n            });\n\n        const onMapClicked = (props) => {\n            if (this.state.showingInfoWindow) {\n                this.setState({\n                    showingInfoWindow: false,\n                    activeMarker: null\n                });\n            }\n        };\n        const {isLoaded} = useJsApiLoader({\n            id: 'google-map-script',\n            googleMapsApiKey: \"AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c\"\n        });\n        return isLoaded ? (\n            <Map google={this.props.google}\n                 initialCenter={{\n                     lat: 39.9060115,\n                     lng: 116.3956187\n                 }}\n                 zoom={16.75}\n                 onClick={onMapClicked}>\n                <Marker onClick={onMarkerClick}\n                        name={'descripton'}\n                        position={{lat: 39.9055688, lng: 116.39749}}/>\n\n                <InfoWindow\n                    marker={state.activeMarker}\n                    visible={state.showingInfoWindow}>\n                    <div>\n                        <h3>{state.selectedPlace.name}</h3>\n                    </div>\n                </InfoWindow>\n            </Map>\n        ): <></>\n    }\n\n"]},"metadata":{},"sourceType":"module"}