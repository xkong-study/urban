{"ast":null,"code":"import _get from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _construct from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/construct\";\nimport _slicedToArray from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _possibleConstructorReturn from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _toConsumableArray from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e17) { throw _e17; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e18) { didErr = true; err = _e18; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { _registerComponent, registerVersion, _getProvider, getApp, _removeServiceInstance, SDK_VERSION } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { FirebaseError, getDefaultEmulatorHostnameAndPort, createMockUserToken, getModularInstance, deepEqual } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\n\nvar d = /*#__PURE__*/function () {\n  function d(t) {\n    _classCallCheck(this, d);\n\n    this.uid = t;\n  }\n\n  _createClass(d, [{\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      return null != this.uid;\n    }\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */\n\n  }, {\n    key: \"toKey\",\n    value: function toKey() {\n      return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return t.uid === this.uid;\n    }\n  }]);\n\n  return d;\n}();\n/** A user with a null UID. */\n\n\nd.UNAUTHENTICATED = new d(null), // TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nd.GOOGLE_CREDENTIALS = new d(\"google-credentials-uid\"), d.FIRST_PARTY = new d(\"first-party-uid\"), d.MOCK_USER = new d(\"mock-user\");\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar w = \"9.14.0\";\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar m = new Logger(\"@firebase/firestore\");\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */\n\nfunction p(t) {\n  m.setLogLevel(t);\n}\n\nfunction y(t) {\n  if (m.logLevel <= LogLevel.DEBUG) {\n    for (var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      e[_key - 1] = arguments[_key];\n    }\n\n    var n = e.map(v);\n    m.debug.apply(m, [\"Firestore (\".concat(w, \"): \").concat(t)].concat(_toConsumableArray(n)));\n  }\n}\n\nfunction _(t) {\n  if (m.logLevel <= LogLevel.ERROR) {\n    for (var _len2 = arguments.length, e = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      e[_key2 - 1] = arguments[_key2];\n    }\n\n    var n = e.map(v);\n    m.error.apply(m, [\"Firestore (\".concat(w, \"): \").concat(t)].concat(_toConsumableArray(n)));\n  }\n}\n/**\n * @internal\n */\n\n\nfunction g(t) {\n  if (m.logLevel <= LogLevel.WARN) {\n    for (var _len3 = arguments.length, e = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      e[_key3 - 1] = arguments[_key3];\n    }\n\n    var n = e.map(v);\n    m.warn.apply(m, [\"Firestore (\".concat(w, \"): \").concat(t)].concat(_toConsumableArray(n)));\n  }\n}\n/**\n * Converts an additional log parameter to a string representation.\n */\n\n\nfunction v(t) {\n  if (\"string\" == typeof t) return t;\n\n  try {\n    return e = t, JSON.stringify(e);\n  } catch (e) {\n    // Converting to JSON failed, just log the object directly\n    return t;\n  }\n  /**\n  * @license\n  * Copyright 2020 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n\n  /** Formats an object as a JSON string, suitable for logging. */\n\n\n  var e;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */\n\n\nfunction b() {\n  var t = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected state\";\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  var e = \"FIRESTORE (\".concat(w, \") INTERNAL ASSERTION FAILED: \") + t; // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n\n  throw _(e), new Error(e);\n}\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */\n\n\nfunction E(t, e) {\n  t || b();\n}\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */\n\n\nfunction I(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n  return t;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar T = \"ok\",\n    A = \"cancelled\",\n    R = \"unknown\",\n    P = \"invalid-argument\",\n    V = \"deadline-exceeded\",\n    N = \"not-found\",\n    $ = \"already-exists\",\n    D = \"permission-denied\",\n    x = \"unauthenticated\",\n    F = \"resource-exhausted\",\n    S = \"failed-precondition\",\n    q = \"aborted\",\n    O = \"out-of-range\",\n    k = \"unimplemented\",\n    C = \"internal\",\n    L = \"unavailable\",\n    M = \"data-loss\";\n/** An error returned by a Firestore operation. */\n\nvar U = /*#__PURE__*/function (_FirebaseError) {\n  _inherits(U, _FirebaseError);\n\n  /** @hideconstructor */\n  function U(\n  /**\n   * The backend error code associated with this error.\n   */\n  t,\n  /**\n   * A custom error description.\n   */\n  e) {\n    var _this;\n\n    _classCallCheck(this, U);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(U).call(this, t, e)), _this.code = t, _this.message = e, // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    _this.toString = function () {\n      return \"\".concat(_this.name, \": [code=\").concat(_this.code, \"]: \").concat(_this.message);\n    };\n    return _this;\n  }\n\n  return U;\n}(FirebaseError);\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar j = function j() {\n  var _this2 = this;\n\n  _classCallCheck(this, j);\n\n  this.promise = new Promise(function (t, e) {\n    _this2.resolve = t, _this2.reject = e;\n  });\n};\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar B = function B(t, e) {\n  _classCallCheck(this, B);\n\n  this.user = e, this.type = \"OAuth\", this.headers = new Map(), this.headers.set(\"Authorization\", \"Bearer \".concat(t));\n};\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */\n\n\nvar Q = /*#__PURE__*/function () {\n  function Q() {\n    _classCallCheck(this, Q);\n  }\n\n  _createClass(Q, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return Promise.resolve(null);\n    }\n  }, {\n    key: \"invalidateToken\",\n    value: function invalidateToken() {}\n  }, {\n    key: \"start\",\n    value: function start(t, e) {\n      // Fire with initial user.\n      t.enqueueRetryable(function () {\n        return e(d.UNAUTHENTICATED);\n      });\n    }\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {}\n  }]);\n\n  return Q;\n}();\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */\n\n\nvar z = /*#__PURE__*/function () {\n  function z(t) {\n    _classCallCheck(this, z);\n\n    this.token = t,\n    /**\n     * Stores the listener registered with setChangeListener()\n     * This isn't actually necessary since the UID never changes, but we use this\n     * to verify the listen contract is adhered to in tests.\n     */\n    this.changeListener = null;\n  }\n\n  _createClass(z, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return Promise.resolve(this.token);\n    }\n  }, {\n    key: \"invalidateToken\",\n    value: function invalidateToken() {}\n  }, {\n    key: \"start\",\n    value: function start(t, e) {\n      var _this3 = this;\n\n      this.changeListener = e, // Fire with initial user.\n      t.enqueueRetryable(function () {\n        return e(_this3.token.user);\n      });\n    }\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {\n      this.changeListener = null;\n    }\n  }]);\n\n  return z;\n}();\n/** Credential provider for the Lite SDK. */\n\n\nvar G = /*#__PURE__*/function () {\n  function G(t) {\n    var _this4 = this;\n\n    _classCallCheck(this, G);\n\n    this.auth = null, t.onInit(function (t) {\n      _this4.auth = t;\n    });\n  }\n\n  _createClass(G, [{\n    key: \"getToken\",\n    value: function getToken() {\n      var _this5 = this;\n\n      return this.auth ? this.auth.getToken().then(function (t) {\n        return t ? (E(\"string\" == typeof t.accessToken), new B(t.accessToken, new d(_this5.auth.getUid()))) : null;\n      }) : Promise.resolve(null);\n    }\n  }, {\n    key: \"invalidateToken\",\n    value: function invalidateToken() {}\n  }, {\n    key: \"start\",\n    value: function start(t, e) {}\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {}\n  }]);\n\n  return G;\n}();\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */\n\n\nvar W = /*#__PURE__*/function () {\n  function W(t, e, n, r) {\n    _classCallCheck(this, W);\n\n    this.t = t, this.i = e, this.o = n, this.u = r, this.type = \"FirstParty\", this.user = d.FIRST_PARTY, this.h = new Map();\n  }\n  /** Gets an authorization token, using a provided factory function, or falling back to First Party GAPI. */\n\n\n  _createClass(W, [{\n    key: \"l\",\n    value: function l() {\n      return this.u ? this.u() : ( // Make sure this really is a Gapi client.\n      E(!(\"object\" != typeof this.t || null === this.t || !this.t.auth || !this.t.auth.getAuthHeaderValueForFirstParty)), this.t.auth.getAuthHeaderValueForFirstParty([]));\n    }\n  }, {\n    key: \"headers\",\n    get: function get() {\n      this.h.set(\"X-Goog-AuthUser\", this.i); // Use array notation to prevent minification\n\n      var t = this.l();\n      return t && this.h.set(\"Authorization\", t), this.o && this.h.set(\"X-Goog-Iam-Authorization-Token\", this.o), this.h;\n    }\n  }]);\n\n  return W;\n}();\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */\n\n\nvar K = /*#__PURE__*/function () {\n  function K(t, e, n, r) {\n    _classCallCheck(this, K);\n\n    this.t = t, this.i = e, this.o = n, this.u = r;\n  }\n\n  _createClass(K, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return Promise.resolve(new W(this.t, this.i, this.o, this.u));\n    }\n  }, {\n    key: \"start\",\n    value: function start(t, e) {\n      // Fire with initial uid.\n      t.enqueueRetryable(function () {\n        return e(d.FIRST_PARTY);\n      });\n    }\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {}\n  }, {\n    key: \"invalidateToken\",\n    value: function invalidateToken() {}\n  }]);\n\n  return K;\n}();\n\nvar Y = function Y(t) {\n  _classCallCheck(this, Y);\n\n  this.value = t, this.type = \"AppCheck\", this.headers = new Map(), t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n};\n/** AppCheck token provider for the Lite SDK. */\n\n\nvar H = /*#__PURE__*/function () {\n  function H(t) {\n    var _this6 = this;\n\n    _classCallCheck(this, H);\n\n    this.m = t, this.appCheck = null, t.onInit(function (t) {\n      _this6.appCheck = t;\n    });\n  }\n\n  _createClass(H, [{\n    key: \"getToken\",\n    value: function getToken() {\n      return this.appCheck ? this.appCheck.getToken().then(function (t) {\n        return t ? (E(\"string\" == typeof t.token), new Y(t.token)) : null;\n      }) : Promise.resolve(null);\n    }\n  }, {\n    key: \"invalidateToken\",\n    value: function invalidateToken() {}\n  }, {\n    key: \"start\",\n    value: function start(t, e) {}\n  }, {\n    key: \"shutdown\",\n    value: function shutdown() {}\n  }]);\n\n  return H;\n}();\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar J =\n/**\n * Constructs a DatabaseInfo using the provided host, databaseId and\n * persistenceKey.\n *\n * @param databaseId - The database to use.\n * @param appId - The Firebase App Id.\n * @param persistenceKey - A unique identifier for this Firestore's local\n * storage (used in conjunction with the databaseId).\n * @param host - The Firestore backend host to connect to.\n * @param ssl - Whether to use SSL when connecting.\n * @param forceLongPolling - Whether to use the forceLongPolling option\n * when using WebChannel as the network transport.\n * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n * option when using WebChannel as the network transport.\n * @param useFetchStreams Whether to use the Fetch API instead of\n * XMLHTTPRequest\n */\nfunction J(t, e, n, r, s, i, o, u) {\n  _classCallCheck(this, J);\n\n  this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = s, this.forceLongPolling = i, this.autoDetectLongPolling = o, this.useFetchStreams = u;\n};\n/** The default database name for a project. */\n\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\n\n\nvar X = /*#__PURE__*/function () {\n  function X(t, e) {\n    _classCallCheck(this, X);\n\n    this.projectId = t, this.database = e || \"(default)\";\n  }\n\n  _createClass(X, [{\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return t instanceof X && t.projectId === this.projectId && t.database === this.database;\n    }\n  }, {\n    key: \"isDefaultDatabase\",\n    get: function get() {\n      return \"(default)\" === this.database;\n    }\n  }], [{\n    key: \"empty\",\n    value: function empty() {\n      return new X(\"\", \"\");\n    }\n  }]);\n\n  return X;\n}();\n/**\n * Path represents an ordered sequence of string segments.\n */\n\n\nvar Z = /*#__PURE__*/function () {\n  function Z(t, e, n) {\n    _classCallCheck(this, Z);\n\n    void 0 === e ? e = 0 : e > t.length && b(), void 0 === n ? n = t.length - e : n > t.length - e && b(), this.segments = t, this.offset = e, this.len = n;\n  }\n\n  _createClass(Z, [{\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return 0 === Z.comparator(this, t);\n    }\n  }, {\n    key: \"child\",\n    value: function child(t) {\n      var e = this.segments.slice(this.offset, this.limit());\n      return t instanceof Z ? t.forEach(function (t) {\n        e.push(t);\n      }) : e.push(t), this.construct(e);\n    }\n    /** The index of one past the last segment of the path. */\n\n  }, {\n    key: \"limit\",\n    value: function limit() {\n      return this.offset + this.length;\n    }\n  }, {\n    key: \"popFirst\",\n    value: function popFirst(t) {\n      return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n    }\n  }, {\n    key: \"popLast\",\n    value: function popLast() {\n      return this.construct(this.segments, this.offset, this.length - 1);\n    }\n  }, {\n    key: \"firstSegment\",\n    value: function firstSegment() {\n      return this.segments[this.offset];\n    }\n  }, {\n    key: \"lastSegment\",\n    value: function lastSegment() {\n      return this.get(this.length - 1);\n    }\n  }, {\n    key: \"get\",\n    value: function get(t) {\n      return this.segments[this.offset + t];\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return 0 === this.length;\n    }\n  }, {\n    key: \"isPrefixOf\",\n    value: function isPrefixOf(t) {\n      if (t.length < this.length) return !1;\n\n      for (var e = 0; e < this.length; e++) {\n        if (this.get(e) !== t.get(e)) return !1;\n      }\n\n      return !0;\n    }\n  }, {\n    key: \"isImmediateParentOf\",\n    value: function isImmediateParentOf(t) {\n      if (this.length + 1 !== t.length) return !1;\n\n      for (var e = 0; e < this.length; e++) {\n        if (this.get(e) !== t.get(e)) return !1;\n      }\n\n      return !0;\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(t) {\n      for (var e = this.offset, n = this.limit(); e < n; e++) {\n        t(this.segments[e]);\n      }\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.segments.slice(this.offset, this.limit());\n    }\n  }, {\n    key: \"length\",\n    get: function get() {\n      return this.len;\n    }\n  }], [{\n    key: \"comparator\",\n    value: function comparator(t, e) {\n      var n = Math.min(t.length, e.length);\n\n      for (var r = 0; r < n; r++) {\n        var _n2 = t.get(r),\n            s = e.get(r);\n\n        if (_n2 < s) return -1;\n        if (_n2 > s) return 1;\n      }\n\n      return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n    }\n  }]);\n\n  return Z;\n}();\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */\n\n\nvar tt = /*#__PURE__*/function (_Z) {\n  _inherits(tt, _Z);\n\n  function tt() {\n    _classCallCheck(this, tt);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(tt).apply(this, arguments));\n  }\n\n  _createClass(tt, [{\n    key: \"construct\",\n    value: function construct(t, e, n) {\n      return new tt(t, e, n);\n    }\n  }, {\n    key: \"canonicalString\",\n    value: function canonicalString() {\n      // NOTE: The client is ignorant of any path segments containing escape\n      // sequences (e.g. __id123__) and just passes them through raw (they exist\n      // for legacy reasons and should not be used frequently).\n      return this.toArray().join(\"/\");\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.canonicalString();\n    }\n    /**\n     * Creates a resource path from the given slash-delimited string. If multiple\n     * arguments are provided, all components are combined. Leading and trailing\n     * slashes from all components are ignored.\n     */\n\n  }], [{\n    key: \"fromString\",\n    value: function fromString() {\n      // NOTE: The client is ignorant of any path segments containing escape\n      // sequences (e.g. __id123__) and just passes them through raw (they exist\n      // for legacy reasons and should not be used frequently).\n      var e = [];\n\n      for (var _len4 = arguments.length, t = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        t[_key4] = arguments[_key4];\n      }\n\n      for (var _i = 0, _t2 = t; _i < _t2.length; _i++) {\n        var n = _t2[_i];\n        if (n.indexOf(\"//\") >= 0) throw new U(P, \"Invalid segment (\".concat(n, \"). Paths must not contain // in them.\")); // Strip leading and traling slashed.\n\n        e.push.apply(e, _toConsumableArray(n.split(\"/\").filter(function (t) {\n          return t.length > 0;\n        })));\n      }\n\n      return new tt(e);\n    }\n  }, {\n    key: \"emptyPath\",\n    value: function emptyPath() {\n      return new tt([]);\n    }\n  }]);\n\n  return tt;\n}(Z);\n\nvar et = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */\n\nvar nt = /*#__PURE__*/function (_Z2) {\n  _inherits(nt, _Z2);\n\n  function nt() {\n    _classCallCheck(this, nt);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(nt).apply(this, arguments));\n  }\n\n  _createClass(nt, [{\n    key: \"construct\",\n    value: function construct(t, e, n) {\n      return new nt(t, e, n);\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */\n\n  }, {\n    key: \"canonicalString\",\n    value: function canonicalString() {\n      return this.toArray().map(function (t) {\n        return t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), nt.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t;\n      }).join(\".\");\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.canonicalString();\n    }\n    /**\n     * Returns true if this field references the key of a document.\n     */\n\n  }, {\n    key: \"isKeyField\",\n    value: function isKeyField() {\n      return 1 === this.length && \"__name__\" === this.get(0);\n    }\n    /**\n     * The field designating the key of a document.\n     */\n\n  }], [{\n    key: \"isValidIdentifier\",\n    value: function isValidIdentifier(t) {\n      return et.test(t);\n    }\n  }, {\n    key: \"keyField\",\n    value: function keyField() {\n      return new nt([\"__name__\"]);\n    }\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */\n\n  }, {\n    key: \"fromServerFormat\",\n    value: function fromServerFormat(t) {\n      var e = [];\n      var n = \"\",\n          r = 0;\n\n      var s = function s() {\n        if (0 === n.length) throw new U(P, \"Invalid field path (\".concat(t, \"). Paths must not be empty, begin with '.', end with '.', or contain '..'\"));\n        e.push(n), n = \"\";\n      };\n\n      var i = !1;\n\n      for (; r < t.length;) {\n        var _e2 = t[r];\n\n        if (\"\\\\\" === _e2) {\n          if (r + 1 === t.length) throw new U(P, \"Path has trailing escape character: \" + t);\n          var _e3 = t[r + 1];\n          if (\"\\\\\" !== _e3 && \".\" !== _e3 && \"`\" !== _e3) throw new U(P, \"Path has invalid escape sequence: \" + t);\n          n += _e3, r += 2;\n        } else \"`\" === _e2 ? (i = !i, r++) : \".\" !== _e2 || i ? (n += _e2, r++) : (s(), r++);\n      }\n\n      if (s(), i) throw new U(P, \"Unterminated ` in path: \" + t);\n      return new nt(e);\n    }\n  }, {\n    key: \"emptyPath\",\n    value: function emptyPath() {\n      return new nt([]);\n    }\n  }]);\n\n  return nt;\n}(Z);\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @internal\n */\n\n\nvar rt = /*#__PURE__*/function () {\n  function rt(t) {\n    _classCallCheck(this, rt);\n\n    this.path = t;\n  }\n\n  _createClass(rt, [{\n    key: \"hasCollectionId\",\n\n    /** Returns true if the document is in the specified collectionId. */\n    value: function hasCollectionId(t) {\n      return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n    }\n    /** Returns the collection group (i.e. the name of the parent collection) for this key. */\n\n  }, {\n    key: \"getCollectionGroup\",\n    value: function getCollectionGroup() {\n      return this.path.get(this.path.length - 2);\n    }\n    /** Returns the fully qualified path to the parent collection. */\n\n  }, {\n    key: \"getCollectionPath\",\n    value: function getCollectionPath() {\n      return this.path.popLast();\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return null !== t && 0 === tt.comparator(this.path, t.path);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.path.toString();\n    }\n  }, {\n    key: \"collectionGroup\",\n    get: function get() {\n      return this.path.popLast().lastSegment();\n    }\n  }], [{\n    key: \"fromPath\",\n    value: function fromPath(t) {\n      return new rt(tt.fromString(t));\n    }\n  }, {\n    key: \"fromName\",\n    value: function fromName(t) {\n      return new rt(tt.fromString(t).popFirst(5));\n    }\n  }, {\n    key: \"empty\",\n    value: function empty() {\n      return new rt(tt.emptyPath());\n    }\n  }, {\n    key: \"comparator\",\n    value: function comparator(t, e) {\n      return tt.comparator(t.path, e.path);\n    }\n  }, {\n    key: \"isDocumentKey\",\n    value: function isDocumentKey(t) {\n      return t.length % 2 == 0;\n    }\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param segments - The segments of the path to the document\n     * @returns A new instance of DocumentKey\n     */\n\n  }, {\n    key: \"fromSegments\",\n    value: function fromSegments(t) {\n      return new rt(new tt(t.slice()));\n    }\n  }]);\n\n  return rt;\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction st(t, e, n) {\n  if (!n) throw new U(P, \"Function \".concat(t, \"() cannot be called with an empty \").concat(e, \".\"));\n}\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\n\n\nfunction it(t) {\n  if (!rt.isDocumentKey(t)) throw new U(P, \"Invalid document reference. Document references must have an even number of segments, but \".concat(t, \" has \").concat(t.length, \".\"));\n}\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */\n\n\nfunction ot(t) {\n  if (rt.isDocumentKey(t)) throw new U(P, \"Invalid collection reference. Collection references must have an odd number of segments, but \".concat(t, \" has \").concat(t.length, \".\"));\n}\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n\n/** Returns a string describing the type / value of the provided input. */\n\n\nfunction ut(t) {\n  if (void 0 === t) return \"undefined\";\n  if (null === t) return \"null\";\n  if (\"string\" == typeof t) return t.length > 20 && (t = \"\".concat(t.substring(0, 20), \"...\")), JSON.stringify(t);\n  if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n\n  if (\"object\" == typeof t) {\n    if (t instanceof Array) return \"an array\";\n    {\n      var e =\n      /** try to get the constructor name for an object. */\n      function (t) {\n        if (t.constructor) return t.constructor.name;\n        return null;\n      }\n      /**\n      * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n      * underlying instance. Throws if  `obj` is not an instance of `T`.\n      *\n      * This cast is used in the Lite and Full SDK to verify instance types for\n      * arguments passed to the public API.\n      * @internal\n      */\n      (t);\n\n      return e ? \"a custom \".concat(e, \" object\") : \"an object\";\n    }\n  }\n\n  return \"function\" == typeof t ? \"a function\" : b();\n}\n\nfunction ct(t, // eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n  if (\"_delegate\" in t && ( // Unwrap Compat types\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  t = t._delegate), !(t instanceof e)) {\n    if (e.name === t.constructor.name) throw new U(P, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n    {\n      var n = ut(t);\n      throw new U(P, \"Expected type '\".concat(e.name, \"', but it was: \").concat(n));\n    }\n  }\n\n  return t;\n}\n\nfunction at(t, e) {\n  if (e <= 0) throw new U(P, \"Function \".concat(t, \"() requires a positive number, but it was: \").concat(e, \".\"));\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns whether a variable is either undefined or null.\n */\n\n\nfunction ht(t) {\n  return null == t;\n}\n/** Returns whether the value represents -0. */\n\n\nfunction lt(t) {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return 0 === t && 1 / t == -1 / 0;\n}\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar ft = {\n  BatchGetDocuments: \"batchGet\",\n  Commit: \"commit\",\n  RunQuery: \"runQuery\",\n  RunAggregationQuery: \"runAggregationQuery\"\n};\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\n\nvar dt, wt;\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\n\nfunction mt(t) {\n  if (void 0 === t) return _(\"RPC_ERROR\", \"HTTP error has no status\"), R; // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n  // status codes but the mapping is not bijective. In each case of ambiguity\n  // this function chooses a primary error.\n  // [1]\n  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n\n  switch (t) {\n    case 200:\n      // OK\n      return T;\n\n    case 400:\n      // Bad Request\n      return S;\n    // Other possibilities based on the forward mapping\n    // return Code.INVALID_ARGUMENT;\n    // return Code.OUT_OF_RANGE;\n\n    case 401:\n      // Unauthorized\n      return x;\n\n    case 403:\n      // Forbidden\n      return D;\n\n    case 404:\n      // Not Found\n      return N;\n\n    case 409:\n      // Conflict\n      return q;\n    // Other possibilities:\n    // return Code.ALREADY_EXISTS;\n\n    case 416:\n      // Range Not Satisfiable\n      return O;\n\n    case 429:\n      // Too Many Requests\n      return F;\n\n    case 499:\n      // Client Closed Request\n      return A;\n\n    case 500:\n      // Internal Server Error\n      return R;\n    // Other possibilities:\n    // return Code.INTERNAL;\n    // return Code.DATA_LOSS;\n\n    case 501:\n      // Unimplemented\n      return k;\n\n    case 503:\n      // Service Unavailable\n      return L;\n\n    case 504:\n      // Gateway Timeout\n      return V;\n\n    default:\n      return t >= 200 && t < 300 ? T : t >= 400 && t < 500 ? S : t >= 500 && t < 600 ? C : R;\n  }\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */\n\n\n(wt = dt || (dt = {}))[wt.OK = 0] = \"OK\", wt[wt.CANCELLED = 1] = \"CANCELLED\", wt[wt.UNKNOWN = 2] = \"UNKNOWN\", wt[wt.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", wt[wt.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", wt[wt.NOT_FOUND = 5] = \"NOT_FOUND\", wt[wt.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", wt[wt.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", wt[wt.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", wt[wt.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", wt[wt.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", wt[wt.ABORTED = 10] = \"ABORTED\", wt[wt.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", wt[wt.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", wt[wt.INTERNAL = 13] = \"INTERNAL\", wt[wt.UNAVAILABLE = 14] = \"UNAVAILABLE\", wt[wt.DATA_LOSS = 15] = \"DATA_LOSS\";\n\nvar pt = /*#__PURE__*/function (_ref) {\n  _inherits(pt, _ref);\n\n  /**\n   * @param databaseInfo - The connection info.\n   * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n   */\n  function pt(t, e) {\n    var _this7;\n\n    _classCallCheck(this, pt);\n\n    _this7 = _possibleConstructorReturn(this, _getPrototypeOf(pt).call(this, t)), _this7.V = e;\n    return _this7;\n  }\n\n  _createClass(pt, [{\n    key: \"N\",\n    value: function N(t, e) {\n      throw new Error(\"Not supported by FetchConnection\");\n    }\n  }, {\n    key: \"R\",\n    value: function () {\n      var _R = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(t, e, n, r) {\n        var s, i, o, _t3, _e4;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                i = JSON.stringify(r);\n                _context.prev = 1;\n                _context.next = 4;\n                return this.V(e, {\n                  method: \"POST\",\n                  headers: n,\n                  body: i\n                });\n\n              case 4:\n                o = _context.sent;\n                _context.next = 10;\n                break;\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](1);\n                throw new U(mt(_context.t0.status), \"Request failed with error: \" + _context.t0.statusText);\n\n              case 10:\n                if (o.ok) {\n                  _context.next = 17;\n                  break;\n                }\n\n                _context.next = 13;\n                return o.json();\n\n              case 13:\n                _t3 = _context.sent;\n                Array.isArray(_t3) && (_t3 = _t3[0]);\n                _e4 = null === (s = null == _t3 ? void 0 : _t3.error) || void 0 === s ? void 0 : s.message;\n                throw new U(mt(o.status), \"Request failed with error: \".concat(null != _e4 ? _e4 : o.statusText));\n\n              case 17:\n                return _context.abrupt(\"return\", o.json());\n\n              case 18:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 7]]);\n      }));\n\n      function R(_x, _x2, _x3, _x4) {\n        return _R.apply(this, arguments);\n      }\n\n      return R;\n    }()\n  }]);\n\n  return pt;\n}(\n/*#__PURE__*/\n\n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nfunction () {\n  function _class(t) {\n    _classCallCheck(this, _class);\n\n    this.databaseInfo = t, this.databaseId = t.databaseId;\n    var e = t.ssl ? \"https\" : \"http\";\n    this.p = e + \"://\" + t.host, this.g = \"projects/\" + this.databaseId.projectId + \"/databases/\" + this.databaseId.database + \"/documents\";\n  }\n\n  _createClass(_class, [{\n    key: \"I\",\n    value: function I(t, e, n, r, s) {\n      var i = this.T(t, e);\n      y(\"RestConnection\", \"Sending: \", i, n);\n      var o = {};\n      return this.A(o, r, s), this.R(t, i, o, n).then(function (t) {\n        return y(\"RestConnection\", \"Received: \", t), t;\n      }, function (e) {\n        throw g(\"RestConnection\", \"\".concat(t, \" failed with error: \"), e, \"url: \", i, \"request:\", n), e;\n      });\n    }\n  }, {\n    key: \"P\",\n    value: function P(t, e, n, r, s, i) {\n      // The REST API automatically aggregates all of the streamed results, so we\n      // can just use the normal invoke() method.\n      return this.I(t, e, n, r, s);\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n\n  }, {\n    key: \"A\",\n\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */\n    value: function A(t, e, n) {\n      t[\"X-Goog-Api-Client\"] = \"gl-js/ fire/\" + w, // Content-Type: text/plain will avoid preflight requests which might\n      // mess with CORS and redirects by proxies. If we add custom headers\n      // we will need to change this code to potentially use the $httpOverwrite\n      // parameter supported by ESF to avoid triggering preflight requests.\n      t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), e && e.headers.forEach(function (e, n) {\n        return t[n] = e;\n      }), n && n.headers.forEach(function (e, n) {\n        return t[n] = e;\n      });\n    }\n  }, {\n    key: \"T\",\n    value: function T(t, e) {\n      var n = ft[t];\n      return \"\".concat(this.p, \"/v1/\").concat(e, \":\").concat(n);\n    }\n  }, {\n    key: \"v\",\n    get: function get() {\n      // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine\n      // where to run the query, and expect the `request` to NOT specify the \"path\".\n      return !1;\n    }\n  }]);\n\n  return _class;\n}());\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Initializes the HTTP connection for the REST API. */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */\n\n\nfunction yt(t) {\n  // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n  var e = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  \"undefined\" != typeof self && (self.crypto || self.msCrypto),\n      n = new Uint8Array(t);\n  if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(n);else // Falls back to Math.random\n    for (var _e5 = 0; _e5 < t; _e5++) {\n      n[_e5] = Math.floor(256 * Math.random());\n    }\n  return n;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar _t = /*#__PURE__*/function () {\n  function _t() {\n    _classCallCheck(this, _t);\n  }\n\n  _createClass(_t, null, [{\n    key: \"$\",\n    value: function $() {\n      // Alphanumeric characters\n      var t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\",\n          e = Math.floor(256 / t.length) * t.length; // The largest byte value that is a multiple of `char.length`.\n\n      var n = \"\";\n\n      for (; n.length < 20;) {\n        var r = yt(40);\n\n        for (var s = 0; s < r.length; ++s) {\n          // Only accept values that are [0, maxMultiple), this ensures they can\n          // be evenly mapped to indices of `chars` via a modulo operation.\n          n.length < 20 && r[s] < e && (n += t.charAt(r[s] % t.length));\n        }\n      }\n\n      return n;\n    }\n  }]);\n\n  return _t;\n}();\n\nfunction gt(t, e) {\n  return t < e ? -1 : t > e ? 1 : 0;\n}\n/** Helper to compare arrays using isEqual(). */\n\n\nfunction vt(t, e, n) {\n  return t.length === e.length && t.every(function (t, r) {\n    return n(t, e[r]);\n  });\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\n\n\nvar bt = /*#__PURE__*/function () {\n  /**\n   * Creates a new timestamp.\n   *\n   * @param seconds - The number of seconds of UTC time since Unix epoch\n   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n   *     9999-12-31T23:59:59Z inclusive.\n   * @param nanoseconds - The non-negative fractions of a second at nanosecond\n   *     resolution. Negative second values with fractions must still have\n   *     non-negative nanoseconds values that count forward in time. Must be\n   *     from 0 to 999,999,999 inclusive.\n   */\n  function bt(\n  /**\n   * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n   */\n  t,\n  /**\n   * The fractions of a second at nanosecond resolution.*\n   */\n  e) {\n    _classCallCheck(this, bt);\n\n    if (this.seconds = t, this.nanoseconds = e, e < 0) throw new U(P, \"Timestamp nanoseconds out of range: \" + e);\n    if (e >= 1e9) throw new U(P, \"Timestamp nanoseconds out of range: \" + e);\n    if (t < -62135596800) throw new U(P, \"Timestamp seconds out of range: \" + t); // This will break in the year 10,000.\n\n    if (t >= 253402300800) throw new U(P, \"Timestamp seconds out of range: \" + t);\n  }\n  /**\n   * Creates a new timestamp with the current date, with millisecond precision.\n   *\n   * @returns a new timestamp representing the current date.\n   */\n\n\n  _createClass(bt, [{\n    key: \"toDate\",\n\n    /**\n     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n     * causes a loss of precision since `Date` objects only support millisecond\n     * precision.\n     *\n     * @returns JavaScript `Date` object representing the same point in time as\n     *     this `Timestamp`, with millisecond precision.\n     */\n    value: function toDate() {\n      return new Date(this.toMillis());\n    }\n    /**\n     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n     * epoch). This operation causes a loss of precision.\n     *\n     * @returns The point in time corresponding to this timestamp, represented as\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     */\n\n  }, {\n    key: \"toMillis\",\n    value: function toMillis() {\n      return 1e3 * this.seconds + this.nanoseconds / 1e6;\n    }\n  }, {\n    key: \"_compareTo\",\n    value: function _compareTo(t) {\n      return this.seconds === t.seconds ? gt(this.nanoseconds, t.nanoseconds) : gt(this.seconds, t.seconds);\n    }\n    /**\n     * Returns true if this `Timestamp` is equal to the provided one.\n     *\n     * @param other - The `Timestamp` to compare against.\n     * @returns true if this `Timestamp` is equal to the provided one.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n    }\n    /** Returns a textual representation of this `Timestamp`. */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n    /** Returns a JSON-serializable representation of this `Timestamp`. */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        seconds: this.seconds,\n        nanoseconds: this.nanoseconds\n      };\n    }\n    /**\n     * Converts this object to a primitive string, which allows `Timestamp` objects\n     * to be compared using the `>`, `<=`, `>=` and `>` operators.\n     */\n\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      // This method returns a string of the form <seconds>.<nanoseconds> where\n      // <seconds> is translated to have a non-negative value and both <seconds>\n      // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n      // Strings with this format then have a lexiographical ordering that matches\n      // the expected ordering. The <seconds> translation is done to avoid having\n      // a leading negative sign (i.e. a leading '-' character) in its string\n      // representation, which would affect its lexiographical ordering.\n      var t = this.seconds - -62135596800; // Note: Up to 12 decimal digits are required to represent all valid\n      // 'seconds' values.\n\n      return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n    }\n  }], [{\n    key: \"now\",\n    value: function now() {\n      return bt.fromMillis(Date.now());\n    }\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @param date - The date to initialize the `Timestamp` from.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     date.\n     */\n\n  }, {\n    key: \"fromDate\",\n    value: function fromDate(t) {\n      return bt.fromMillis(t.getTime());\n    }\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @param milliseconds - Number of milliseconds since Unix epoch\n     *     1970-01-01T00:00:00Z.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     number of milliseconds.\n     */\n\n  }, {\n    key: \"fromMillis\",\n    value: function fromMillis(t) {\n      var e = Math.floor(t / 1e3),\n          n = Math.floor(1e6 * (t - 1e3 * e));\n      return new bt(e, n);\n    }\n  }]);\n\n  return bt;\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */\n\n\nvar Et = /*#__PURE__*/function () {\n  function Et(t) {\n    _classCallCheck(this, Et);\n\n    this.timestamp = t;\n  }\n\n  _createClass(Et, [{\n    key: \"compareTo\",\n    value: function compareTo(t) {\n      return this.timestamp._compareTo(t.timestamp);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return this.timestamp.isEqual(t.timestamp);\n    }\n    /** Returns a number representation of the version for use in spec tests. */\n\n  }, {\n    key: \"toMicroseconds\",\n    value: function toMicroseconds() {\n      // Convert to microseconds.\n      return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n    }\n  }, {\n    key: \"toTimestamp\",\n    value: function toTimestamp() {\n      return this.timestamp;\n    }\n  }], [{\n    key: \"fromTimestamp\",\n    value: function fromTimestamp(t) {\n      return new Et(t);\n    }\n  }, {\n    key: \"min\",\n    value: function min() {\n      return new Et(new bt(0, 0));\n    }\n  }, {\n    key: \"max\",\n    value: function max() {\n      return new Et(new bt(253402300799, 999999999));\n    }\n  }]);\n\n  return Et;\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction It(t) {\n  var e = 0;\n\n  for (var n in t) {\n    Object.prototype.hasOwnProperty.call(t, n) && e++;\n  }\n\n  return e;\n}\n\nfunction Tt(t, e) {\n  for (var n in t) {\n    Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);\n  }\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\n\n\nvar At = /*#__PURE__*/function () {\n  function At(t, e) {\n    _classCallCheck(this, At);\n\n    this.comparator = t, this.root = e || Pt.EMPTY;\n  } // Returns a copy of the map, with the specified key/value added or replaced.\n\n\n  _createClass(At, [{\n    key: \"insert\",\n    value: function insert(t, e) {\n      return new At(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, Pt.BLACK, null, null));\n    } // Returns a copy of the map, with the specified key removed.\n\n  }, {\n    key: \"remove\",\n    value: function remove(t) {\n      return new At(this.comparator, this.root.remove(t, this.comparator).copy(null, null, Pt.BLACK, null, null));\n    } // Returns the value of the node with the given key, or null.\n\n  }, {\n    key: \"get\",\n    value: function get(t) {\n      var e = this.root;\n\n      for (; !e.isEmpty();) {\n        var n = this.comparator(t, e.key);\n        if (0 === n) return e.value;\n        n < 0 ? e = e.left : n > 0 && (e = e.right);\n      }\n\n      return null;\n    } // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(t) {\n      // Number of nodes that were pruned when descending right\n      var e = 0,\n          n = this.root;\n\n      for (; !n.isEmpty();) {\n        var r = this.comparator(t, n.key);\n        if (0 === r) return e + n.left.size;\n        r < 0 ? n = n.left : ( // Count all nodes left of the node plus the node itself\n        e += n.left.size + 1, n = n.right);\n      } // Node not found\n\n\n      return -1;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.root.isEmpty();\n    } // Returns the total number of nodes in the map.\n\n  }, {\n    key: \"minKey\",\n    // Returns the minimum key in the map.\n    value: function minKey() {\n      return this.root.minKey();\n    } // Returns the maximum key in the map.\n\n  }, {\n    key: \"maxKey\",\n    value: function maxKey() {\n      return this.root.maxKey();\n    } // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n\n  }, {\n    key: \"inorderTraversal\",\n    value: function inorderTraversal(t) {\n      return this.root.inorderTraversal(t);\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(t) {\n      this.inorderTraversal(function (e, n) {\n        return t(e, n), !1;\n      });\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var t = [];\n      return this.inorderTraversal(function (e, n) {\n        return t.push(\"\".concat(e, \":\").concat(n)), !1;\n      }), \"{\".concat(t.join(\", \"), \"}\");\n    } // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n\n  }, {\n    key: \"reverseTraversal\",\n    value: function reverseTraversal(t) {\n      return this.root.reverseTraversal(t);\n    } // Returns an iterator over the SortedMap.\n\n  }, {\n    key: \"getIterator\",\n    value: function getIterator() {\n      return new Rt(this.root, null, this.comparator, !1);\n    }\n  }, {\n    key: \"getIteratorFrom\",\n    value: function getIteratorFrom(t) {\n      return new Rt(this.root, t, this.comparator, !1);\n    }\n  }, {\n    key: \"getReverseIterator\",\n    value: function getReverseIterator() {\n      return new Rt(this.root, null, this.comparator, !0);\n    }\n  }, {\n    key: \"getReverseIteratorFrom\",\n    value: function getReverseIteratorFrom(t) {\n      return new Rt(this.root, t, this.comparator, !0);\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.root.size;\n    }\n  }]);\n\n  return At;\n}(); // end SortedMap\n// An iterator over an LLRBNode.\n\n\nvar Rt = /*#__PURE__*/function () {\n  function Rt(t, e, n, r) {\n    _classCallCheck(this, Rt);\n\n    this.isReverse = r, this.nodeStack = [];\n    var s = 1;\n\n    for (; !t.isEmpty();) {\n      if (s = e ? n(t.key, e) : 1, // flip the comparison if we're going in reverse\n      e && r && (s *= -1), s < 0) // This node is less than our start key. ignore it\n        t = this.isReverse ? t.left : t.right;else {\n        if (0 === s) {\n          // This node is exactly equal to our start key. Push it on the stack,\n          // but stop iterating;\n          this.nodeStack.push(t);\n          break;\n        } // This node is greater than our start key, add it to the stack and move\n        // to the next one\n\n\n        this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n      }\n    }\n  }\n\n  _createClass(Rt, [{\n    key: \"getNext\",\n    value: function getNext() {\n      var t = this.nodeStack.pop();\n      var e = {\n        key: t.key,\n        value: t.value\n      };\n      if (this.isReverse) for (t = t.left; !t.isEmpty();) {\n        this.nodeStack.push(t), t = t.right;\n      } else for (t = t.right; !t.isEmpty();) {\n        this.nodeStack.push(t), t = t.left;\n      }\n      return e;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this.nodeStack.length > 0;\n    }\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      if (0 === this.nodeStack.length) return null;\n      var t = this.nodeStack[this.nodeStack.length - 1];\n      return {\n        key: t.key,\n        value: t.value\n      };\n    }\n  }]);\n\n  return Rt;\n}(); // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\n\n\nvar Pt = /*#__PURE__*/function () {\n  function Pt(t, e, n, r, s) {\n    _classCallCheck(this, Pt);\n\n    this.key = t, this.value = e, this.color = null != n ? n : Pt.RED, this.left = null != r ? r : Pt.EMPTY, this.right = null != s ? s : Pt.EMPTY, this.size = this.left.size + 1 + this.right.size;\n  } // Returns a copy of the current node, optionally replacing pieces of it.\n\n\n  _createClass(Pt, [{\n    key: \"copy\",\n    value: function copy(t, e, n, r, s) {\n      return new Pt(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != r ? r : this.left, null != s ? s : this.right);\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !1;\n    } // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n\n  }, {\n    key: \"inorderTraversal\",\n    value: function inorderTraversal(t) {\n      return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n    } // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n\n  }, {\n    key: \"reverseTraversal\",\n    value: function reverseTraversal(t) {\n      return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n    } // Returns the minimum node in the tree.\n\n  }, {\n    key: \"min\",\n    value: function min() {\n      return this.left.isEmpty() ? this : this.left.min();\n    } // Returns the maximum key in the tree.\n\n  }, {\n    key: \"minKey\",\n    value: function minKey() {\n      return this.min().key;\n    } // Returns the maximum key in the tree.\n\n  }, {\n    key: \"maxKey\",\n    value: function maxKey() {\n      return this.right.isEmpty() ? this.key : this.right.maxKey();\n    } // Returns new tree, with the key/value added.\n\n  }, {\n    key: \"insert\",\n    value: function insert(t, e, n) {\n      var r = this;\n      var s = n(t, r.key);\n      return r = s < 0 ? r.copy(null, null, null, r.left.insert(t, e, n), null) : 0 === s ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.insert(t, e, n)), r.fixUp();\n    }\n  }, {\n    key: \"removeMin\",\n    value: function removeMin() {\n      if (this.left.isEmpty()) return Pt.EMPTY;\n      var t = this;\n      return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), t.fixUp();\n    } // Returns new tree, with the specified item removed.\n\n  }, {\n    key: \"remove\",\n    value: function remove(t, e) {\n      var n,\n          r = this;\n      if (e(t, r.key) < 0) r.left.isEmpty() || r.left.isRed() || r.left.left.isRed() || (r = r.moveRedLeft()), r = r.copy(null, null, null, r.left.remove(t, e), null);else {\n        if (r.left.isRed() && (r = r.rotateRight()), r.right.isEmpty() || r.right.isRed() || r.right.left.isRed() || (r = r.moveRedRight()), 0 === e(t, r.key)) {\n          if (r.right.isEmpty()) return Pt.EMPTY;\n          n = r.right.min(), r = r.copy(n.key, n.value, null, null, r.right.removeMin());\n        }\n\n        r = r.copy(null, null, null, null, r.right.remove(t, e));\n      }\n      return r.fixUp();\n    }\n  }, {\n    key: \"isRed\",\n    value: function isRed() {\n      return this.color;\n    } // Returns new tree after performing any needed rotations.\n\n  }, {\n    key: \"fixUp\",\n    value: function fixUp() {\n      var t = this;\n      return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n    }\n  }, {\n    key: \"moveRedLeft\",\n    value: function moveRedLeft() {\n      var t = this.colorFlip();\n      return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), t = t.rotateLeft(), t = t.colorFlip()), t;\n    }\n  }, {\n    key: \"moveRedRight\",\n    value: function moveRedRight() {\n      var t = this.colorFlip();\n      return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n    }\n  }, {\n    key: \"rotateLeft\",\n    value: function rotateLeft() {\n      var t = this.copy(null, null, Pt.RED, null, this.right.left);\n      return this.right.copy(null, null, this.color, t, null);\n    }\n  }, {\n    key: \"rotateRight\",\n    value: function rotateRight() {\n      var t = this.copy(null, null, Pt.RED, this.left.right, null);\n      return this.left.copy(null, null, this.color, null, t);\n    }\n  }, {\n    key: \"colorFlip\",\n    value: function colorFlip() {\n      var t = this.left.copy(null, null, !this.left.color, null, null),\n          e = this.right.copy(null, null, !this.right.color, null, null);\n      return this.copy(null, null, !this.color, t, e);\n    } // For testing.\n\n  }, {\n    key: \"checkMaxDepth\",\n    value: function checkMaxDepth() {\n      var t = this.check();\n      return Math.pow(2, t) <= this.size + 1;\n    } // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n\n  }, {\n    key: \"check\",\n    value: function check() {\n      if (this.isRed() && this.left.isRed()) throw b();\n      if (this.right.isRed()) throw b();\n      var t = this.left.check();\n      if (t !== this.right.check()) throw b();\n      return t + (this.isRed() ? 0 : 1);\n    }\n  }]);\n\n  return Pt;\n}(); // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nPt.EMPTY = null, Pt.RED = !0, Pt.BLACK = !1; // end LLRBEmptyNode\n\nPt.EMPTY = new (\n/*#__PURE__*/\n// Represents an empty node (a leaf node in the Red-Black Tree).\nfunction () {\n  function _class2() {\n    _classCallCheck(this, _class2);\n\n    this.size = 0;\n  }\n\n  _createClass(_class2, [{\n    key: \"copy\",\n    // Returns a copy of the current node.\n    value: function copy(t, e, n, r, s) {\n      return this;\n    } // Returns a copy of the tree, with the specified key/value added.\n\n  }, {\n    key: \"insert\",\n    value: function insert(t, e, n) {\n      return new Pt(t, e);\n    } // Returns a copy of the tree, with the specified key removed.\n\n  }, {\n    key: \"remove\",\n    value: function remove(t, e) {\n      return this;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return !0;\n    }\n  }, {\n    key: \"inorderTraversal\",\n    value: function inorderTraversal(t) {\n      return !1;\n    }\n  }, {\n    key: \"reverseTraversal\",\n    value: function reverseTraversal(t) {\n      return !1;\n    }\n  }, {\n    key: \"minKey\",\n    value: function minKey() {\n      return null;\n    }\n  }, {\n    key: \"maxKey\",\n    value: function maxKey() {\n      return null;\n    }\n  }, {\n    key: \"isRed\",\n    value: function isRed() {\n      return !1;\n    } // For testing.\n\n  }, {\n    key: \"checkMaxDepth\",\n    value: function checkMaxDepth() {\n      return !0;\n    }\n  }, {\n    key: \"check\",\n    value: function check() {\n      return 0;\n    }\n  }, {\n    key: \"key\",\n    get: function get() {\n      throw b();\n    }\n  }, {\n    key: \"value\",\n    get: function get() {\n      throw b();\n    }\n  }, {\n    key: \"color\",\n    get: function get() {\n      throw b();\n    }\n  }, {\n    key: \"left\",\n    get: function get() {\n      throw b();\n    }\n  }, {\n    key: \"right\",\n    get: function get() {\n      throw b();\n    }\n  }]);\n\n  return _class2;\n}())();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\n\nvar Vt = /*#__PURE__*/function () {\n  function Vt(t) {\n    _classCallCheck(this, Vt);\n\n    this.comparator = t, this.data = new At(this.comparator);\n  }\n\n  _createClass(Vt, [{\n    key: \"has\",\n    value: function has(t) {\n      return null !== this.data.get(t);\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.data.minKey();\n    }\n  }, {\n    key: \"last\",\n    value: function last() {\n      return this.data.maxKey();\n    }\n  }, {\n    key: \"indexOf\",\n    value: function indexOf(t) {\n      return this.data.indexOf(t);\n    }\n    /** Iterates elements in order defined by \"comparator\" */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(t) {\n      this.data.inorderTraversal(function (e, n) {\n        return t(e), !1;\n      });\n    }\n    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */\n\n  }, {\n    key: \"forEachInRange\",\n    value: function forEachInRange(t, e) {\n      var n = this.data.getIteratorFrom(t[0]);\n\n      for (; n.hasNext();) {\n        var r = n.getNext();\n        if (this.comparator(r.key, t[1]) >= 0) return;\n        e(r.key);\n      }\n    }\n    /**\n     * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n     */\n\n  }, {\n    key: \"forEachWhile\",\n    value: function forEachWhile(t, e) {\n      var n;\n\n      for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext();) {\n        if (!t(n.getNext().key)) return;\n      }\n    }\n    /** Finds the least element greater than or equal to `elem`. */\n\n  }, {\n    key: \"firstAfterOrEqual\",\n    value: function firstAfterOrEqual(t) {\n      var e = this.data.getIteratorFrom(t);\n      return e.hasNext() ? e.getNext().key : null;\n    }\n  }, {\n    key: \"getIterator\",\n    value: function getIterator() {\n      return new Nt(this.data.getIterator());\n    }\n  }, {\n    key: \"getIteratorFrom\",\n    value: function getIteratorFrom(t) {\n      return new Nt(this.data.getIteratorFrom(t));\n    }\n    /** Inserts or updates an element */\n\n  }, {\n    key: \"add\",\n    value: function add(t) {\n      return this.copy(this.data.remove(t).insert(t, !0));\n    }\n    /** Deletes an element */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(t) {\n      return this.has(t) ? this.copy(this.data.remove(t)) : this;\n    }\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.data.isEmpty();\n    }\n  }, {\n    key: \"unionWith\",\n    value: function unionWith(t) {\n      var e = this; // Make sure `result` always refers to the larger one of the two sets.\n\n      return e.size < t.size && (e = t, t = this), t.forEach(function (t) {\n        e = e.add(t);\n      }), e;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      if (!(t instanceof Vt)) return !1;\n      if (this.size !== t.size) return !1;\n      var e = this.data.getIterator(),\n          n = t.data.getIterator();\n\n      for (; e.hasNext();) {\n        var _t4 = e.getNext().key,\n            r = n.getNext().key;\n        if (0 !== this.comparator(_t4, r)) return !1;\n      }\n\n      return !0;\n    }\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      var t = [];\n      return this.forEach(function (e) {\n        t.push(e);\n      }), t;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var t = [];\n      return this.forEach(function (e) {\n        return t.push(e);\n      }), \"SortedSet(\" + t.toString() + \")\";\n    }\n  }, {\n    key: \"copy\",\n    value: function copy(t) {\n      var e = new Vt(this.comparator);\n      return e.data = t, e;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.data.size;\n    }\n  }]);\n\n  return Vt;\n}();\n\nvar Nt = /*#__PURE__*/function () {\n  function Nt(t) {\n    _classCallCheck(this, Nt);\n\n    this.iter = t;\n  }\n\n  _createClass(Nt, [{\n    key: \"getNext\",\n    value: function getNext() {\n      return this.iter.getNext().key;\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return this.iter.hasNext();\n    }\n  }]);\n\n  return Nt;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */\n\n\nvar $t = /*#__PURE__*/function () {\n  function $t(t) {\n    _classCallCheck(this, $t);\n\n    this.fields = t, // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    t.sort(nt.comparator);\n  }\n\n  _createClass($t, [{\n    key: \"unionWith\",\n\n    /**\n     * Returns a new FieldMask object that is the result of adding all the given\n     * fields paths to this field mask.\n     */\n    value: function unionWith(t) {\n      var e = new Vt(nt.comparator);\n\n      var _iterator = _createForOfIteratorHelper(this.fields),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _t5 = _step.value;\n          e = e.add(_t5);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(t),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var n = _step2.value;\n          e = e.add(n);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return new $t(e.toArray());\n    }\n    /**\n     * Verifies that `fieldPath` is included by at least one field in this field\n     * mask.\n     *\n     * This is an O(n) operation, where `n` is the size of the field mask.\n     */\n\n  }, {\n    key: \"covers\",\n    value: function covers(t) {\n      var _iterator3 = _createForOfIteratorHelper(this.fields),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var e = _step3.value;\n          if (e.isPrefixOf(t)) return !0;\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      return !1;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return vt(this.fields, t.fields, function (t, e) {\n        return t.isEqual(e);\n      });\n    }\n  }], [{\n    key: \"empty\",\n    value: function empty() {\n      return new $t([]);\n    }\n  }]);\n\n  return $t;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Converts a Base64 encoded string to a binary string. */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\n\n\nvar Dt = /*#__PURE__*/function () {\n  function Dt(t) {\n    _classCallCheck(this, Dt);\n\n    this.binaryString = t;\n  }\n\n  _createClass(Dt, [{\n    key: Symbol.iterator,\n    value: function value() {\n      var _this8 = this;\n\n      var t = 0;\n      return {\n        next: function next() {\n          return t < _this8.binaryString.length ? {\n            value: _this8.binaryString.charCodeAt(t++),\n            done: !1\n          } : {\n            value: void 0,\n            done: !0\n          };\n        }\n      };\n    }\n  }, {\n    key: \"toBase64\",\n    value: function toBase64() {\n      return t = this.binaryString, btoa(t);\n      /** Converts a binary string to a Base64 encoded string. */\n\n      var t;\n    }\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      return function (t) {\n        var e = new Uint8Array(t.length);\n\n        for (var n = 0; n < t.length; n++) {\n          e[n] = t.charCodeAt(n);\n        }\n\n        return e;\n      }\n      /**\n      * @license\n      * Copyright 2020 Google LLC\n      *\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\n      * you may not use this file except in compliance with the License.\n      * You may obtain a copy of the License at\n      *\n      *   http://www.apache.org/licenses/LICENSE-2.0\n      *\n      * Unless required by applicable law or agreed to in writing, software\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n      * See the License for the specific language governing permissions and\n      * limitations under the License.\n      */\n      // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n      (this.binaryString);\n    }\n  }, {\n    key: \"approximateByteSize\",\n    value: function approximateByteSize() {\n      return 2 * this.binaryString.length;\n    }\n  }, {\n    key: \"compareTo\",\n    value: function compareTo(t) {\n      return gt(this.binaryString, t.binaryString);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return this.binaryString === t.binaryString;\n    }\n  }], [{\n    key: \"fromBase64String\",\n    value: function fromBase64String(t) {\n      var e = atob(t);\n      return new Dt(e);\n    }\n  }, {\n    key: \"fromUint8Array\",\n    value: function fromUint8Array(t) {\n      // TODO(indexing); Remove the copy of the byte string here as this method\n      // is frequently called during indexing.\n      var e =\n      /**\n      * Helper function to convert an Uint8array to a binary string.\n      */\n      function (t) {\n        var e = \"\";\n\n        for (var n = 0; n < t.length; ++n) {\n          e += String.fromCharCode(t[n]);\n        }\n\n        return e;\n      }\n      /**\n      * Helper function to convert a binary string to an Uint8Array.\n      */\n      (t);\n\n      return new Dt(e);\n    }\n  }]);\n\n  return Dt;\n}();\n\nDt.EMPTY_BYTE_STRING = new Dt(\"\");\nvar xt = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */\n\nfunction Ft(t) {\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (E(!!t), \"string\" == typeof t) {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n    // Parse the nanos right out of the string.\n    var e = 0;\n    var n = xt.exec(t);\n\n    if (E(!!n), n[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      var _t6 = n[1];\n      _t6 = (_t6 + \"000000000\").substr(0, 9), e = Number(_t6);\n    } // Parse the date to get the seconds.\n\n\n    var r = new Date(t);\n    return {\n      seconds: Math.floor(r.getTime() / 1e3),\n      nanos: e\n    };\n  }\n\n  return {\n    seconds: St(t.seconds),\n    nanos: St(t.nanos)\n  };\n}\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */\n\n\nfunction St(t) {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n/** Converts the possible Proto types for Blobs into a ByteString. */\n\n\nfunction qt(t) {\n  return \"string\" == typeof t ? Dt.fromBase64String(t) : Dt.fromUint8Array(t);\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */\n\n\nfunction Ot(t) {\n  var e, n;\n  return \"server_timestamp\" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);\n}\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */\n\n\nfunction kt(t) {\n  var e = t.mapValue.fields.__previous_value__;\n  return Ot(e) ? kt(e) : e;\n}\n/**\n * Returns the local time at which this timestamp was first set.\n */\n\n\nfunction Ct(t) {\n  var e = Ft(t.mapValue.fields.__local_write_time__.timestampValue);\n  return new bt(e.seconds, e.nanos);\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar Lt = {\n  fields: {\n    __type__: {\n      stringValue: \"__max__\"\n    }\n  }\n};\n/** Extracts the backend's type order for the provided value. */\n\nfunction Mt(t) {\n  return \"nullValue\" in t ? 0\n  /* NullValue */\n  : \"booleanValue\" in t ? 1\n  /* BooleanValue */\n  : \"integerValue\" in t || \"doubleValue\" in t ? 2\n  /* NumberValue */\n  : \"timestampValue\" in t ? 3\n  /* TimestampValue */\n  : \"stringValue\" in t ? 5\n  /* StringValue */\n  : \"bytesValue\" in t ? 6\n  /* BlobValue */\n  : \"referenceValue\" in t ? 7\n  /* RefValue */\n  : \"geoPointValue\" in t ? 8\n  /* GeoPointValue */\n  : \"arrayValue\" in t ? 9\n  /* ArrayValue */\n  : \"mapValue\" in t ? Ot(t) ? 4\n  /* ServerTimestampValue */\n  :\n  /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n  function (t) {\n    return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n  }\n  /**\n  * @license\n  * Copyright 2017 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n\n  /**\n  * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n  * ability to add and remove fields (via the ObjectValueBuilder).\n  */\n  (t) ? 9007199254740991\n  /* MaxValue */\n  : 10\n  /* ObjectValue */\n  : b();\n}\n/** Tests `left` and `right` for equality based on the backend semantics. */\n\n\nfunction Ut(t, e) {\n  if (t === e) return !0;\n  var n = Mt(t);\n  if (n !== Mt(e)) return !1;\n\n  switch (n) {\n    case 0\n    /* NullValue */\n    :\n    case 9007199254740991\n    /* MaxValue */\n    :\n      return !0;\n\n    case 1\n    /* BooleanValue */\n    :\n      return t.booleanValue === e.booleanValue;\n\n    case 4\n    /* ServerTimestampValue */\n    :\n      return Ct(t).isEqual(Ct(e));\n\n    case 3\n    /* TimestampValue */\n    :\n      return function (t, e) {\n        if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) // Use string equality for ISO 8601 timestamps\n          return t.timestampValue === e.timestampValue;\n        var n = Ft(t.timestampValue),\n            r = Ft(e.timestampValue);\n        return n.seconds === r.seconds && n.nanos === r.nanos;\n      }(t, e);\n\n    case 5\n    /* StringValue */\n    :\n      return t.stringValue === e.stringValue;\n\n    case 6\n    /* BlobValue */\n    :\n      return function (t, e) {\n        return qt(t.bytesValue).isEqual(qt(e.bytesValue));\n      }(t, e);\n\n    case 7\n    /* RefValue */\n    :\n      return t.referenceValue === e.referenceValue;\n\n    case 8\n    /* GeoPointValue */\n    :\n      return function (t, e) {\n        return St(t.geoPointValue.latitude) === St(e.geoPointValue.latitude) && St(t.geoPointValue.longitude) === St(e.geoPointValue.longitude);\n      }(t, e);\n\n    case 2\n    /* NumberValue */\n    :\n      return function (t, e) {\n        if (\"integerValue\" in t && \"integerValue\" in e) return St(t.integerValue) === St(e.integerValue);\n\n        if (\"doubleValue\" in t && \"doubleValue\" in e) {\n          var _n3 = St(t.doubleValue),\n              r = St(e.doubleValue);\n\n          return _n3 === r ? lt(_n3) === lt(r) : isNaN(_n3) && isNaN(r);\n        }\n\n        return !1;\n      }(t, e);\n\n    case 9\n    /* ArrayValue */\n    :\n      return vt(t.arrayValue.values || [], e.arrayValue.values || [], Ut);\n\n    case 10\n    /* ObjectValue */\n    :\n      return function (t, e) {\n        var n = t.mapValue.fields || {},\n            r = e.mapValue.fields || {};\n        if (It(n) !== It(r)) return !1;\n\n        for (var _t7 in n) {\n          if (n.hasOwnProperty(_t7) && (void 0 === r[_t7] || !Ut(n[_t7], r[_t7]))) return !1;\n        }\n\n        return !0;\n      }\n      /** Returns true if the ArrayValue contains the specified element. */\n      (t, e);\n\n    default:\n      return b();\n  }\n}\n\nfunction jt(t, e) {\n  return void 0 !== (t.values || []).find(function (t) {\n    return Ut(t, e);\n  });\n}\n\nfunction Bt(t, e) {\n  if (t === e) return 0;\n  var n = Mt(t),\n      r = Mt(e);\n  if (n !== r) return gt(n, r);\n\n  switch (n) {\n    case 0\n    /* NullValue */\n    :\n    case 9007199254740991\n    /* MaxValue */\n    :\n      return 0;\n\n    case 1\n    /* BooleanValue */\n    :\n      return gt(t.booleanValue, e.booleanValue);\n\n    case 2\n    /* NumberValue */\n    :\n      return function (t, e) {\n        var n = St(t.integerValue || t.doubleValue),\n            r = St(e.integerValue || e.doubleValue);\n        return n < r ? -1 : n > r ? 1 : n === r ? 0 : // one or both are NaN.\n        isNaN(n) ? isNaN(r) ? 0 : -1 : 1;\n      }(t, e);\n\n    case 3\n    /* TimestampValue */\n    :\n      return Qt(t.timestampValue, e.timestampValue);\n\n    case 4\n    /* ServerTimestampValue */\n    :\n      return Qt(Ct(t), Ct(e));\n\n    case 5\n    /* StringValue */\n    :\n      return gt(t.stringValue, e.stringValue);\n\n    case 6\n    /* BlobValue */\n    :\n      return function (t, e) {\n        var n = qt(t),\n            r = qt(e);\n        return n.compareTo(r);\n      }(t.bytesValue, e.bytesValue);\n\n    case 7\n    /* RefValue */\n    :\n      return function (t, e) {\n        var n = t.split(\"/\"),\n            r = e.split(\"/\");\n\n        for (var _t8 = 0; _t8 < n.length && _t8 < r.length; _t8++) {\n          var _e6 = gt(n[_t8], r[_t8]);\n\n          if (0 !== _e6) return _e6;\n        }\n\n        return gt(n.length, r.length);\n      }(t.referenceValue, e.referenceValue);\n\n    case 8\n    /* GeoPointValue */\n    :\n      return function (t, e) {\n        var n = gt(St(t.latitude), St(e.latitude));\n        if (0 !== n) return n;\n        return gt(St(t.longitude), St(e.longitude));\n      }(t.geoPointValue, e.geoPointValue);\n\n    case 9\n    /* ArrayValue */\n    :\n      return function (t, e) {\n        var n = t.values || [],\n            r = e.values || [];\n\n        for (var _t9 = 0; _t9 < n.length && _t9 < r.length; ++_t9) {\n          var _e7 = Bt(n[_t9], r[_t9]);\n\n          if (_e7) return _e7;\n        }\n\n        return gt(n.length, r.length);\n      }(t.arrayValue, e.arrayValue);\n\n    case 10\n    /* ObjectValue */\n    :\n      return function (t, e) {\n        if (t === Lt && e === Lt) return 0;\n        if (t === Lt) return 1;\n        if (e === Lt) return -1;\n        var n = t.fields || {},\n            r = Object.keys(n),\n            s = e.fields || {},\n            i = Object.keys(s); // Even though MapValues are likely sorted correctly based on their insertion\n        // order (e.g. when received from the backend), local modifications can bring\n        // elements out of order. We need to re-sort the elements to ensure that\n        // canonical IDs are independent of insertion order.\n\n        r.sort(), i.sort();\n\n        for (var _t10 = 0; _t10 < r.length && _t10 < i.length; ++_t10) {\n          var _e8 = gt(r[_t10], i[_t10]);\n\n          if (0 !== _e8) return _e8;\n          var o = Bt(n[r[_t10]], s[i[_t10]]);\n          if (0 !== o) return o;\n        }\n\n        return gt(r.length, i.length);\n      }\n      /** Returns a reference value for the provided database and key. */\n      (t.mapValue, e.mapValue);\n\n    default:\n      throw b();\n  }\n}\n\nfunction Qt(t, e) {\n  if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return gt(t, e);\n  var n = Ft(t),\n      r = Ft(e),\n      s = gt(n.seconds, r.seconds);\n  return 0 !== s ? s : gt(n.nanos, r.nanos);\n}\n\nfunction zt(t, e) {\n  return {\n    referenceValue: \"projects/\".concat(t.projectId, \"/databases/\").concat(t.database, \"/documents/\").concat(e.path.canonicalString())\n  };\n}\n/** Returns true if `value` is an ArrayValue. */\n\n\nfunction Gt(t) {\n  return !!t && \"arrayValue\" in t;\n}\n/** Returns true if `value` is a NullValue. */\n\n\nfunction Wt(t) {\n  return !!t && \"nullValue\" in t;\n}\n/** Returns true if `value` is NaN. */\n\n\nfunction Kt(t) {\n  return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n/** Returns true if `value` is a MapValue. */\n\n\nfunction Yt(t) {\n  return !!t && \"mapValue\" in t;\n}\n/** Creates a deep copy of `source`. */\n\n\nfunction Ht(t) {\n  if (t.geoPointValue) return {\n    geoPointValue: Object.assign({}, t.geoPointValue)\n  };\n  if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n    timestampValue: Object.assign({}, t.timestampValue)\n  };\n\n  if (t.mapValue) {\n    var e = {\n      mapValue: {\n        fields: {}\n      }\n    };\n    return Tt(t.mapValue.fields, function (t, n) {\n      return e.mapValue.fields[t] = Ht(n);\n    }), e;\n  }\n\n  if (t.arrayValue) {\n    var _e9 = {\n      arrayValue: {\n        values: []\n      }\n    };\n\n    for (var n = 0; n < (t.arrayValue.values || []).length; ++n) {\n      _e9.arrayValue.values[n] = Ht(t.arrayValue.values[n]);\n    }\n\n    return _e9;\n  }\n\n  return Object.assign({}, t);\n}\n\nvar Jt = /*#__PURE__*/function () {\n  function Jt(t) {\n    _classCallCheck(this, Jt);\n\n    this.value = t;\n  }\n\n  _createClass(Jt, [{\n    key: \"field\",\n\n    /**\n     * Returns the value at the given path or null.\n     *\n     * @param path - the path to search\n     * @returns The value at the path or null if the path is not set.\n     */\n    value: function field(t) {\n      if (t.isEmpty()) return this.value;\n      {\n        var e = this.value;\n\n        for (var n = 0; n < t.length - 1; ++n) {\n          if (e = (e.mapValue.fields || {})[t.get(n)], !Yt(e)) return null;\n        }\n\n        return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n      }\n    }\n    /**\n     * Sets the field to the provided value.\n     *\n     * @param path - The field path to set.\n     * @param value - The value to set.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(t, e) {\n      this.getFieldsMap(t.popLast())[t.lastSegment()] = Ht(e);\n    }\n    /**\n     * Sets the provided fields to the provided values.\n     *\n     * @param data - A map of fields to values (or null for deletes).\n     */\n\n  }, {\n    key: \"setAll\",\n    value: function setAll(t) {\n      var _this9 = this;\n\n      var e = nt.emptyPath(),\n          n = {},\n          r = [];\n      t.forEach(function (t, s) {\n        if (!e.isImmediateParentOf(s)) {\n          // Insert the accumulated changes at this parent location\n          var _t11 = _this9.getFieldsMap(e);\n\n          _this9.applyChanges(_t11, n, r), n = {}, r = [], e = s.popLast();\n        }\n\n        t ? n[s.lastSegment()] = Ht(t) : r.push(s.lastSegment());\n      });\n      var s = this.getFieldsMap(e);\n      this.applyChanges(s, n, r);\n    }\n    /**\n     * Removes the field at the specified path. If there is no field at the\n     * specified path, nothing is changed.\n     *\n     * @param path - The field path to remove.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(t) {\n      var e = this.field(t.popLast());\n      Yt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return Ut(this.value, t.value);\n    }\n    /**\n     * Returns the map that contains the leaf element of `path`. If the parent\n     * entry does not yet exist, or if it is not a map, a new map will be created.\n     */\n\n  }, {\n    key: \"getFieldsMap\",\n    value: function getFieldsMap(t) {\n      var e = this.value;\n      e.mapValue.fields || (e.mapValue = {\n        fields: {}\n      });\n\n      for (var n = 0; n < t.length; ++n) {\n        var r = e.mapValue.fields[t.get(n)];\n        Yt(r) && r.mapValue.fields || (r = {\n          mapValue: {\n            fields: {}\n          }\n        }, e.mapValue.fields[t.get(n)] = r), e = r;\n      }\n\n      return e.mapValue.fields;\n    }\n    /**\n     * Modifies `fieldsMap` by adding, replacing or deleting the specified\n     * entries.\n     */\n\n  }, {\n    key: \"applyChanges\",\n    value: function applyChanges(t, e, n) {\n      Tt(e, function (e, n) {\n        return t[e] = n;\n      });\n\n      var _iterator4 = _createForOfIteratorHelper(n),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _e10 = _step4.value;\n          delete t[_e10];\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new Jt(Ht(this.value));\n    }\n  }], [{\n    key: \"empty\",\n    value: function empty() {\n      return new Jt({\n        mapValue: {}\n      });\n    }\n  }]);\n\n  return Jt;\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */\n\n\nvar Xt = /*#__PURE__*/function () {\n  function Xt(t, e, n, r, s, i) {\n    _classCallCheck(this, Xt);\n\n    this.key = t, this.documentType = e, this.version = n, this.readTime = r, this.data = s, this.documentState = i;\n  }\n  /**\n   * Creates a document with no known version or data, but which can serve as\n   * base document for mutations.\n   */\n\n\n  _createClass(Xt, [{\n    key: \"convertToFoundDocument\",\n\n    /**\n     * Changes the document type to indicate that it exists and that its version\n     * and data are known.\n     */\n    value: function convertToFoundDocument(t, e) {\n      return this.version = t, this.documentType = 1\n      /* FOUND_DOCUMENT */\n      , this.data = e, this.documentState = 0\n      /* SYNCED */\n      , this;\n    }\n    /**\n     * Changes the document type to indicate that it doesn't exist at the given\n     * version.\n     */\n\n  }, {\n    key: \"convertToNoDocument\",\n    value: function convertToNoDocument(t) {\n      return this.version = t, this.documentType = 2\n      /* NO_DOCUMENT */\n      , this.data = Jt.empty(), this.documentState = 0\n      /* SYNCED */\n      , this;\n    }\n    /**\n     * Changes the document type to indicate that it exists at a given version but\n     * that its data is not known (e.g. a document that was updated without a known\n     * base document).\n     */\n\n  }, {\n    key: \"convertToUnknownDocument\",\n    value: function convertToUnknownDocument(t) {\n      return this.version = t, this.documentType = 3\n      /* UNKNOWN_DOCUMENT */\n      , this.data = Jt.empty(), this.documentState = 2\n      /* HAS_COMMITTED_MUTATIONS */\n      , this;\n    }\n  }, {\n    key: \"setHasCommittedMutations\",\n    value: function setHasCommittedMutations() {\n      return this.documentState = 2\n      /* HAS_COMMITTED_MUTATIONS */\n      , this;\n    }\n  }, {\n    key: \"setHasLocalMutations\",\n    value: function setHasLocalMutations() {\n      return this.documentState = 1\n      /* HAS_LOCAL_MUTATIONS */\n      , this.version = Et.min(), this;\n    }\n  }, {\n    key: \"setReadTime\",\n    value: function setReadTime(t) {\n      return this.readTime = t, this;\n    }\n  }, {\n    key: \"isValidDocument\",\n    value: function isValidDocument() {\n      return 0\n      /* INVALID */\n      !== this.documentType;\n    }\n  }, {\n    key: \"isFoundDocument\",\n    value: function isFoundDocument() {\n      return 1\n      /* FOUND_DOCUMENT */\n      === this.documentType;\n    }\n  }, {\n    key: \"isNoDocument\",\n    value: function isNoDocument() {\n      return 2\n      /* NO_DOCUMENT */\n      === this.documentType;\n    }\n  }, {\n    key: \"isUnknownDocument\",\n    value: function isUnknownDocument() {\n      return 3\n      /* UNKNOWN_DOCUMENT */\n      === this.documentType;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return t instanceof Xt && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n    }\n  }, {\n    key: \"mutableCopy\",\n    value: function mutableCopy() {\n      return new Xt(this.key, this.documentType, this.version, this.readTime, this.data.clone(), this.documentState);\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Document(\".concat(this.key, \", \").concat(this.version, \", \").concat(JSON.stringify(this.data.value), \", {documentType: \").concat(this.documentType, \"}), {documentState: \").concat(this.documentState, \"})\");\n    }\n  }, {\n    key: \"hasLocalMutations\",\n    get: function get() {\n      return 1\n      /* HAS_LOCAL_MUTATIONS */\n      === this.documentState;\n    }\n  }, {\n    key: \"hasCommittedMutations\",\n    get: function get() {\n      return 2\n      /* HAS_COMMITTED_MUTATIONS */\n      === this.documentState;\n    }\n  }, {\n    key: \"hasPendingWrites\",\n    get: function get() {\n      return this.hasLocalMutations || this.hasCommittedMutations;\n    }\n  }], [{\n    key: \"newInvalidDocument\",\n    value: function newInvalidDocument(t) {\n      return new Xt(t, 0\n      /* INVALID */\n      , Et.min(), Et.min(), Jt.empty(), 0\n      /* SYNCED */\n      );\n    }\n    /**\n     * Creates a new document that is known to exist with the given data at the\n     * given version.\n     */\n\n  }, {\n    key: \"newFoundDocument\",\n    value: function newFoundDocument(t, e, n) {\n      return new Xt(t, 1\n      /* FOUND_DOCUMENT */\n      , e, Et.min(), n, 0\n      /* SYNCED */\n      );\n    }\n    /** Creates a new document that is known to not exist at the given version. */\n\n  }, {\n    key: \"newNoDocument\",\n    value: function newNoDocument(t, e) {\n      return new Xt(t, 2\n      /* NO_DOCUMENT */\n      , e, Et.min(), Jt.empty(), 0\n      /* SYNCED */\n      );\n    }\n    /**\n     * Creates a new document that is known to exist at the given version but\n     * whose data is not known (e.g. a document that was updated without a known\n     * base document).\n     */\n\n  }, {\n    key: \"newUnknownDocument\",\n    value: function newUnknownDocument(t, e) {\n      return new Xt(t, 3\n      /* UNKNOWN_DOCUMENT */\n      , e, Et.min(), Jt.empty(), 2\n      /* HAS_COMMITTED_MUTATIONS */\n      );\n    }\n  }]);\n\n  return Xt;\n}();\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\n\n\nvar Zt = function Zt(t) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n\n  _classCallCheck(this, Zt);\n\n  this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = s, this.startAt = i, this.endAt = o, this.D = null;\n};\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */\n\n\nfunction te(t) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n  return new Zt(t, e, n, r, s, i, o);\n}\n\nvar ee = /*#__PURE__*/function (_ref2) {\n  _inherits(ee, _ref2);\n\n  function ee(t, e, n) {\n    var _this10;\n\n    _classCallCheck(this, ee);\n\n    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(ee).call(this)), _this10.field = t, _this10.op = e, _this10.value = n;\n    return _this10;\n  }\n  /**\n   * Creates a filter based on the provided arguments.\n   */\n\n\n  _createClass(ee, [{\n    key: \"matches\",\n    value: function matches(t) {\n      var e = t.data.field(this.field); // Types do not have to match in NOT_EQUAL filters.\n\n      return \"!=\"\n      /* NOT_EQUAL */\n      === this.op ? null !== e && this.S(Bt(e, this.value)) : null !== e && Mt(this.value) === Mt(e) && this.S(Bt(e, this.value)); // Only compare types with matching backend order (such as double and int).\n    }\n  }, {\n    key: \"S\",\n    value: function S(t) {\n      switch (this.op) {\n        case \"<\"\n        /* LESS_THAN */\n        :\n          return t < 0;\n\n        case \"<=\"\n        /* LESS_THAN_OR_EQUAL */\n        :\n          return t <= 0;\n\n        case \"==\"\n        /* EQUAL */\n        :\n          return 0 === t;\n\n        case \"!=\"\n        /* NOT_EQUAL */\n        :\n          return 0 !== t;\n\n        case \">\"\n        /* GREATER_THAN */\n        :\n          return t > 0;\n\n        case \">=\"\n        /* GREATER_THAN_OR_EQUAL */\n        :\n          return t >= 0;\n\n        default:\n          return b();\n      }\n    }\n  }, {\n    key: \"q\",\n    value: function q() {\n      return [\"<\"\n      /* LESS_THAN */\n      , \"<=\"\n      /* LESS_THAN_OR_EQUAL */\n      , \">\"\n      /* GREATER_THAN */\n      , \">=\"\n      /* GREATER_THAN_OR_EQUAL */\n      , \"!=\"\n      /* NOT_EQUAL */\n      , \"not-in\"\n      /* NOT_IN */\n      ].indexOf(this.op) >= 0;\n    }\n  }], [{\n    key: \"create\",\n    value: function create(t, e, n) {\n      return t.isKeyField() ? \"in\"\n      /* IN */\n      === e || \"not-in\"\n      /* NOT_IN */\n      === e ? this.F(t, e, n) : new ne(t, e, n) : \"array-contains\"\n      /* ARRAY_CONTAINS */\n      === e ? new oe(t, n) : \"in\"\n      /* IN */\n      === e ? new ue(t, n) : \"not-in\"\n      /* NOT_IN */\n      === e ? new ce(t, n) : \"array-contains-any\"\n      /* ARRAY_CONTAINS_ANY */\n      === e ? new ae(t, n) : new ee(t, e, n);\n    }\n  }, {\n    key: \"F\",\n    value: function F(t, e, n) {\n      return \"in\"\n      /* IN */\n      === e ? new re(t, n) : new se(t, n);\n    }\n  }]);\n\n  return ee;\n}( /*#__PURE__*/function () {\n  function _class3() {\n    _classCallCheck(this, _class3);\n  }\n\n  return _class3;\n}());\n/** Filter that matches on key fields (i.e. '__name__'). */\n\n\nvar ne = /*#__PURE__*/function (_ee) {\n  _inherits(ne, _ee);\n\n  function ne(t, e, n) {\n    var _this11;\n\n    _classCallCheck(this, ne);\n\n    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(ne).call(this, t, e, n)), _this11.key = rt.fromName(n.referenceValue);\n    return _this11;\n  }\n\n  _createClass(ne, [{\n    key: \"matches\",\n    value: function matches(t) {\n      var e = rt.comparator(t.key, this.key);\n      return this.S(e);\n    }\n  }]);\n\n  return ne;\n}(ee);\n/** Filter that matches on key fields within an array. */\n\n\nvar re = /*#__PURE__*/function (_ee2) {\n  _inherits(re, _ee2);\n\n  function re(t, e) {\n    var _this12;\n\n    _classCallCheck(this, re);\n\n    _this12 = _possibleConstructorReturn(this, _getPrototypeOf(re).call(this, t, \"in\"\n    /* IN */\n    , e)), _this12.keys = ie(\"in\"\n    /* IN */\n    , e);\n    return _this12;\n  }\n\n  _createClass(re, [{\n    key: \"matches\",\n    value: function matches(t) {\n      return this.keys.some(function (e) {\n        return e.isEqual(t.key);\n      });\n    }\n  }]);\n\n  return re;\n}(ee);\n/** Filter that matches on key fields not present within an array. */\n\n\nvar se = /*#__PURE__*/function (_ee3) {\n  _inherits(se, _ee3);\n\n  function se(t, e) {\n    var _this13;\n\n    _classCallCheck(this, se);\n\n    _this13 = _possibleConstructorReturn(this, _getPrototypeOf(se).call(this, t, \"not-in\"\n    /* NOT_IN */\n    , e)), _this13.keys = ie(\"not-in\"\n    /* NOT_IN */\n    , e);\n    return _this13;\n  }\n\n  _createClass(se, [{\n    key: \"matches\",\n    value: function matches(t) {\n      return !this.keys.some(function (e) {\n        return e.isEqual(t.key);\n      });\n    }\n  }]);\n\n  return se;\n}(ee);\n\nfunction ie(t, e) {\n  var n;\n  return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map(function (t) {\n    return rt.fromName(t.referenceValue);\n  });\n}\n/** A Filter that implements the array-contains operator. */\n\n\nvar oe = /*#__PURE__*/function (_ee4) {\n  _inherits(oe, _ee4);\n\n  function oe(t, e) {\n    _classCallCheck(this, oe);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(oe).call(this, t, \"array-contains\"\n    /* ARRAY_CONTAINS */\n    , e));\n  }\n\n  _createClass(oe, [{\n    key: \"matches\",\n    value: function matches(t) {\n      var e = t.data.field(this.field);\n      return Gt(e) && jt(e.arrayValue, this.value);\n    }\n  }]);\n\n  return oe;\n}(ee);\n/** A Filter that implements the IN operator. */\n\n\nvar ue = /*#__PURE__*/function (_ee5) {\n  _inherits(ue, _ee5);\n\n  function ue(t, e) {\n    _classCallCheck(this, ue);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ue).call(this, t, \"in\"\n    /* IN */\n    , e));\n  }\n\n  _createClass(ue, [{\n    key: \"matches\",\n    value: function matches(t) {\n      var e = t.data.field(this.field);\n      return null !== e && jt(this.value.arrayValue, e);\n    }\n  }]);\n\n  return ue;\n}(ee);\n/** A Filter that implements the not-in operator. */\n\n\nvar ce = /*#__PURE__*/function (_ee6) {\n  _inherits(ce, _ee6);\n\n  function ce(t, e) {\n    _classCallCheck(this, ce);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ce).call(this, t, \"not-in\"\n    /* NOT_IN */\n    , e));\n  }\n\n  _createClass(ce, [{\n    key: \"matches\",\n    value: function matches(t) {\n      if (jt(this.value.arrayValue, {\n        nullValue: \"NULL_VALUE\"\n      })) return !1;\n      var e = t.data.field(this.field);\n      return null !== e && !jt(this.value.arrayValue, e);\n    }\n  }]);\n\n  return ce;\n}(ee);\n/** A Filter that implements the array-contains-any operator. */\n\n\nvar ae = /*#__PURE__*/function (_ee7) {\n  _inherits(ae, _ee7);\n\n  function ae(t, e) {\n    _classCallCheck(this, ae);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ae).call(this, t, \"array-contains-any\"\n    /* ARRAY_CONTAINS_ANY */\n    , e));\n  }\n\n  _createClass(ae, [{\n    key: \"matches\",\n    value: function matches(t) {\n      var _this14 = this;\n\n      var e = t.data.field(this.field);\n      return !(!Gt(e) || !e.arrayValue.values) && e.arrayValue.values.some(function (t) {\n        return jt(_this14.value.arrayValue, t);\n      });\n    }\n  }]);\n\n  return ae;\n}(ee);\n/**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */\n\n\nvar he = function he(t, e) {\n  _classCallCheck(this, he);\n\n  this.position = t, this.inclusive = e;\n};\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */\n\n\nvar le = function le(t) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"asc\";\n\n  _classCallCheck(this, le);\n\n  this.field = t, this.dir = e;\n};\n\nfunction fe(t, e) {\n  return t.dir === e.dir && t.field.isEqual(e.field);\n}\n\nfunction de(t, e) {\n  if (null === t) return null === e;\n  if (null === e) return !1;\n  if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n\n  for (var n = 0; n < t.position.length; n++) {\n    if (!Ut(t.position[n], e.position[n])) return !1;\n  }\n\n  return !0;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\n\n\nvar we =\n/**\n * Initializes a Query with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n */\nfunction we(t) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n  var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : \"F\";\n  var o = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n  var u = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n\n  _classCallCheck(this, we);\n\n  this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = r, this.limit = s, this.limitType = i, this.startAt = o, this.endAt = u, this.O = null, // The corresponding `Target` of this `Query` instance.\n  this.k = null, this.startAt, this.endAt;\n};\n/** Creates a new Query for a query that matches all documents at `path` */\n\n\nfunction me(t) {\n  return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;\n}\n\nfunction pe(t) {\n  var _iterator5 = _createForOfIteratorHelper(t.filters),\n      _step5;\n\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var e = _step5.value;\n      if (e.q()) return e.field;\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n\n  return null;\n}\n/**\n * Checks if any of the provided Operators are included in the query and\n * returns the first one that is, or null if none are.\n */\n\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\n\n\nfunction ye(t) {\n  return null !== t.collectionGroup;\n}\n/**\n * Returns the implicit order by constraint that is used to execute the Query,\n * which can be different from the order by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`).\n */\n\n\nfunction _e(t) {\n  var e = I(t);\n\n  if (null === e.O) {\n    e.O = [];\n\n    var _t12 = pe(e),\n        n = me(e);\n\n    if (null !== _t12 && null === n) // In order to implicitly add key ordering, we must also add the\n      // inequality filter field for it to be a valid query.\n      // Note that the default inequality field and key ordering is ascending.\n      _t12.isKeyField() || e.O.push(new le(_t12)), e.O.push(new le(nt.keyField(), \"asc\"\n      /* ASCENDING */\n      ));else {\n      var _t13 = !1;\n\n      var _iterator6 = _createForOfIteratorHelper(e.explicitOrderBy),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _n4 = _step6.value;\n          e.O.push(_n4), _n4.field.isKeyField() && (_t13 = !0);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      if (!_t13) {\n        // The order of the implicit key ordering always matches the last\n        // explicit order by\n        var _t14 = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\"\n        /* ASCENDING */\n        ;\n\n        e.O.push(new le(nt.keyField(), _t14));\n      }\n    }\n  }\n\n  return e.O;\n}\n/**\n * Converts this `Query` instance to it's corresponding `Target` representation.\n */\n\n\nfunction ge(t) {\n  var e = I(t);\n  if (!e.k) if (\"F\"\n  /* First */\n  === e.limitType) e.k = te(e.path, e.collectionGroup, _e(e), e.filters, e.limit, e.startAt, e.endAt);else {\n    // Flip the orderBy directions since we want the last results\n    var _t15 = [];\n\n    var _iterator7 = _createForOfIteratorHelper(_e(e)),\n        _step7;\n\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        var _n5 = _step7.value;\n\n        var _e11 = \"desc\"\n        /* DESCENDING */\n        === _n5.dir ? \"asc\"\n        /* ASCENDING */\n        : \"desc\"\n        /* DESCENDING */\n        ;\n\n        _t15.push(new le(_n5.field, _e11));\n      } // We need to swap the cursors to match the now-flipped query ordering.\n\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n\n    var n = e.endAt ? new he(e.endAt.position, e.endAt.inclusive) : null,\n        r = e.startAt ? new he(e.startAt.position, e.startAt.inclusive) : null; // Now return as a LimitType.First query.\n\n    e.k = te(e.path, e.collectionGroup, _t15, e.filters, e.limit, n, r);\n  }\n  return e.k;\n}\n\nfunction ve(t, e) {\n  return function (t, e) {\n    if (t.limit !== e.limit) return !1;\n    if (t.orderBy.length !== e.orderBy.length) return !1;\n\n    for (var _n6 = 0; _n6 < t.orderBy.length; _n6++) {\n      if (!fe(t.orderBy[_n6], e.orderBy[_n6])) return !1;\n    }\n\n    if (t.filters.length !== e.filters.length) return !1;\n\n    for (var s = 0; s < t.filters.length; s++) {\n      if (n = t.filters[s], r = e.filters[s], n.op !== r.op || !n.field.isEqual(r.field) || !Ut(n.value, r.value)) return !1;\n    }\n\n    var n, r;\n    return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!de(t.startAt, e.startAt) && de(t.endAt, e.endAt);\n  }(ge(t), ge(e)) && t.limitType === e.limitType;\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\n\n\nfunction be(t, e) {\n  return function (t) {\n    return \"number\" == typeof t && Number.isInteger(t) && !lt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n  }(e) ?\n  /**\n  * Returns an IntegerValue for `value`.\n  */\n  function (t) {\n    return {\n      integerValue: \"\" + t\n    };\n  }(e) : function (t, e) {\n    if (t.C) {\n      if (isNaN(e)) return {\n        doubleValue: \"NaN\"\n      };\n      if (e === 1 / 0) return {\n        doubleValue: \"Infinity\"\n      };\n      if (e === -1 / 0) return {\n        doubleValue: \"-Infinity\"\n      };\n    }\n\n    return {\n      doubleValue: lt(e) ? \"-0\" : e\n    };\n  }(t, e);\n}\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Used to represent a field transform on a mutation. */\n\n\nvar Ee = function Ee() {\n  _classCallCheck(this, Ee);\n\n  // Make sure that the structural type of `TransformOperation` is unique.\n  // See https://github.com/microsoft/TypeScript/issues/5451\n  this._ = void 0;\n};\n/** Transforms a value into a server-generated timestamp. */\n\n\nvar Ie = /*#__PURE__*/function (_Ee) {\n  _inherits(Ie, _Ee);\n\n  function Ie() {\n    _classCallCheck(this, Ie);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Ie).apply(this, arguments));\n  }\n\n  return Ie;\n}(Ee);\n/** Transforms an array value via a union operation. */\n\n\nvar Te = /*#__PURE__*/function (_Ee2) {\n  _inherits(Te, _Ee2);\n\n  function Te(t) {\n    var _this15;\n\n    _classCallCheck(this, Te);\n\n    _this15 = _possibleConstructorReturn(this, _getPrototypeOf(Te).call(this)), _this15.elements = t;\n    return _this15;\n  }\n\n  return Te;\n}(Ee);\n/** Transforms an array value via a remove operation. */\n\n\nvar Ae = /*#__PURE__*/function (_Ee3) {\n  _inherits(Ae, _Ee3);\n\n  function Ae(t) {\n    var _this16;\n\n    _classCallCheck(this, Ae);\n\n    _this16 = _possibleConstructorReturn(this, _getPrototypeOf(Ae).call(this)), _this16.elements = t;\n    return _this16;\n  }\n\n  return Ae;\n}(Ee);\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */\n\n\nvar Re = /*#__PURE__*/function (_Ee4) {\n  _inherits(Re, _Ee4);\n\n  function Re(t, e) {\n    var _this17;\n\n    _classCallCheck(this, Re);\n\n    _this17 = _possibleConstructorReturn(this, _getPrototypeOf(Re).call(this)), _this17.L = t, _this17.M = e;\n    return _this17;\n  }\n\n  return Re;\n}(Ee);\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** A field path and the TransformOperation to perform upon it. */\n\n\nvar Pe = function Pe(t, e) {\n  _classCallCheck(this, Pe);\n\n  this.field = t, this.transform = e;\n};\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */\n\n\nvar Ve = /*#__PURE__*/function () {\n  function Ve(t, e) {\n    _classCallCheck(this, Ve);\n\n    this.updateTime = t, this.exists = e;\n  }\n  /** Creates a new empty Precondition. */\n\n\n  _createClass(Ve, [{\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n    }\n  }, {\n    key: \"isNone\",\n\n    /** Returns whether this Precondition is empty. */\n    get: function get() {\n      return void 0 === this.updateTime && void 0 === this.exists;\n    }\n  }], [{\n    key: \"none\",\n    value: function none() {\n      return new Ve();\n    }\n    /** Creates a new Precondition with an exists flag. */\n\n  }, {\n    key: \"exists\",\n    value: function exists(t) {\n      return new Ve(void 0, t);\n    }\n    /** Creates a new Precondition based on a version a document exists at. */\n\n  }, {\n    key: \"updateTime\",\n    value: function updateTime(t) {\n      return new Ve(t);\n    }\n  }]);\n\n  return Ve;\n}();\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */\n\n\nvar Ne = function Ne() {\n  _classCallCheck(this, Ne);\n};\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */\n\n\nvar $e = /*#__PURE__*/function (_Ne) {\n  _inherits($e, _Ne);\n\n  function $e(t, e, n) {\n    var _this18;\n\n    var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n\n    _classCallCheck(this, $e);\n\n    _this18 = _possibleConstructorReturn(this, _getPrototypeOf($e).call(this)), _this18.key = t, _this18.value = e, _this18.precondition = n, _this18.fieldTransforms = r, _this18.type = 0\n    /* Set */\n    ;\n    return _this18;\n  }\n\n  _createClass($e, [{\n    key: \"getFieldMask\",\n    value: function getFieldMask() {\n      return null;\n    }\n  }]);\n\n  return $e;\n}(Ne);\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */\n\n\nvar De = /*#__PURE__*/function (_Ne2) {\n  _inherits(De, _Ne2);\n\n  function De(t, e, n, r) {\n    var _this19;\n\n    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];\n\n    _classCallCheck(this, De);\n\n    _this19 = _possibleConstructorReturn(this, _getPrototypeOf(De).call(this)), _this19.key = t, _this19.data = e, _this19.fieldMask = n, _this19.precondition = r, _this19.fieldTransforms = s, _this19.type = 1\n    /* Patch */\n    ;\n    return _this19;\n  }\n\n  _createClass(De, [{\n    key: \"getFieldMask\",\n    value: function getFieldMask() {\n      return this.fieldMask;\n    }\n  }]);\n\n  return De;\n}(Ne);\n/** A mutation that deletes the document at the given key. */\n\n\nvar xe = /*#__PURE__*/function (_Ne3) {\n  _inherits(xe, _Ne3);\n\n  function xe(t, e) {\n    var _this20;\n\n    _classCallCheck(this, xe);\n\n    _this20 = _possibleConstructorReturn(this, _getPrototypeOf(xe).call(this)), _this20.key = t, _this20.precondition = e, _this20.type = 2\n    /* Delete */\n    , _this20.fieldTransforms = [];\n    return _this20;\n  }\n\n  _createClass(xe, [{\n    key: \"getFieldMask\",\n    value: function getFieldMask() {\n      return null;\n    }\n  }]);\n\n  return xe;\n}(Ne);\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */\n\n\nvar Fe = /*#__PURE__*/function (_Ne4) {\n  _inherits(Fe, _Ne4);\n\n  function Fe(t, e) {\n    var _this21;\n\n    _classCallCheck(this, Fe);\n\n    _this21 = _possibleConstructorReturn(this, _getPrototypeOf(Fe).call(this)), _this21.key = t, _this21.precondition = e, _this21.type = 3\n    /* Verify */\n    , _this21.fieldTransforms = [];\n    return _this21;\n  }\n\n  _createClass(Fe, [{\n    key: \"getFieldMask\",\n    value: function getFieldMask() {\n      return null;\n    }\n  }]);\n\n  return Fe;\n}(Ne);\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar Se = function () {\n  var t = {\n    asc: \"ASCENDING\",\n    desc: \"DESCENDING\"\n  };\n  return t;\n}(),\n    qe = function () {\n  var t = {\n    \"<\": \"LESS_THAN\",\n    \"<=\": \"LESS_THAN_OR_EQUAL\",\n    \">\": \"GREATER_THAN\",\n    \">=\": \"GREATER_THAN_OR_EQUAL\",\n    \"==\": \"EQUAL\",\n    \"!=\": \"NOT_EQUAL\",\n    \"array-contains\": \"ARRAY_CONTAINS\",\n    in: \"IN\",\n    \"not-in\": \"NOT_IN\",\n    \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n  };\n  return t;\n}();\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\n\n\nvar Oe = function Oe(t, e) {\n  _classCallCheck(this, Oe);\n\n  this.databaseId = t, this.C = e;\n};\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\n\n\nfunction ke(t, e) {\n  if (t.C) {\n    return \"\".concat(new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\"), \".\").concat((\"000000000\" + e.nanoseconds).slice(-9), \"Z\");\n  }\n\n  return {\n    seconds: \"\" + e.seconds,\n    nanos: e.nanoseconds\n  };\n}\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\n\n\nfunction Ce(t, e) {\n  return t.C ? e.toBase64() : e.toUint8Array();\n}\n\nfunction Le(t, e) {\n  return ke(t, e.toTimestamp());\n}\n\nfunction Me(t) {\n  return E(!!t), Et.fromTimestamp(function (t) {\n    var e = Ft(t);\n    return new bt(e.seconds, e.nanos);\n  }(t));\n}\n\nfunction Ue(t, e) {\n  return function (t) {\n    return new tt([\"projects\", t.projectId, \"databases\", t.database]);\n  }(t).child(\"documents\").child(e).canonicalString();\n}\n\nfunction je(t, e) {\n  return Ue(t.databaseId, e.path);\n}\n\nfunction Be(t, e) {\n  var n = function (t) {\n    var e = tt.fromString(t);\n    return E(tn(e)), e;\n  }(e);\n\n  if (n.get(1) !== t.databaseId.projectId) throw new U(P, \"Tried to deserialize key from different project: \" + n.get(1) + \" vs \" + t.databaseId.projectId);\n  if (n.get(3) !== t.databaseId.database) throw new U(P, \"Tried to deserialize key from different database: \" + n.get(3) + \" vs \" + t.databaseId.database);\n  return new rt((E((r = n).length > 4 && \"documents\" === r.get(4)), r.popFirst(5)));\n  var r;\n  /** Creates a Document proto from key and fields (but no create/update time) */\n}\n\nfunction Qe(t, e) {\n  return Ue(t.databaseId, e);\n}\n\nfunction ze(t) {\n  return new tt([\"projects\", t.databaseId.projectId, \"databases\", t.databaseId.database]).canonicalString();\n}\n\nfunction Ge(t, e, n) {\n  return {\n    name: je(t, e),\n    fields: n.value.mapValue.fields\n  };\n}\n\nfunction We(t, e) {\n  return \"found\" in e ? function (t, e) {\n    E(!!e.found), e.found.name, e.found.updateTime;\n    var n = Be(t, e.found.name),\n        r = Me(e.found.updateTime),\n        s = new Jt({\n      mapValue: {\n        fields: e.found.fields\n      }\n    });\n    return Xt.newFoundDocument(n, r, s);\n  }(t, e) : \"missing\" in e ? function (t, e) {\n    E(!!e.missing), E(!!e.readTime);\n    var n = Be(t, e.missing),\n        r = Me(e.readTime);\n    return Xt.newNoDocument(n, r);\n  }(t, e) : b();\n}\n\nfunction Ke(t, e) {\n  var n;\n  if (e instanceof $e) n = {\n    update: Ge(t, e.key, e.value)\n  };else if (e instanceof xe) n = {\n    delete: je(t, e.key)\n  };else if (e instanceof De) n = {\n    update: Ge(t, e.key, e.data),\n    updateMask: Ze(e.fieldMask)\n  };else {\n    if (!(e instanceof Fe)) return b();\n    n = {\n      verify: je(t, e.key)\n    };\n  }\n  return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map(function (t) {\n    return function (t, e) {\n      var n = e.transform;\n      if (n instanceof Ie) return {\n        fieldPath: e.field.canonicalString(),\n        setToServerValue: \"REQUEST_TIME\"\n      };\n      if (n instanceof Te) return {\n        fieldPath: e.field.canonicalString(),\n        appendMissingElements: {\n          values: n.elements\n        }\n      };\n      if (n instanceof Ae) return {\n        fieldPath: e.field.canonicalString(),\n        removeAllFromArray: {\n          values: n.elements\n        }\n      };\n      if (n instanceof Re) return {\n        fieldPath: e.field.canonicalString(),\n        increment: n.M\n      };\n      throw b();\n    }(0, t);\n  })), e.precondition.isNone || (n.currentDocument = function (t, e) {\n    return void 0 !== e.updateTime ? {\n      updateTime: Le(t, e.updateTime)\n    } : void 0 !== e.exists ? {\n      exists: e.exists\n    } : b();\n  }(t, e.precondition)), n;\n}\n\nfunction Ye(t, e) {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  var n = {\n    structuredQuery: {}\n  },\n      r = e.path;\n  null !== e.collectionGroup ? (n.parent = Qe(t, r), n.structuredQuery.from = [{\n    collectionId: e.collectionGroup,\n    allDescendants: !0\n  }]) : (n.parent = Qe(t, r.popLast()), n.structuredQuery.from = [{\n    collectionId: r.lastSegment()\n  }]);\n\n  var s = function (t) {\n    if (0 === t.length) return;\n    var e = t.map(function (t) {\n      return (// visible for testing\n        function (t) {\n          if (\"==\"\n          /* EQUAL */\n          === t.op) {\n            if (Kt(t.value)) return {\n              unaryFilter: {\n                field: Xe(t.field),\n                op: \"IS_NAN\"\n              }\n            };\n            if (Wt(t.value)) return {\n              unaryFilter: {\n                field: Xe(t.field),\n                op: \"IS_NULL\"\n              }\n            };\n          } else if (\"!=\"\n          /* NOT_EQUAL */\n          === t.op) {\n            if (Kt(t.value)) return {\n              unaryFilter: {\n                field: Xe(t.field),\n                op: \"IS_NOT_NAN\"\n              }\n            };\n            if (Wt(t.value)) return {\n              unaryFilter: {\n                field: Xe(t.field),\n                op: \"IS_NOT_NULL\"\n              }\n            };\n          }\n\n          return {\n            fieldFilter: {\n              field: Xe(t.field),\n              op: Je(t.op),\n              value: t.value\n            }\n          };\n        }(t)\n      );\n    });\n    if (1 === e.length) return e[0];\n    return {\n      compositeFilter: {\n        op: \"AND\",\n        filters: e\n      }\n    };\n  }(e.filters);\n\n  s && (n.structuredQuery.where = s);\n\n  var i = function (t) {\n    if (0 === t.length) return;\n    return t.map(function (t) {\n      return (// visible for testing\n        function (t) {\n          return {\n            field: Xe(t.field),\n            direction: He(t.dir)\n          };\n        }(t)\n      );\n    });\n  }(e.orderBy);\n\n  i && (n.structuredQuery.orderBy = i);\n\n  var o = function (t, e) {\n    return t.C || ht(e) ? e : {\n      value: e\n    };\n  }(t, e.limit);\n\n  var u;\n  return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {\n    before: (u = e.startAt).inclusive,\n    values: u.position\n  }), e.endAt && (n.structuredQuery.endAt = function (t) {\n    return {\n      before: !t.inclusive,\n      values: t.position\n    };\n  } // visible for testing\n  (e.endAt)), n;\n}\n\nfunction He(t) {\n  return Se[t];\n} // visible for testing\n\n\nfunction Je(t) {\n  return qe[t];\n}\n\nfunction Xe(t) {\n  return {\n    fieldPath: t.canonicalString()\n  };\n}\n\nfunction Ze(t) {\n  var e = [];\n  return t.fields.forEach(function (t) {\n    return e.push(t.canonicalString());\n  }), {\n    fieldPaths: e\n  };\n}\n\nfunction tn(t) {\n  // Resource names have at least 4 components (project ID, database ID)\n  return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction en(t) {\n  return new Oe(t,\n  /* useProto3Json= */\n  !0);\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\n\n\nvar nn = /*#__PURE__*/function () {\n  function nn(\n  /**\n   * The AsyncQueue to run backoff operations on.\n   */\n  t,\n  /**\n   * The ID to use when scheduling backoff operations on the AsyncQueue.\n   */\n  e) {\n    var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1e3;\n    var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.5;\n    var s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 6e4;\n\n    _classCallCheck(this, nn);\n\n    this.U = t, this.timerId = e, this.j = n, this.B = r, this.G = s, this.W = 0, this.K = null,\n    /** The last backoff attempt, as epoch milliseconds. */\n    this.Y = Date.now(), this.reset();\n  }\n  /**\n   * Resets the backoff delay.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   */\n\n\n  _createClass(nn, [{\n    key: \"reset\",\n    value: function reset() {\n      this.W = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */\n\n  }, {\n    key: \"H\",\n    value: function H() {\n      this.W = this.G;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts. If there was a pending backoff operation\n     * already, it will be canceled.\n     */\n\n  }, {\n    key: \"J\",\n    value: function J(t) {\n      var _this22 = this;\n\n      // Cancel any pending backoff operation.\n      this.cancel(); // First schedule using the current base (which may be 0 and should be\n      // honored as such).\n\n      var e = Math.floor(this.W + this.X()),\n          n = Math.max(0, Date.now() - this.Y),\n          r = Math.max(0, e - n); // Guard against lastAttemptTime being in the future due to a clock change.\n\n      r > 0 && y(\"ExponentialBackoff\", \"Backing off for \".concat(r, \" ms (base delay: \").concat(this.W, \" ms, delay with jitter: \").concat(e, \" ms, last attempt: \").concat(n, \" ms ago)\")), this.K = this.U.enqueueAfterDelay(this.timerId, r, function () {\n        return _this22.Y = Date.now(), t();\n      }), // Apply backoff factor to determine next delay and ensure it is within\n      // bounds.\n      this.W *= this.B, this.W < this.j && (this.W = this.j), this.W > this.G && (this.W = this.G);\n    }\n  }, {\n    key: \"Z\",\n    value: function Z() {\n      null !== this.K && (this.K.skipDelay(), this.K = null);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      null !== this.K && (this.K.cancel(), this.K = null);\n    }\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n\n  }, {\n    key: \"X\",\n    value: function X() {\n      return (Math.random() - .5) * this.W;\n    }\n  }]);\n\n  return nn;\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\n\n\nvar rn = /*#__PURE__*/function (_ref3) {\n  _inherits(rn, _ref3);\n\n  function rn(t, e, n, r) {\n    var _this23;\n\n    _classCallCheck(this, rn);\n\n    _this23 = _possibleConstructorReturn(this, _getPrototypeOf(rn).call(this)), _this23.authCredentials = t, _this23.appCheckCredentials = e, _this23.connection = n, _this23.L = r, _this23.tt = !1;\n    return _this23;\n  }\n\n  _createClass(rn, [{\n    key: \"et\",\n    value: function et() {\n      if (this.tt) throw new U(S, \"The client has already been terminated.\");\n    }\n    /** Invokes the provided RPC with auth and AppCheck tokens. */\n\n  }, {\n    key: \"I\",\n    value: function I(t, e, n) {\n      var _this24 = this;\n\n      return this.et(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(function (_ref4) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n            r = _ref5[0],\n            s = _ref5[1];\n\n        return _this24.connection.I(t, e, n, r, s);\n      }).catch(function (t) {\n        throw \"FirebaseError\" === t.name ? (t.code === x && (_this24.authCredentials.invalidateToken(), _this24.appCheckCredentials.invalidateToken()), t) : new U(R, t.toString());\n      });\n    }\n    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */\n\n  }, {\n    key: \"P\",\n    value: function P(t, e, n, r) {\n      var _this25 = this;\n\n      return this.et(), Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(function (_ref6) {\n        var _ref7 = _slicedToArray(_ref6, 2),\n            s = _ref7[0],\n            i = _ref7[1];\n\n        return _this25.connection.P(t, e, n, s, i, r);\n      }).catch(function (t) {\n        throw \"FirebaseError\" === t.name ? (t.code === x && (_this25.authCredentials.invalidateToken(), _this25.appCheckCredentials.invalidateToken()), t) : new U(R, t.toString());\n      });\n    }\n  }, {\n    key: \"terminate\",\n    value: function terminate() {\n      this.tt = !0;\n    }\n  }]);\n\n  return rn;\n}( /*#__PURE__*/function () {\n  function _class4() {\n    _classCallCheck(this, _class4);\n  }\n\n  return _class4;\n}()); // TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\n\n\nfunction sn(_x5, _x6) {\n  return _sn.apply(this, arguments);\n}\n\nfunction _sn() {\n  _sn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(t, e) {\n    var n, r, s;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            n = I(t), r = ze(n.L) + \"/documents\", s = {\n              writes: e.map(function (t) {\n                return Ke(n.L, t);\n              })\n            };\n            _context7.next = 3;\n            return n.I(\"Commit\", r, s);\n\n          case 3:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _sn.apply(this, arguments);\n}\n\nfunction on(_x7, _x8) {\n  return _on.apply(this, arguments);\n}\n\nfunction _on() {\n  _on = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(t, e) {\n    var n, r, s, i, o, u;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            n = I(t);\n            r = ze(n.L) + \"/documents\";\n            s = {\n              documents: e.map(function (t) {\n                return je(n.L, t);\n              })\n            };\n            _context8.next = 5;\n            return n.P(\"BatchGetDocuments\", r, s, e.length);\n\n          case 5:\n            i = _context8.sent;\n            o = new Map();\n            i.forEach(function (t) {\n              var e = We(n.L, t);\n              o.set(e.key.toString(), e);\n            });\n            u = [];\n            return _context8.abrupt(\"return\", (e.forEach(function (t) {\n              var e = o.get(t.toString());\n              E(!!e), u.push(e);\n            }), u));\n\n          case 10:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _on.apply(this, arguments);\n}\n\nfunction un(_x9, _x10) {\n  return _un.apply(this, arguments);\n}\n\nfunction _un() {\n  _un = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(t, e) {\n    var n, r;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            n = I(t), r = Ye(n.L, ge(e));\n            _context9.next = 3;\n            return n.P(\"RunQuery\", r.parent, {\n              structuredQuery: r.structuredQuery\n            });\n\n          case 3:\n            return _context9.abrupt(\"return\", _context9.sent.filter(function (t) {\n              return !!t.document;\n            }).map(function (t) {\n              return function (t, e, n) {\n                var r = Be(t, e.name),\n                    s = Me(e.updateTime),\n                    i = new Jt({\n                  mapValue: {\n                    fields: e.fields\n                  }\n                }),\n                    o = Xt.newFoundDocument(r, s, i);\n                return n && o.setHasCommittedMutations(), n ? o.setHasCommittedMutations() : o;\n              }(n.L, t.document, void 0);\n            }));\n\n          case 4:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _un.apply(this, arguments);\n}\n\nfunction cn(_x11, _x12) {\n  return _cn.apply(this, arguments);\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nfunction _cn() {\n  _cn = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(t, e) {\n    var n, r, s;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            n = I(t), r = function (t, e) {\n              var n = Ye(t, e);\n              return {\n                structuredAggregationQuery: {\n                  aggregations: [{\n                    count: {},\n                    alias: \"count_alias\"\n                  }],\n                  structuredQuery: n.structuredQuery\n                },\n                parent: n.parent\n              };\n            }(n.L, ge(e)), s = r.parent;\n            n.connection.v || delete r.parent;\n            _context10.next = 4;\n            return n.P(\"RunAggregationQuery\", s, r,\n            /*expectedResponseCount=*/\n            1);\n\n          case 4:\n            return _context10.abrupt(\"return\", _context10.sent.filter(function (t) {\n              return !!t.result;\n            }).map(function (t) {\n              return t.result.aggregateFields;\n            }));\n\n          case 5:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _cn.apply(this, arguments);\n}\n\nvar an = new Map();\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\n\nfunction hn(t) {\n  if (t._terminated) throw new U(S, \"The client has already been terminated.\");\n\n  if (!an.has(t)) {\n    y(\"ComponentProvider\", \"Initializing Datastore\");\n\n    var i = function (t) {\n      return new pt(t, fetch.bind(null));\n    }((e = t._databaseId, n = t.app.options.appId || \"\", r = t._persistenceKey, s = t._freezeSettings(), new J(e, n, r, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams))),\n        o = en(t._databaseId),\n        u = function (t, e, n, r) {\n      return new rn(t, e, n, r);\n    }(t._authCredentials, t._appCheckCredentials, i, o);\n\n    an.set(t, u);\n  }\n\n  var e, n, r, s;\n  /**\n  * @license\n  * Copyright 2018 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n\n  return an.get(t);\n}\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\n\n\nvar ln = /*#__PURE__*/function () {\n  function ln(t) {\n    _classCallCheck(this, ln);\n\n    var e;\n\n    if (void 0 === t.host) {\n      if (void 0 !== t.ssl) throw new U(P, \"Can't provide ssl option if host option is not set\");\n      this.host = \"firestore.googleapis.com\", this.ssl = true;\n    } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n\n    if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040;else {\n      if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new U(P, \"cacheSizeBytes must be at least 1048576\");\n      this.cacheSizeBytes = t.cacheSizeBytes;\n    }\n    this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, this.useFetchStreams = !!t.useFetchStreams, function (t, e, n, r) {\n      if (!0 === e && !0 === r) throw new U(P, \"\".concat(t, \" and \").concat(n, \" cannot be used together.\"));\n    }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling);\n  }\n\n  _createClass(ln, [{\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n    }\n  }]);\n\n  return ln;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n */\n\n\nvar fn = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function fn(t, e, n, r) {\n    _classCallCheck(this, fn);\n\n    this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = n, this._app = r,\n    /**\n     * Whether it's a Firestore or Firestore Lite instance.\n     */\n    this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new ln({}), this._settingsFrozen = !1;\n  }\n  /**\n   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n   * instance.\n   */\n\n\n  _createClass(fn, [{\n    key: \"_setSettings\",\n    value: function _setSettings(t) {\n      if (this._settingsFrozen) throw new U(S, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n      this._settings = new ln(t), void 0 !== t.credentials && (this._authCredentials = function (t) {\n        if (!t) return new Q();\n\n        switch (t.type) {\n          case \"gapi\":\n            var e = t.client;\n            return new K(e, t.sessionIndex || \"0\", t.iamToken || null, t.authTokenFactory || null);\n\n          case \"provider\":\n            return t.client;\n\n          default:\n            throw new U(P, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n        }\n      }(t.credentials));\n    }\n  }, {\n    key: \"_getSettings\",\n    value: function _getSettings() {\n      return this._settings;\n    }\n  }, {\n    key: \"_freezeSettings\",\n    value: function _freezeSettings() {\n      return this._settingsFrozen = !0, this._settings;\n    }\n  }, {\n    key: \"_delete\",\n    value: function _delete() {\n      return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n    }\n    /** Returns a JSON-serializable representation of this `Firestore` instance. */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        app: this._app,\n        databaseId: this._databaseId,\n        settings: this._settings\n      };\n    }\n    /**\n     * Terminates all components used by this client. Subclasses can override\n     * this method to clean up their own dependencies, but must also call this\n     * method.\n     *\n     * Only ever called once.\n     */\n\n  }, {\n    key: \"_terminate\",\n    value: function _terminate() {\n      return function (t) {\n        var e = an.get(t);\n        e && (y(\"ComponentProvider\", \"Removing Datastore\"), an.delete(t), e.terminate());\n      }(this), Promise.resolve();\n    }\n  }, {\n    key: \"app\",\n    get: function get() {\n      if (!this._app) throw new U(S, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n      return this._app;\n    }\n  }, {\n    key: \"_initialized\",\n    get: function get() {\n      return this._settingsFrozen;\n    }\n  }, {\n    key: \"_terminated\",\n    get: function get() {\n      return void 0 !== this._terminateTask;\n    }\n  }]);\n\n  return fn;\n}();\n\nfunction dn(t, e, n) {\n  n || (n = \"(default)\");\n\n  var r = _getProvider(t, \"firestore/lite\");\n\n  if (r.isInitialized(n)) throw new U(S, \"Firestore can only be initialized once per app.\");\n  return r.initialize({\n    options: e,\n    instanceIdentifier: n\n  });\n}\n\nfunction wn(e, n) {\n  var r = \"object\" == typeof e ? e : getApp(),\n      s = \"string\" == typeof e ? e : n || \"(default)\",\n      i = _getProvider(r, \"firestore/lite\").getImmediate({\n    identifier: s\n  });\n\n  if (!i._initialized) {\n    var t = getDefaultEmulatorHostnameAndPort(\"firestore\");\n    t && mn.apply(void 0, [i].concat(_toConsumableArray(t)));\n  }\n\n  return i;\n}\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */\n\n\nfunction mn(t, e, n) {\n  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var s;\n\n  var i = (t = ct(t, fn))._getSettings();\n\n  if (\"firestore.googleapis.com\" !== i.host && i.host !== e && g(\"Host has been set in both settings() and useEmulator(), emulator host will be used\"), t._setSettings(Object.assign(Object.assign({}, i), {\n    host: \"\".concat(e, \":\").concat(n),\n    ssl: !1\n  })), r.mockUserToken) {\n    var _e12, _n7;\n\n    if (\"string\" == typeof r.mockUserToken) _e12 = r.mockUserToken, _n7 = d.MOCK_USER;else {\n      // Let createMockUserToken validate first (catches common mistakes like\n      // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n      _e12 = createMockUserToken(r.mockUserToken, null === (s = t._app) || void 0 === s ? void 0 : s.options.projectId);\n\n      var _i2 = r.mockUserToken.sub || r.mockUserToken.user_id;\n\n      if (!_i2) throw new U(P, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n      _n7 = new d(_i2);\n    }\n    t._authCredentials = new z(new B(_e12, _n7));\n  }\n}\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link (getFirestore:1)}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */\n\n\nfunction pn(t) {\n  return t = ct(t, fn), _removeServiceInstance(t.app, \"firestore/lite\"), t._delete();\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\nvar yn = function yn() {\n  _classCallCheck(this, yn);\n\n  /** A type string to uniquely identify instances of this class. */\n  this.type = \"AggregateField\";\n};\n/**\n * The results of executing an aggregation query.\n */\n\n\nvar _n = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function _n(t, e) {\n    _classCallCheck(this, _n);\n\n    this._data = e,\n    /** A type string to uniquely identify instances of this class. */\n    this.type = \"AggregateQuerySnapshot\", this.query = t;\n  }\n  /**\n   * Returns the results of the aggregations performed over the underlying\n   * query.\n   *\n   * The keys of the returned object will be the same as those of the\n   * `AggregateSpec` object specified to the aggregation method, and the values\n   * will be the corresponding aggregation result.\n   *\n   * @returns The results of the aggregations performed over the underlying\n   * query.\n   */\n\n\n  _createClass(_n, [{\n    key: \"data\",\n    value: function data() {\n      return this._data;\n    }\n  }]);\n\n  return _n;\n}();\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * CountQueryRunner encapsulates the logic needed to run the count aggregation\n * queries.\n */\n\n\nvar gn = /*#__PURE__*/function () {\n  function gn(t, e, n) {\n    _classCallCheck(this, gn);\n\n    this.query = t, this.datastore = e, this.userDataWriter = n;\n  }\n\n  _createClass(gn, [{\n    key: \"run\",\n    value: function run() {\n      var _this26 = this;\n\n      return cn(this.datastore, this.query._query).then(function (t) {\n        E(void 0 !== t[0]);\n        var e = Object.entries(t[0]).filter(function (_ref8) {\n          var _ref9 = _slicedToArray(_ref8, 2),\n              t = _ref9[0],\n              e = _ref9[1];\n\n          return \"count_alias\" === t;\n        }).map(function (_ref10) {\n          var _ref11 = _slicedToArray(_ref10, 2),\n              t = _ref11[0],\n              e = _ref11[1];\n\n          return _this26.userDataWriter.convertValue(e);\n        })[0];\n        return E(\"number\" == typeof e), Promise.resolve(new _n(_this26.query, {\n          count: e\n        }));\n      });\n    }\n  }]);\n\n  return gn;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */\n\n\nvar vn = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function vn(t,\n  /**\n   * If provided, the `FirestoreDataConverter` associated with this instance.\n   */\n  e, n) {\n    _classCallCheck(this, vn);\n\n    this.converter = e, this._key = n,\n    /** The type of this Firestore reference. */\n    this.type = \"document\", this.firestore = t;\n  }\n\n  _createClass(vn, [{\n    key: \"withConverter\",\n    value: function withConverter(t) {\n      return new vn(this.firestore, t, this._key);\n    }\n  }, {\n    key: \"_path\",\n    get: function get() {\n      return this._key.path;\n    }\n    /**\n     * The document's identifier within its collection.\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._key.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */\n\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this._key.path.canonicalString();\n    }\n    /**\n     * The collection this `DocumentReference` belongs to.\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return new En(this.firestore, this.converter, this._key.path.popLast());\n    }\n  }]);\n\n  return vn;\n}();\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */\n\n\nvar bn = /*#__PURE__*/function () {\n  // This is the lite version of the Query class in the main SDK.\n\n  /** @hideconstructor protected */\n  function bn(t,\n  /**\n   * If provided, the `FirestoreDataConverter` associated with this instance.\n   */\n  e, n) {\n    _classCallCheck(this, bn);\n\n    this.converter = e, this._query = n,\n    /** The type of this Firestore reference. */\n    this.type = \"query\", this.firestore = t;\n  }\n\n  _createClass(bn, [{\n    key: \"withConverter\",\n    value: function withConverter(t) {\n      return new bn(this.firestore, t, this._query);\n    }\n  }]);\n\n  return bn;\n}();\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link query}).\n */\n\n\nvar En = /*#__PURE__*/function (_bn) {\n  _inherits(En, _bn);\n\n  /** @hideconstructor */\n  function En(t, e, n) {\n    var _this27;\n\n    _classCallCheck(this, En);\n\n    _this27 = _possibleConstructorReturn(this, _getPrototypeOf(En).call(this, t, e, new we(n))), _this27._path = n,\n    /** The type of this Firestore reference. */\n    _this27.type = \"collection\";\n    return _this27;\n  }\n  /** The collection's identifier. */\n\n\n  _createClass(En, [{\n    key: \"withConverter\",\n    value: function withConverter(t) {\n      return new En(this.firestore, t, this._path);\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._query.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     */\n\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this._query.path.canonicalString();\n    }\n    /**\n     * A reference to the containing `DocumentReference` if this is a\n     * subcollection. If this isn't a subcollection, the reference is null.\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var t = this._path.popLast();\n\n      return t.isEmpty() ? null : new vn(this.firestore,\n      /* converter= */\n      null, new rt(t));\n    }\n  }]);\n\n  return En;\n}(bn);\n\nfunction In(t, e) {\n  for (var _len5 = arguments.length, n = new Array(_len5 > 2 ? _len5 - 2 : 0), _key5 = 2; _key5 < _len5; _key5++) {\n    n[_key5 - 2] = arguments[_key5];\n  }\n\n  if (t = getModularInstance(t), st(\"collection\", \"path\", e), t instanceof fn) {\n    var r = tt.fromString.apply(tt, [e].concat(n));\n    return ot(r), new En(t,\n    /* converter= */\n    null, r);\n  }\n\n  {\n    if (!(t instanceof vn || t instanceof En)) throw new U(P, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n\n    var _r2 = t._path.child(tt.fromString.apply(tt, [e].concat(n)));\n\n    return ot(_r2), new En(t.firestore,\n    /* converter= */\n    null, _r2);\n  }\n} // TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */\n\n\nfunction Tn(t, e) {\n  if (t = ct(t, fn), st(\"collectionGroup\", \"collection id\", e), e.indexOf(\"/\") >= 0) throw new U(P, \"Invalid collection ID '\".concat(e, \"' passed to function collectionGroup(). Collection IDs must not contain '/'.\"));\n  return new bn(t,\n  /* converter= */\n  null,\n  /**\n  * Creates a new Query for a collection group query that matches all documents\n  * within the provided collection group.\n  */\n  function (t) {\n    return new we(tt.emptyPath(), t);\n  }(e));\n}\n\nfunction An(t, e) {\n  for (var _len6 = arguments.length, n = new Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {\n    n[_key6 - 2] = arguments[_key6];\n  }\n\n  if (t = getModularInstance(t), // We allow omission of 'pathString' but explicitly prohibit passing in both\n  // 'undefined' and 'null'.\n  1 === arguments.length && (e = _t.$()), st(\"doc\", \"path\", e), t instanceof fn) {\n    var r = tt.fromString.apply(tt, [e].concat(n));\n    return it(r), new vn(t,\n    /* converter= */\n    null, new rt(r));\n  }\n\n  {\n    if (!(t instanceof vn || t instanceof En)) throw new U(P, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n\n    var _r3 = t._path.child(tt.fromString.apply(tt, [e].concat(n)));\n\n    return it(_r3), new vn(t.firestore, t instanceof En ? t.converter : null, new rt(_r3));\n  }\n}\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\n\n\nfunction Rn(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), (t instanceof vn || t instanceof En) && (e instanceof vn || e instanceof En) && t.firestore === e.firestore && t.path === e.path && t.converter === e.converter;\n}\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */\n\n\nfunction Pn(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), t instanceof bn && e instanceof bn && t.firestore === e.firestore && ve(t._query, e._query) && t.converter === e.converter;\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An immutable object representing an array of bytes.\n */\n\n\nvar Vn = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function Vn(t) {\n    _classCallCheck(this, Vn);\n\n    this._byteString = t;\n  }\n  /**\n   * Creates a new `Bytes` object from the given Base64 string, converting it to\n   * bytes.\n   *\n   * @param base64 - The Base64 string used to create the `Bytes` object.\n   */\n\n\n  _createClass(Vn, [{\n    key: \"toBase64\",\n\n    /**\n     * Returns the underlying bytes as a Base64-encoded string.\n     *\n     * @returns The Base64-encoded string created from the `Bytes` object.\n     */\n    value: function toBase64() {\n      return this._byteString.toBase64();\n    }\n    /**\n     * Returns the underlying bytes in a new `Uint8Array`.\n     *\n     * @returns The Uint8Array created from the `Bytes` object.\n     */\n\n  }, {\n    key: \"toUint8Array\",\n    value: function toUint8Array() {\n      return this._byteString.toUint8Array();\n    }\n    /**\n     * Returns a string representation of the `Bytes` object.\n     *\n     * @returns A string representation of the `Bytes` object.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"Bytes(base64: \" + this.toBase64() + \")\";\n    }\n    /**\n     * Returns true if this `Bytes` object is equal to the provided one.\n     *\n     * @param other - The `Bytes` object to compare against.\n     * @returns true if this `Bytes` object is equal to the provided one.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return this._byteString.isEqual(t._byteString);\n    }\n  }], [{\n    key: \"fromBase64String\",\n    value: function fromBase64String(t) {\n      try {\n        return new Vn(Dt.fromBase64String(t));\n      } catch (t) {\n        throw new U(P, \"Failed to construct data from Base64 string: \" + t);\n      }\n    }\n    /**\n     * Creates a new `Bytes` object from the given Uint8Array.\n     *\n     * @param array - The Uint8Array used to create the `Bytes` object.\n     */\n\n  }, {\n    key: \"fromUint8Array\",\n    value: function fromUint8Array(t) {\n      return new Vn(Dt.fromUint8Array(t));\n    }\n  }]);\n\n  return Vn;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */\n\n\nvar Nn = /*#__PURE__*/function () {\n  /**\n   * Creates a `FieldPath` from the provided field names. If more than one field\n   * name is provided, the path will point to a nested field in a document.\n   *\n   * @param fieldNames - A list of field names.\n   */\n  function Nn() {\n    _classCallCheck(this, Nn);\n\n    for (var _len7 = arguments.length, t = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      t[_key7] = arguments[_key7];\n    }\n\n    for (var e = 0; e < t.length; ++e) {\n      if (0 === t[e].length) throw new U(P, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n    }\n\n    this._internalPath = new nt(t);\n  }\n  /**\n   * Returns true if this `FieldPath` is equal to the provided one.\n   *\n   * @param other - The `FieldPath` to compare against.\n   * @returns true if this `FieldPath` is equal to the provided one.\n   */\n\n\n  _createClass(Nn, [{\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return this._internalPath.isEqual(t._internalPath);\n    }\n  }]);\n\n  return Nn;\n}();\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */\n\n\nfunction $n() {\n  return new Nn(\"__name__\");\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */\n\n\nvar Dn =\n/**\n * @param _methodName - The public API endpoint that returns this class.\n * @hideconstructor\n */\nfunction Dn(t) {\n  _classCallCheck(this, Dn);\n\n  this._methodName = t;\n};\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */\n\n\nvar xn = /*#__PURE__*/function () {\n  /**\n   * Creates a new immutable `GeoPoint` object with the provided latitude and\n   * longitude values.\n   * @param latitude - The latitude as number between -90 and 90.\n   * @param longitude - The longitude as number between -180 and 180.\n   */\n  function xn(t, e) {\n    _classCallCheck(this, xn);\n\n    if (!isFinite(t) || t < -90 || t > 90) throw new U(P, \"Latitude must be a number between -90 and 90, but was: \" + t);\n    if (!isFinite(e) || e < -180 || e > 180) throw new U(P, \"Longitude must be a number between -180 and 180, but was: \" + e);\n    this._lat = t, this._long = e;\n  }\n  /**\n   * The latitude of this `GeoPoint` instance.\n   */\n\n\n  _createClass(xn, [{\n    key: \"isEqual\",\n\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided one.\n     *\n     * @param other - The `GeoPoint` to compare against.\n     * @returns true if this `GeoPoint` is equal to the provided one.\n     */\n    value: function isEqual(t) {\n      return this._lat === t._lat && this._long === t._long;\n    }\n    /** Returns a JSON-serializable representation of this GeoPoint. */\n\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        latitude: this._lat,\n        longitude: this._long\n      };\n    }\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */\n\n  }, {\n    key: \"_compareTo\",\n    value: function _compareTo(t) {\n      return gt(this._lat, t._lat) || gt(this._long, t._long);\n    }\n  }, {\n    key: \"latitude\",\n    get: function get() {\n      return this._lat;\n    }\n    /**\n     * The longitude of this `GeoPoint` instance.\n     */\n\n  }, {\n    key: \"longitude\",\n    get: function get() {\n      return this._long;\n    }\n  }]);\n\n  return xn;\n}();\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar Fn = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\n\nvar Sn = /*#__PURE__*/function () {\n  function Sn(t, e, n) {\n    _classCallCheck(this, Sn);\n\n    this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n  }\n\n  _createClass(Sn, [{\n    key: \"toMutation\",\n    value: function toMutation(t, e) {\n      return null !== this.fieldMask ? new De(t, this.data, this.fieldMask, e, this.fieldTransforms) : new $e(t, this.data, e, this.fieldTransforms);\n    }\n  }]);\n\n  return Sn;\n}();\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\n\n\nvar qn = /*#__PURE__*/function () {\n  function qn(t, // The fieldMask does not include document transforms.\n  e, n) {\n    _classCallCheck(this, qn);\n\n    this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n  }\n\n  _createClass(qn, [{\n    key: \"toMutation\",\n    value: function toMutation(t, e) {\n      return new De(t, this.data, this.fieldMask, e, this.fieldTransforms);\n    }\n  }]);\n\n  return qn;\n}();\n\nfunction On(t) {\n  switch (t) {\n    case 0\n    /* Set */\n    : // fall through\n\n    case 2\n    /* MergeSet */\n    : // fall through\n\n    case 1\n    /* Update */\n    :\n      return !0;\n\n    case 3\n    /* Argument */\n    :\n    case 4\n    /* ArrayArgument */\n    :\n      return !1;\n\n    default:\n      throw b();\n  }\n}\n/** A \"context\" object passed around while parsing user data. */\n\n\nvar kn = /*#__PURE__*/function () {\n  /**\n   * Initializes a ParseContext with the given source and path.\n   *\n   * @param settings - The settings for the parser.\n   * @param databaseId - The database ID of the Firestore instance.\n   * @param serializer - The serializer to use to generate the Value proto.\n   * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n   * rather than throw.\n   * @param fieldTransforms - A mutable list of field transforms encountered\n   * while parsing the data.\n   * @param fieldMask - A mutable list of field paths encountered while parsing\n   * the data.\n   *\n   * TODO(b/34871131): We don't support array paths right now, so path can be\n   * null to indicate the context represents any location within an array (in\n   * which case certain features will not work and errors will be somewhat\n   * compromised).\n   */\n  function kn(t, e, n, r, s, i) {\n    _classCallCheck(this, kn);\n\n    this.settings = t, this.databaseId = e, this.L = n, this.ignoreUndefinedProperties = r, // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    void 0 === s && this.nt(), this.fieldTransforms = s || [], this.fieldMask = i || [];\n  }\n\n  _createClass(kn, [{\n    key: \"st\",\n\n    /** Returns a new context with the specified settings overwritten. */\n    value: function st(t) {\n      return new kn(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.L, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n    }\n  }, {\n    key: \"it\",\n    value: function it(t) {\n      var e;\n      var n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),\n          r = this.st({\n        path: n,\n        ot: !1\n      });\n      return r.ut(t), r;\n    }\n  }, {\n    key: \"ct\",\n    value: function ct(t) {\n      var e;\n      var n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t),\n          r = this.st({\n        path: n,\n        ot: !1\n      });\n      return r.nt(), r;\n    }\n  }, {\n    key: \"at\",\n    value: function at(t) {\n      // TODO(b/34871131): We don't support array paths right now; so make path\n      // undefined.\n      return this.st({\n        path: void 0,\n        ot: !0\n      });\n    }\n  }, {\n    key: \"ht\",\n    value: function ht(t) {\n      return rr(t, this.settings.methodName, this.settings.lt || !1, this.path, this.settings.ft);\n    }\n    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n\n  }, {\n    key: \"contains\",\n    value: function contains(t) {\n      return void 0 !== this.fieldMask.find(function (e) {\n        return t.isPrefixOf(e);\n      }) || void 0 !== this.fieldTransforms.find(function (e) {\n        return t.isPrefixOf(e.field);\n      });\n    }\n  }, {\n    key: \"nt\",\n    value: function nt() {\n      // TODO(b/34871131): Remove null check once we have proper paths for fields\n      // within arrays.\n      if (this.path) for (var t = 0; t < this.path.length; t++) {\n        this.ut(this.path.get(t));\n      }\n    }\n  }, {\n    key: \"ut\",\n    value: function ut(t) {\n      if (0 === t.length) throw this.ht(\"Document fields must not be empty\");\n      if (On(this.rt) && Fn.test(t)) throw this.ht('Document fields cannot begin and end with \"__\"');\n    }\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this.settings.path;\n    }\n  }, {\n    key: \"rt\",\n    get: function get() {\n      return this.settings.rt;\n    }\n  }]);\n\n  return kn;\n}();\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */\n\n\nvar Cn = /*#__PURE__*/function () {\n  function Cn(t, e, n) {\n    _classCallCheck(this, Cn);\n\n    this.databaseId = t, this.ignoreUndefinedProperties = e, this.L = n || en(t);\n  }\n  /** Creates a new top-level parse context. */\n\n\n  _createClass(Cn, [{\n    key: \"dt\",\n    value: function dt(t, e, n) {\n      var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;\n      return new kn({\n        rt: t,\n        methodName: e,\n        ft: n,\n        path: nt.emptyPath(),\n        ot: !1,\n        lt: r\n      }, this.databaseId, this.L, this.ignoreUndefinedProperties);\n    }\n  }]);\n\n  return Cn;\n}();\n\nfunction Ln(t) {\n  var e = t._freezeSettings(),\n      n = en(t._databaseId);\n\n  return new Cn(t._databaseId, !!e.ignoreUndefinedProperties, n);\n}\n/** Parse document data from a set() call. */\n\n\nfunction Mn(t, e, n, r, s) {\n  var i = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n  var o = t.dt(i.merge || i.mergeFields ? 2\n  /* MergeSet */\n  : 0\n  /* Set */\n  , e, n, s);\n  Zn(\"Data must be an object, but it was:\", o, r);\n  var u = Jn(r, o);\n  var c, a;\n  if (i.merge) c = new $t(o.fieldMask), a = o.fieldTransforms;else if (i.mergeFields) {\n    var _t16 = [];\n\n    var _iterator8 = _createForOfIteratorHelper(i.mergeFields),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var _r4 = _step8.value;\n\n        var _s = tr(e, _r4, n);\n\n        if (!o.contains(_s)) throw new U(P, \"Field '\".concat(_s, \"' is specified in your field mask but missing from your input data.\"));\n        sr(_t16, _s) || _t16.push(_s);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n\n    c = new $t(_t16), a = o.fieldTransforms.filter(function (t) {\n      return c.covers(t.field);\n    });\n  } else c = null, a = o.fieldTransforms;\n  return new Sn(new Jt(u), c, a);\n}\n\nvar Un = /*#__PURE__*/function (_Dn) {\n  _inherits(Un, _Dn);\n\n  function Un() {\n    _classCallCheck(this, Un);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Un).apply(this, arguments));\n  }\n\n  _createClass(Un, [{\n    key: \"_toFieldTransform\",\n    value: function _toFieldTransform(t) {\n      if (2\n      /* MergeSet */\n      !== t.rt) throw 1\n      /* Update */\n      === t.rt ? t.ht(\"\".concat(this._methodName, \"() can only appear at the top level of your update data\")) : t.ht(\"\".concat(this._methodName, \"() cannot be used with set() unless you pass {merge:true}\")); // No transform to add for a delete, but we need to add it to our\n      // fieldMask so it gets deleted.\n\n      return t.fieldMask.push(t.path), null;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return t instanceof Un;\n    }\n  }]);\n\n  return Un;\n}(Dn);\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */\n\n\nfunction jn(t, e, n) {\n  return new kn({\n    rt: 3\n    /* Argument */\n    ,\n    ft: e.settings.ft,\n    methodName: t._methodName,\n    ot: n\n  }, e.databaseId, e.L, e.ignoreUndefinedProperties);\n}\n\nvar Bn = /*#__PURE__*/function (_Dn2) {\n  _inherits(Bn, _Dn2);\n\n  function Bn() {\n    _classCallCheck(this, Bn);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Bn).apply(this, arguments));\n  }\n\n  _createClass(Bn, [{\n    key: \"_toFieldTransform\",\n    value: function _toFieldTransform(t) {\n      return new Pe(t.path, new Ie());\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      return t instanceof Bn;\n    }\n  }]);\n\n  return Bn;\n}(Dn);\n\nvar Qn = /*#__PURE__*/function (_Dn3) {\n  _inherits(Qn, _Dn3);\n\n  function Qn(t, e) {\n    var _this28;\n\n    _classCallCheck(this, Qn);\n\n    _this28 = _possibleConstructorReturn(this, _getPrototypeOf(Qn).call(this, t)), _this28.wt = e;\n    return _this28;\n  }\n\n  _createClass(Qn, [{\n    key: \"_toFieldTransform\",\n    value: function _toFieldTransform(t) {\n      var e = jn(this, t,\n      /*array=*/\n      !0),\n          n = this.wt.map(function (t) {\n        return Hn(t, e);\n      }),\n          r = new Te(n);\n      return new Pe(t.path, r);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      // TODO(mrschmidt): Implement isEquals\n      return this === t;\n    }\n  }]);\n\n  return Qn;\n}(Dn);\n\nvar zn = /*#__PURE__*/function (_Dn4) {\n  _inherits(zn, _Dn4);\n\n  function zn(t, e) {\n    var _this29;\n\n    _classCallCheck(this, zn);\n\n    _this29 = _possibleConstructorReturn(this, _getPrototypeOf(zn).call(this, t)), _this29.wt = e;\n    return _this29;\n  }\n\n  _createClass(zn, [{\n    key: \"_toFieldTransform\",\n    value: function _toFieldTransform(t) {\n      var e = jn(this, t,\n      /*array=*/\n      !0),\n          n = this.wt.map(function (t) {\n        return Hn(t, e);\n      }),\n          r = new Ae(n);\n      return new Pe(t.path, r);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      // TODO(mrschmidt): Implement isEquals\n      return this === t;\n    }\n  }]);\n\n  return zn;\n}(Dn);\n\nvar Gn = /*#__PURE__*/function (_Dn5) {\n  _inherits(Gn, _Dn5);\n\n  function Gn(t, e) {\n    var _this30;\n\n    _classCallCheck(this, Gn);\n\n    _this30 = _possibleConstructorReturn(this, _getPrototypeOf(Gn).call(this, t)), _this30.yt = e;\n    return _this30;\n  }\n\n  _createClass(Gn, [{\n    key: \"_toFieldTransform\",\n    value: function _toFieldTransform(t) {\n      var e = new Re(t.L, be(t.L, this.yt));\n      return new Pe(t.path, e);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(t) {\n      // TODO(mrschmidt): Implement isEquals\n      return this === t;\n    }\n  }]);\n\n  return Gn;\n}(Dn);\n/** Parse update data from an update() call. */\n\n\nfunction Wn(t, e, n, r) {\n  var s = t.dt(1\n  /* Update */\n  , e, n);\n  Zn(\"Data must be an object, but it was:\", s, r);\n  var i = [],\n      o = Jt.empty();\n  Tt(r, function (t, r) {\n    var u = nr(e, t, n); // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n\n    r = getModularInstance(r);\n    var c = s.ct(u);\n    if (r instanceof Un) // Add it to the field mask, but don't add anything to updateData.\n      i.push(u);else {\n      var _t17 = Hn(r, c);\n\n      null != _t17 && (i.push(u), o.set(u, _t17));\n    }\n  });\n  var u = new $t(i);\n  return new qn(o, u, s.fieldTransforms);\n}\n/** Parse update data from a list of field/value arguments. */\n\n\nfunction Kn(t, e, n, r, s, i) {\n  var o = t.dt(1\n  /* Update */\n  , e, n),\n      u = [tr(e, r, n)],\n      c = [s];\n  if (i.length % 2 != 0) throw new U(P, \"Function \".concat(e, \"() needs to be called with an even number of arguments that alternate between field names and values.\"));\n\n  for (var _t18 = 0; _t18 < i.length; _t18 += 2) {\n    u.push(tr(e, i[_t18])), c.push(i[_t18 + 1]);\n  }\n\n  var a = [],\n      h = Jt.empty(); // We iterate in reverse order to pick the last value for a field if the\n  // user specified the field multiple times.\n\n  for (var _t19 = u.length - 1; _t19 >= 0; --_t19) {\n    if (!sr(a, u[_t19])) {\n      var _e13 = u[_t19];\n      var _n8 = c[_t19]; // For Compat types, we have to \"extract\" the underlying types before\n      // performing validation.\n\n      _n8 = getModularInstance(_n8);\n\n      var _r5 = o.ct(_e13);\n\n      if (_n8 instanceof Un) // Add it to the field mask, but don't add anything to updateData.\n        a.push(_e13);else {\n        var _t20 = Hn(_n8, _r5);\n\n        null != _t20 && (a.push(_e13), h.set(_e13, _t20));\n      }\n    }\n  }\n\n  var f = new $t(a);\n  return new qn(h, f, o.fieldTransforms);\n}\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */\n\n\nfunction Yn(t, e, n) {\n  var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : !1;\n  return Hn(n, t.dt(r ? 4\n  /* ArrayArgument */\n  : 3\n  /* Argument */\n  , e));\n}\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */\n\n\nfunction Hn(t, e) {\n  if (Xn( // Unwrap the API type from the Compat SDK. This will return the API type\n  // from firestore-exp.\n  t = getModularInstance(t))) return Zn(\"Unsupported field value:\", e, t), Jn(t, e);\n  if (t instanceof Dn) // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n\n    /**\n    * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n    * context.fieldTransforms.\n    */\n    return function (t, e) {\n      // Sentinels are only supported with writes, and not within arrays.\n      if (!On(e.rt)) throw e.ht(\"\".concat(t._methodName, \"() can only be used with update() and set()\"));\n      if (!e.path) throw e.ht(\"\".concat(t._methodName, \"() is not currently supported inside arrays\"));\n\n      var n = t._toFieldTransform(e);\n\n      n && e.fieldTransforms.push(n);\n    }\n    /**\n    * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n    *\n    * @returns The parsed value\n    */\n    (t, e), null;\n  if (void 0 === t && e.ignoreUndefinedProperties) // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n\n  if ( // If context.path is null we are inside an array and we don't support\n  // field mask paths more granular than the top-level array.\n  e.path && e.fieldMask.push(e.path), t instanceof Array) {\n    // TODO(b/34871131): Include the path containing the array in the error\n    // message.\n    // In the case of IN queries, the parsed data is an array (representing\n    // the set of values to be included for the IN query) that may directly\n    // contain additional arrays (each representing an individual field\n    // value), so we disable this validation.\n    if (e.settings.ot && 4\n    /* ArrayArgument */\n    !== e.rt) throw e.ht(\"Nested arrays are not supported\");\n    return function (t, e) {\n      var n = [];\n      var r = 0;\n\n      var _iterator9 = _createForOfIteratorHelper(t),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var s = _step9.value;\n\n          var _t21 = Hn(s, e.at(r));\n\n          null == _t21 && ( // Just include nulls in the array for fields being replaced with a\n          // sentinel.\n          _t21 = {\n            nullValue: \"NULL_VALUE\"\n          }), n.push(_t21), r++;\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return {\n        arrayValue: {\n          values: n\n        }\n      };\n    }(t, e);\n  }\n\n  return function (t, e) {\n    if (null === (t = getModularInstance(t))) return {\n      nullValue: \"NULL_VALUE\"\n    };\n    if (\"number\" == typeof t) return be(e.L, t);\n    if (\"boolean\" == typeof t) return {\n      booleanValue: t\n    };\n    if (\"string\" == typeof t) return {\n      stringValue: t\n    };\n\n    if (t instanceof Date) {\n      var n = bt.fromDate(t);\n      return {\n        timestampValue: ke(e.L, n)\n      };\n    }\n\n    if (t instanceof bt) {\n      // Firestore backend truncates precision down to microseconds. To ensure\n      // offline mode works the same with regards to truncation, perform the\n      // truncation immediately without waiting for the backend to do that.\n      var _n9 = new bt(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n\n      return {\n        timestampValue: ke(e.L, _n9)\n      };\n    }\n\n    if (t instanceof xn) return {\n      geoPointValue: {\n        latitude: t.latitude,\n        longitude: t.longitude\n      }\n    };\n    if (t instanceof Vn) return {\n      bytesValue: Ce(e.L, t._byteString)\n    };\n\n    if (t instanceof vn) {\n      var _n10 = e.databaseId,\n          r = t.firestore._databaseId;\n      if (!r.isEqual(_n10)) throw e.ht(\"Document reference is for database \".concat(r.projectId, \"/\").concat(r.database, \" but should be for database \").concat(_n10.projectId, \"/\").concat(_n10.database));\n      return {\n        referenceValue: Ue(t.firestore._databaseId || e.databaseId, t._key.path)\n      };\n    }\n\n    throw e.ht(\"Unsupported field value: \".concat(ut(t)));\n  }\n  /**\n  * Checks whether an object looks like a JSON object that should be converted\n  * into a struct. Normal class/prototype instances are considered to look like\n  * JSON objects since they should be converted to a struct value. Arrays, Dates,\n  * GeoPoints, etc. are not considered to look like JSON objects since they map\n  * to specific FieldValue types other than ObjectValue.\n  */\n  (t, e);\n}\n\nfunction Jn(t, e) {\n  var n = {};\n  return !function (t) {\n    for (var _e14 in t) {\n      if (Object.prototype.hasOwnProperty.call(t, _e14)) return !1;\n    }\n\n    return !0;\n  }(t) ? Tt(t, function (t, r) {\n    var s = Hn(r, e.it(t));\n    null != s && (n[t] = s);\n  }) : // If we encounter an empty object, we explicitly add it to the update\n  // mask to ensure that the server creates a map entry.\n  e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n    mapValue: {\n      fields: n\n    }\n  };\n}\n\nfunction Xn(t) {\n  return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof bt || t instanceof xn || t instanceof Vn || t instanceof vn || t instanceof Dn);\n}\n\nfunction Zn(t, e, n) {\n  if (!Xn(n) || !function (t) {\n    return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n  }(n)) {\n    var r = ut(n);\n    throw \"an object\" === r ? e.ht(t + \" a custom object\") : e.ht(t + \" \" + r);\n  }\n}\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */\n\n\nfunction tr(t, e, n) {\n  if (( // If required, replace the FieldPath Compat class with with the firestore-exp\n  // FieldPath.\n  e = getModularInstance(e)) instanceof Nn) return e._internalPath;\n  if (\"string\" == typeof e) return nr(t, e);\n  throw rr(\"Field path arguments must be of type string or \", t,\n  /* hasConverter= */\n  !1,\n  /* path= */\n  void 0, n);\n}\n/**\n * Matches any characters in a field path string that are reserved.\n */\n\n\nvar er = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */\n\nfunction nr(t, e, n) {\n  if (e.search(er) >= 0) throw rr(\"Invalid field path (\".concat(e, \"). Paths must not contain '~', '*', '/', '[', or ']'\"), t,\n  /* hasConverter= */\n  !1,\n  /* path= */\n  void 0, n);\n\n  try {\n    return _construct(Nn, _toConsumableArray(e.split(\".\")))._internalPath;\n  } catch (r) {\n    throw rr(\"Invalid field path (\".concat(e, \"). Paths must not be empty, begin with '.', end with '.', or contain '..'\"), t,\n    /* hasConverter= */\n    !1,\n    /* path= */\n    void 0, n);\n  }\n}\n\nfunction rr(t, e, n, r, s) {\n  var i = r && !r.isEmpty(),\n      o = void 0 !== s;\n  var u = \"Function \".concat(e, \"() called with invalid data\");\n  n && (u += \" (via `toFirestore()`)\"), u += \". \";\n  var c = \"\";\n  return (i || o) && (c += \" (found\", i && (c += \" in field \".concat(r)), o && (c += \" in document \".concat(s)), c += \")\"), new U(P, u + t + c);\n}\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\n\n\nfunction sr(t, e) {\n  return t.some(function (t) {\n    return t.isEqual(e);\n  });\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */\n\n\nvar ir = /*#__PURE__*/function () {\n  // Note: This class is stripped down version of the DocumentSnapshot in\n  // the legacy SDK. The changes are:\n  // - No support for SnapshotMetadata.\n  // - No support for SnapshotOptions.\n\n  /** @hideconstructor protected */\n  function ir(t, e, n, r, s) {\n    _classCallCheck(this, ir);\n\n    this._firestore = t, this._userDataWriter = e, this._key = n, this._document = r, this._converter = s;\n  }\n  /** Property of the `DocumentSnapshot` that provides the document's ID. */\n\n\n  _createClass(ir, [{\n    key: \"exists\",\n\n    /**\n     * Signals whether or not the document at the snapshot's location exists.\n     *\n     * @returns true if the document exists.\n     */\n    value: function exists() {\n      return null !== this._document;\n    }\n    /**\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n     * the document doesn't exist.\n     *\n     * @returns An `Object` containing all fields in the document or `undefined`\n     * if the document doesn't exist.\n     */\n\n  }, {\n    key: \"data\",\n    value: function data() {\n      if (this._document) {\n        if (this._converter) {\n          // We only want to use the converter and create a new DocumentSnapshot\n          // if a converter has been provided.\n          var t = new or(this._firestore, this._userDataWriter, this._key, this._document,\n          /* converter= */\n          null);\n          return this._converter.fromFirestore(t);\n        }\n\n        return this._userDataWriter.convertValue(this._document.data.value);\n      }\n    }\n    /**\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n     * document or field doesn't exist.\n     *\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n     * field.\n     * @returns The data at the specified field location or undefined if no such\n     * field exists in the document.\n     */\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  }, {\n    key: \"get\",\n    value: function get(t) {\n      if (this._document) {\n        var e = this._document.data.field(ar(\"DocumentSnapshot.get\", t));\n\n        if (null !== e) return this._userDataWriter.convertValue(e);\n      }\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._key.path.lastSegment();\n    }\n    /**\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n     */\n\n  }, {\n    key: \"ref\",\n    get: function get() {\n      return new vn(this._firestore, this._converter, this._key);\n    }\n  }]);\n\n  return ir;\n}();\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */\n\n\nvar or = /*#__PURE__*/function (_ir) {\n  _inherits(or, _ir);\n\n  function or() {\n    _classCallCheck(this, or);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(or).apply(this, arguments));\n  }\n\n  _createClass(or, [{\n    key: \"data\",\n\n    /**\n     * Retrieves all fields in the document as an `Object`.\n     *\n     * @override\n     * @returns An `Object` containing all fields in the document.\n     */\n    value: function data() {\n      return _get(_getPrototypeOf(or.prototype), \"data\", this).call(this);\n    }\n  }]);\n\n  return or;\n}(ir);\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */\n\n\nvar ur = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function ur(t, e) {\n    _classCallCheck(this, ur);\n\n    this._docs = e, this.query = t;\n  }\n  /** An array of all the documents in the `QuerySnapshot`. */\n\n\n  _createClass(ur, [{\n    key: \"forEach\",\n\n    /**\n     * Enumerates all of the documents in the `QuerySnapshot`.\n     *\n     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n     * each document in the snapshot.\n     * @param thisArg - The `this` binding for the callback.\n     */\n    value: function forEach(t, e) {\n      this._docs.forEach(t, e);\n    }\n  }, {\n    key: \"docs\",\n    get: function get() {\n      return _toConsumableArray(this._docs);\n    }\n    /** The number of documents in the `QuerySnapshot`. */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.docs.length;\n    }\n    /** True if there are no documents in the `QuerySnapshot`. */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return 0 === this.docs.length;\n    }\n  }]);\n\n  return ur;\n}();\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */\n\n\nfunction cr(t, e) {\n  return t = getModularInstance(t), e = getModularInstance(e), t instanceof ir && e instanceof ir ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof ur && e instanceof ur && Pn(t.query, e.query) && vt(t.docs, e.docs, cr);\n}\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */\n\n\nfunction ar(t, e) {\n  return \"string\" == typeof e ? nr(t, e) : e instanceof Nn ? e._internalPath : e._delegate._internalPath;\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * endBefore:1}, {@link (endAt:1)}, {@link limit} or {@link limitToLast} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\n\n\nvar hr = function hr() {\n  _classCallCheck(this, hr);\n};\n/**\n * Creates a new immutable instance of {@link Query} that is extended to also include\n * additional query constraints.\n *\n * @param query - The {@link Query} instance to use as a base for the new constraints.\n * @param queryConstraints - The list of {@link QueryConstraint}s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\n\n\nfunction lr(t) {\n  for (var _len8 = arguments.length, e = new Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n    e[_key8 - 1] = arguments[_key8];\n  }\n\n  for (var _i3 = 0, _e15 = e; _i3 < _e15.length; _i3++) {\n    var n = _e15[_i3];\n    t = n._apply(t);\n  }\n\n  return t;\n}\n\nvar fr = /*#__PURE__*/function (_hr) {\n  _inherits(fr, _hr);\n\n  function fr(t, e, n) {\n    var _this31;\n\n    _classCallCheck(this, fr);\n\n    _this31 = _possibleConstructorReturn(this, _getPrototypeOf(fr).call(this)), _this31._t = t, _this31.gt = e, _this31.vt = n, _this31.type = \"where\";\n    return _this31;\n  }\n\n  _createClass(fr, [{\n    key: \"_apply\",\n    value: function _apply(t) {\n      var e = Ln(t.firestore),\n          n = function (t, e, n, r, s, i, o) {\n        var u;\n\n        if (s.isKeyField()) {\n          if (\"array-contains\"\n          /* ARRAY_CONTAINS */\n          === i || \"array-contains-any\"\n          /* ARRAY_CONTAINS_ANY */\n          === i) throw new U(P, \"Invalid Query. You can't perform '\".concat(i, \"' queries on documentId().\"));\n\n          if (\"in\"\n          /* IN */\n          === i || \"not-in\"\n          /* NOT_IN */\n          === i) {\n            Pr(o, i);\n            var _e16 = [];\n\n            var _iterator10 = _createForOfIteratorHelper(o),\n                _step10;\n\n            try {\n              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                var _n11 = _step10.value;\n\n                _e16.push(Rr(r, t, _n11));\n              }\n            } catch (err) {\n              _iterator10.e(err);\n            } finally {\n              _iterator10.f();\n            }\n\n            u = {\n              arrayValue: {\n                values: _e16\n              }\n            };\n          } else u = Rr(r, t, o);\n        } else \"in\"\n        /* IN */\n        !== i && \"not-in\"\n        /* NOT_IN */\n        !== i && \"array-contains-any\"\n        /* ARRAY_CONTAINS_ANY */\n        !== i || Pr(o, i), u = Yn(n, e, o,\n        /* allowArrays= */\n        \"in\"\n        /* IN */\n        === i || \"not-in\"\n        /* NOT_IN */\n        === i);\n\n        var c = ee.create(s, i, u);\n        return function (t, e) {\n          if (e.q()) {\n            var _n12 = pe(t);\n\n            if (null !== _n12 && !_n12.isEqual(e.field)) throw new U(P, \"Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '\".concat(_n12.toString(), \"' and '\").concat(e.field.toString(), \"'\"));\n\n            var _r6 = me(t);\n\n            null !== _r6 && Vr(t, e.field, _r6);\n          }\n\n          var n = function (t, e) {\n            var _iterator11 = _createForOfIteratorHelper(t.filters),\n                _step11;\n\n            try {\n              for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n                var _n13 = _step11.value;\n                if (e.indexOf(_n13.op) >= 0) return _n13.op;\n              }\n            } catch (err) {\n              _iterator11.e(err);\n            } finally {\n              _iterator11.f();\n            }\n\n            return null;\n          }(t,\n          /**\n          * Given an operator, returns the set of operators that cannot be used with it.\n          *\n          * Operators in a query must adhere to the following set of rules:\n          * 1. Only one array operator is allowed.\n          * 2. Only one disjunctive operator is allowed.\n          * 3. `NOT_EQUAL` cannot be used with another `NOT_EQUAL` operator.\n          * 4. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n          *\n          * Array operators: `ARRAY_CONTAINS`, `ARRAY_CONTAINS_ANY`\n          * Disjunctive operators: `IN`, `ARRAY_CONTAINS_ANY`, `NOT_IN`\n          */\n          function (t) {\n            switch (t) {\n              case \"!=\"\n              /* NOT_EQUAL */\n              :\n                return [\"!=\"\n                /* NOT_EQUAL */\n                , \"not-in\"\n                /* NOT_IN */\n                ];\n\n              case \"array-contains\"\n              /* ARRAY_CONTAINS */\n              :\n                return [\"array-contains\"\n                /* ARRAY_CONTAINS */\n                , \"array-contains-any\"\n                /* ARRAY_CONTAINS_ANY */\n                , \"not-in\"\n                /* NOT_IN */\n                ];\n\n              case \"in\"\n              /* IN */\n              :\n                return [\"array-contains-any\"\n                /* ARRAY_CONTAINS_ANY */\n                , \"in\"\n                /* IN */\n                , \"not-in\"\n                /* NOT_IN */\n                ];\n\n              case \"array-contains-any\"\n              /* ARRAY_CONTAINS_ANY */\n              :\n                return [\"array-contains\"\n                /* ARRAY_CONTAINS */\n                , \"array-contains-any\"\n                /* ARRAY_CONTAINS_ANY */\n                , \"in\"\n                /* IN */\n                , \"not-in\"\n                /* NOT_IN */\n                ];\n\n              case \"not-in\"\n              /* NOT_IN */\n              :\n                return [\"array-contains\"\n                /* ARRAY_CONTAINS */\n                , \"array-contains-any\"\n                /* ARRAY_CONTAINS_ANY */\n                , \"in\"\n                /* IN */\n                , \"not-in\"\n                /* NOT_IN */\n                , \"!=\"\n                /* NOT_EQUAL */\n                ];\n\n              default:\n                return [];\n            }\n          }(e.op));\n\n          if (null !== n) // Special case when it's a duplicate op to give a slightly clearer error message.\n            throw n === e.op ? new U(P, \"Invalid query. You cannot use more than one '\".concat(e.op.toString(), \"' filter.\")) : new U(P, \"Invalid query. You cannot use '\".concat(e.op.toString(), \"' filters with '\").concat(n.toString(), \"' filters.\"));\n        }(t, c), c;\n      }(t._query, \"where\", e, t.firestore._databaseId, this._t, this.gt, this.vt);\n\n      return new bn(t.firestore, t.converter, function (t, e) {\n        var n = t.filters.concat([e]);\n        return new we(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);\n      }(t._query, n));\n    }\n  }]);\n\n  return fr;\n}(hr);\n/**\n * Creates a {@link QueryConstraint} that enforces that documents must contain the\n * specified field and that the value should satisfy the relation constraint\n * provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link Query}.\n */\n\n\nfunction dr(t, e, n) {\n  var r = e,\n      s = ar(\"where\", t);\n  return new fr(s, r, n);\n}\n\nvar wr = /*#__PURE__*/function (_hr2) {\n  _inherits(wr, _hr2);\n\n  function wr(t, e) {\n    var _this32;\n\n    _classCallCheck(this, wr);\n\n    _this32 = _possibleConstructorReturn(this, _getPrototypeOf(wr).call(this)), _this32._t = t, _this32.bt = e, _this32.type = \"orderBy\";\n    return _this32;\n  }\n\n  _createClass(wr, [{\n    key: \"_apply\",\n    value: function _apply(t) {\n      var e = function (t, e, n) {\n        if (null !== t.startAt) throw new U(P, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n        if (null !== t.endAt) throw new U(P, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n        var r = new le(e, n);\n        return function (t, e) {\n          if (null === me(t)) {\n            // This is the first order by. It must match any inequality.\n            var _n14 = pe(t);\n\n            null !== _n14 && Vr(t, _n14, e.field);\n          }\n        }(t, r), r;\n      }\n      /**\n      * Create a `Bound` from a query and a document.\n      *\n      * Note that the `Bound` will always include the key of the document\n      * and so only the provided document will compare equal to the returned\n      * position.\n      *\n      * Will throw if the document does not contain all fields of the order by\n      * of the query or if any of the fields in the order by are an uncommitted\n      * server timestamp.\n      */\n      (t._query, this._t, this.bt);\n\n      return new bn(t.firestore, t.converter, function (t, e) {\n        // TODO(dimond): validate that orderBy does not list the same key twice.\n        var n = t.explicitOrderBy.concat([e]);\n        return new we(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n      }(t._query, e));\n    }\n  }]);\n\n  return wr;\n}(hr);\n/**\n * Creates a {@link QueryConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link Query}.\n */\n\n\nfunction mr(t) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"asc\";\n  var n = e,\n      r = ar(\"orderBy\", t);\n  return new wr(r, n);\n}\n\nvar pr = /*#__PURE__*/function (_hr3) {\n  _inherits(pr, _hr3);\n\n  function pr(t, e, n) {\n    var _this33;\n\n    _classCallCheck(this, pr);\n\n    _this33 = _possibleConstructorReturn(this, _getPrototypeOf(pr).call(this)), _this33.type = t, _this33.Et = e, _this33.It = n;\n    return _this33;\n  }\n\n  _createClass(pr, [{\n    key: \"_apply\",\n    value: function _apply(t) {\n      return new bn(t.firestore, t.converter, function (t, e, n) {\n        return new we(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);\n      }(t._query, this.Et, this.It));\n    }\n  }]);\n\n  return pr;\n}(hr);\n/**\n * Creates a {@link QueryConstraint} that only returns the first matching documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link Query}.\n */\n\n\nfunction yr(t) {\n  return at(\"limit\", t), new pr(\"limit\", t, \"F\"\n  /* First */\n  );\n}\n/**\n * Creates a {@link QueryConstraint} that only returns the last matching documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link Query}.\n */\n\n\nfunction _r(t) {\n  return at(\"limitToLast\", t), new pr(\"limitToLast\", t, \"L\"\n  /* Last */\n  );\n}\n\nvar gr = /*#__PURE__*/function (_hr4) {\n  _inherits(gr, _hr4);\n\n  function gr(t, e, n) {\n    var _this34;\n\n    _classCallCheck(this, gr);\n\n    _this34 = _possibleConstructorReturn(this, _getPrototypeOf(gr).call(this)), _this34.type = t, _this34.Tt = e, _this34.At = n;\n    return _this34;\n  }\n\n  _createClass(gr, [{\n    key: \"_apply\",\n    value: function _apply(t) {\n      var e = Ar(t, this.type, this.Tt, this.At);\n      return new bn(t.firestore, t.converter, function (t, e) {\n        return new we(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n      }(t._query, e));\n    }\n  }]);\n\n  return gr;\n}(hr);\n\nfunction vr() {\n  for (var _len9 = arguments.length, t = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n    t[_key9] = arguments[_key9];\n  }\n\n  return new gr(\"startAt\", t,\n  /*inclusive=*/\n  !0);\n}\n\nfunction br() {\n  for (var _len10 = arguments.length, t = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n    t[_key10] = arguments[_key10];\n  }\n\n  return new gr(\"startAfter\", t,\n  /*inclusive=*/\n  !1);\n}\n\nvar Er = /*#__PURE__*/function (_hr5) {\n  _inherits(Er, _hr5);\n\n  function Er(t, e, n) {\n    var _this35;\n\n    _classCallCheck(this, Er);\n\n    _this35 = _possibleConstructorReturn(this, _getPrototypeOf(Er).call(this)), _this35.type = t, _this35.Tt = e, _this35.At = n;\n    return _this35;\n  }\n\n  _createClass(Er, [{\n    key: \"_apply\",\n    value: function _apply(t) {\n      var e = Ar(t, this.type, this.Tt, this.At);\n      return new bn(t.firestore, t.converter, function (t, e) {\n        return new we(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n      }(t._query, e));\n    }\n  }]);\n\n  return Er;\n}(hr);\n\nfunction Ir() {\n  for (var _len11 = arguments.length, t = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n    t[_key11] = arguments[_key11];\n  }\n\n  return new Er(\"endBefore\", t,\n  /*inclusive=*/\n  !1);\n}\n\nfunction Tr() {\n  for (var _len12 = arguments.length, t = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n    t[_key12] = arguments[_key12];\n  }\n\n  return new Er(\"endAt\", t,\n  /*inclusive=*/\n  !0);\n}\n/** Helper function to create a bound from a document or fields */\n\n\nfunction Ar(t, e, n, r) {\n  if (n[0] = getModularInstance(n[0]), n[0] instanceof ir) return function (t, e, n, r, s) {\n    if (!r) throw new U(N, \"Can't use a DocumentSnapshot that doesn't exist for \".concat(n, \"().\"));\n    var i = []; // Because people expect to continue/end a query at the exact document\n    // provided, we need to use the implicit sort order rather than the explicit\n    // sort order, because it's guaranteed to contain the document key. That way\n    // the position becomes unambiguous and the query continues/ends exactly at\n    // the provided document. Without the key (by using the explicit sort\n    // orders), multiple documents could match the position, yielding duplicate\n    // results.\n\n    var _iterator12 = _createForOfIteratorHelper(_e(t)),\n        _step12;\n\n    try {\n      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n        var _n15 = _step12.value;\n        if (_n15.field.isKeyField()) i.push(zt(e, r.key));else {\n          var _t22 = r.data.field(_n15.field);\n\n          if (Ot(_t22)) throw new U(P, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + _n15.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n\n          if (null === _t22) {\n            var _t23 = _n15.field.canonicalString();\n\n            throw new U(P, \"Invalid query. You are trying to start or end a query using a document for which the field '\".concat(_t23, \"' (used as the orderBy) does not exist.\"));\n          }\n\n          i.push(_t22);\n        }\n      }\n    } catch (err) {\n      _iterator12.e(err);\n    } finally {\n      _iterator12.f();\n    }\n\n    return new he(i, s);\n  }\n  /**\n  * Converts a list of field values to a `Bound` for the given query.\n  */\n  (t._query, t.firestore._databaseId, e, n[0]._document, r);\n  {\n    var s = Ln(t.firestore);\n    return function (t, e, n, r, s, i) {\n      // Use explicit order by's because it has to match the query the user made\n      var o = t.explicitOrderBy;\n      if (s.length > o.length) throw new U(P, \"Too many arguments provided to \".concat(r, \"(). The number of arguments must be less than or equal to the number of orderBy() clauses\"));\n      var u = [];\n\n      for (var _i4 = 0; _i4 < s.length; _i4++) {\n        var c = s[_i4];\n\n        if (o[_i4].field.isKeyField()) {\n          if (\"string\" != typeof c) throw new U(P, \"Invalid query. Expected a string for document ID in \".concat(r, \"(), but got a \").concat(typeof c));\n          if (!ye(t) && -1 !== c.indexOf(\"/\")) throw new U(P, \"Invalid query. When querying a collection and ordering by documentId(), the value passed to \".concat(r, \"() must be a plain document ID, but '\").concat(c, \"' contains a slash.\"));\n\n          var _n16 = t.path.child(tt.fromString(c));\n\n          if (!rt.isDocumentKey(_n16)) throw new U(P, \"Invalid query. When querying a collection group and ordering by documentId(), the value passed to \".concat(r, \"() must result in a valid document path, but '\").concat(_n16, \"' is not because it contains an odd number of segments.\"));\n\n          var _s2 = new rt(_n16);\n\n          u.push(zt(e, _s2));\n        } else {\n          var _t24 = Yn(n, r, c);\n\n          u.push(_t24);\n        }\n      }\n\n      return new he(u, i);\n    }\n    /**\n    * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n    * appropriate errors if the value is anything other than a `DocumentReference`\n    * or `string`, or if the string is malformed.\n    */\n    (t._query, t.firestore._databaseId, s, e, n, r);\n  }\n}\n\nfunction Rr(t, e, n) {\n  if (\"string\" == typeof (n = getModularInstance(n))) {\n    if (\"\" === n) throw new U(P, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n    if (!ye(e) && -1 !== n.indexOf(\"/\")) throw new U(P, \"Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '\".concat(n, \"' contains a '/' character.\"));\n    var r = e.path.child(tt.fromString(n));\n    if (!rt.isDocumentKey(r)) throw new U(P, \"Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '\".concat(r, \"' is not because it has an odd number of segments (\").concat(r.length, \").\"));\n    return zt(t, new rt(r));\n  }\n\n  if (n instanceof vn) return zt(t, n._key);\n  throw new U(P, \"Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: \".concat(ut(n), \".\"));\n}\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */\n\n\nfunction Pr(t, e) {\n  if (!Array.isArray(t) || 0 === t.length) throw new U(P, \"Invalid Query. A non-empty array is required for '\".concat(e.toString(), \"' filters.\"));\n  if (t.length > 10) throw new U(P, \"Invalid Query. '\".concat(e.toString(), \"' filters support a maximum of 10 elements in the value array.\"));\n}\n\nfunction Vr(t, e, n) {\n  if (!n.isEqual(e)) throw new U(P, \"Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '\".concat(e.toString(), \"' and so you must also use '\").concat(e.toString(), \"' as your first argument to orderBy(), but your first orderBy() is on field '\").concat(n.toString(), \"' instead.\"));\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n *\n * @internal\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\n\n\nfunction Nr(t, e, n) {\n  var r; // Cast to `any` in order to satisfy the union type constraint on\n  // toFirestore().\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return r = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, r;\n}\n\nvar $r = /*#__PURE__*/function (_ref12) {\n  _inherits($r, _ref12);\n\n  function $r(t) {\n    var _this36;\n\n    _classCallCheck(this, $r);\n\n    _this36 = _possibleConstructorReturn(this, _getPrototypeOf($r).call(this)), _this36.firestore = t;\n    return _this36;\n  }\n\n  _createClass($r, [{\n    key: \"convertBytes\",\n    value: function convertBytes(t) {\n      return new Vn(t);\n    }\n  }, {\n    key: \"convertReference\",\n    value: function convertReference(t) {\n      var e = this.convertDocumentKey(t, this.firestore._databaseId);\n      return new vn(this.firestore,\n      /* converter= */\n      null, e);\n    }\n  }]);\n\n  return $r;\n}( /*#__PURE__*/function () {\n  function _class5() {\n    _classCallCheck(this, _class5);\n  }\n\n  _createClass(_class5, [{\n    key: \"convertValue\",\n    value: function convertValue(t) {\n      var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"none\";\n\n      switch (Mt(t)) {\n        case 0\n        /* NullValue */\n        :\n          return null;\n\n        case 1\n        /* BooleanValue */\n        :\n          return t.booleanValue;\n\n        case 2\n        /* NumberValue */\n        :\n          return St(t.integerValue || t.doubleValue);\n\n        case 3\n        /* TimestampValue */\n        :\n          return this.convertTimestamp(t.timestampValue);\n\n        case 4\n        /* ServerTimestampValue */\n        :\n          return this.convertServerTimestamp(t, e);\n\n        case 5\n        /* StringValue */\n        :\n          return t.stringValue;\n\n        case 6\n        /* BlobValue */\n        :\n          return this.convertBytes(qt(t.bytesValue));\n\n        case 7\n        /* RefValue */\n        :\n          return this.convertReference(t.referenceValue);\n\n        case 8\n        /* GeoPointValue */\n        :\n          return this.convertGeoPoint(t.geoPointValue);\n\n        case 9\n        /* ArrayValue */\n        :\n          return this.convertArray(t.arrayValue, e);\n\n        case 10\n        /* ObjectValue */\n        :\n          return this.convertObject(t.mapValue, e);\n\n        default:\n          throw b();\n      }\n    }\n  }, {\n    key: \"convertObject\",\n    value: function convertObject(t, e) {\n      var _this37 = this;\n\n      var n = {};\n      return Tt(t.fields, function (t, r) {\n        n[t] = _this37.convertValue(r, e);\n      }), n;\n    }\n  }, {\n    key: \"convertGeoPoint\",\n    value: function convertGeoPoint(t) {\n      return new xn(St(t.latitude), St(t.longitude));\n    }\n  }, {\n    key: \"convertArray\",\n    value: function convertArray(t, e) {\n      var _this38 = this;\n\n      return (t.values || []).map(function (t) {\n        return _this38.convertValue(t, e);\n      });\n    }\n  }, {\n    key: \"convertServerTimestamp\",\n    value: function convertServerTimestamp(t, e) {\n      switch (e) {\n        case \"previous\":\n          var n = kt(t);\n          return null == n ? null : this.convertValue(n, e);\n\n        case \"estimate\":\n          return this.convertTimestamp(Ct(t));\n\n        default:\n          return null;\n      }\n    }\n  }, {\n    key: \"convertTimestamp\",\n    value: function convertTimestamp(t) {\n      var e = Ft(t);\n      return new bt(e.seconds, e.nanos);\n    }\n  }, {\n    key: \"convertDocumentKey\",\n    value: function convertDocumentKey(t, e) {\n      var n = tt.fromString(t);\n      E(tn(n));\n      var r = new X(n.get(1), n.get(3)),\n          s = new rt(n.popFirst(5));\n      return r.isEqual(e) || // TODO(b/64130202): Somehow support foreign references.\n      _(\"Document \".concat(s, \" contains a document reference within a different database (\").concat(r.projectId, \"/\").concat(r.database, \") which is not supported. It will be treated as a reference in the current database (\").concat(e.projectId, \"/\").concat(e.database, \") instead.\")), s;\n    }\n  }]);\n\n  return _class5;\n}());\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */\n\n\nfunction Dr(t) {\n  var e = hn((t = ct(t, vn)).firestore),\n      n = new $r(t.firestore);\n  return on(e, [t._key]).then(function (e) {\n    E(1 === e.length);\n    var r = e[0];\n    return new ir(t.firestore, n, t._key, r.isFoundDocument() ? r : null, t.converter);\n  });\n}\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */\n\n\nfunction xr(t) {\n  !function (t) {\n    if (\"L\"\n    /* Last */\n    === t.limitType && 0 === t.explicitOrderBy.length) throw new U(k, \"limitToLast() queries require specifying at least one orderBy() clause\");\n  }((t = ct(t, bn))._query);\n  var e = hn(t.firestore),\n      n = new $r(t.firestore);\n  return un(e, t._query).then(function (e) {\n    var r = e.map(function (e) {\n      return new or(t.firestore, n, e.key, e, t.converter);\n    });\n    return \"L\"\n    /* Last */\n    === t._query.limitType && // Limit to last queries reverse the orderBy constraint that was\n    // specified by the user. As such, we need to reverse the order of the\n    // results to return the documents in the expected order.\n    r.reverse(), new ur(t, r);\n  });\n}\n\nfunction Fr(t, e, n) {\n  var r = Nr((t = ct(t, vn)).converter, e, n),\n      s = Mn(Ln(t.firestore), \"setDoc\", t._key, r, null !== t.converter, n);\n  return sn(hn(t.firestore), [s.toMutation(t._key, Ve.none())]);\n}\n\nfunction Sr(t, e, n) {\n  var s = Ln((t = ct(t, vn)).firestore); // For Compat types, we have to \"extract\" the underlying types before\n  // performing validation.\n\n  var i;\n\n  for (var _len13 = arguments.length, r = new Array(_len13 > 3 ? _len13 - 3 : 0), _key13 = 3; _key13 < _len13; _key13++) {\n    r[_key13 - 3] = arguments[_key13];\n  }\n\n  i = \"string\" == typeof (e = getModularInstance(e)) || e instanceof Nn ? Kn(s, \"updateDoc\", t._key, e, n, r) : Wn(s, \"updateDoc\", t._key, e);\n  return sn(hn(t.firestore), [i.toMutation(t._key, Ve.exists(!0))]);\n}\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */\n\n\nfunction qr(t) {\n  return sn(hn((t = ct(t, vn)).firestore), [new xe(t._key, Ve.none())]);\n}\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */\n\n\nfunction Or(t, e) {\n  var n = An(t = ct(t, En)),\n      r = Nr(t.converter, e),\n      s = Mn(Ln(t.firestore), \"addDoc\", n._key, r, null !== n.converter, {});\n  return sn(hn(t.firestore), [s.toMutation(n._key, Ve.exists(!1))]).then(function () {\n    return n;\n  });\n}\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Calculates the number of documents in the result set of the given query,\n * without actually downloading the documents.\n *\n * Using this function to count the documents is efficient because only the\n * final count, not the documents' data, is downloaded. This function can even\n * count the documents if the result set would be prohibitively large to\n * download entirely (e.g. thousands of documents).\n *\n * @param query - The query whose result set size to calculate.\n * @returns A Promise that will be resolved with the count; the count can be\n * retrieved from `snapshot.data().count`, where `snapshot` is the\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\n */\n\n\nfunction kr(t) {\n  var e = ct(t.firestore, fn),\n      n = hn(e),\n      r = new $r(e);\n  return new gn(t, n, r).run();\n}\n/**\n * Compares two `AggregateQuerySnapshot` instances for equality.\n *\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\n * underlying queries that compare equal, and the same data.\n *\n * @param left - The first `AggregateQuerySnapshot` to compare.\n * @param right - The second `AggregateQuerySnapshot` to compare.\n *\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\n * otherwise.\n */\n\n\nfunction Cr(t, e) {\n  return Pn(t.query, e.query) && deepEqual(t.data(), e.data());\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */\n\n\nfunction Lr() {\n  return new Un(\"deleteField\");\n}\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */\n\n\nfunction Mr() {\n  return new Bn(\"serverTimestamp\");\n}\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */\n\n\nfunction Ur() {\n  for (var _len14 = arguments.length, t = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n    t[_key14] = arguments[_key14];\n  }\n\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new Qn(\"arrayUnion\", t);\n}\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\n\n\nfunction jr() {\n  for (var _len15 = arguments.length, t = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n    t[_key15] = arguments[_key15];\n  }\n\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new zn(\"arrayRemove\", t);\n}\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */\n\n\nfunction Br(t) {\n  return new Gn(\"increment\", t);\n}\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */\n\n\nvar Qr = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function Qr(t, e) {\n    _classCallCheck(this, Qr);\n\n    this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, this._dataReader = Ln(t);\n  }\n\n  _createClass(Qr, [{\n    key: \"set\",\n    value: function set(t, e, n) {\n      this._verifyNotCommitted();\n\n      var r = zr(t, this._firestore),\n          s = Nr(r.converter, e, n),\n          i = Mn(this._dataReader, \"WriteBatch.set\", r._key, s, null !== r.converter, n);\n      return this._mutations.push(i.toMutation(r._key, Ve.none())), this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(t, e, n) {\n      this._verifyNotCommitted();\n\n      var s = zr(t, this._firestore); // For Compat types, we have to \"extract\" the underlying types before\n      // performing validation.\n\n      var i;\n\n      for (var _len16 = arguments.length, r = new Array(_len16 > 3 ? _len16 - 3 : 0), _key16 = 3; _key16 < _len16; _key16++) {\n        r[_key16 - 3] = arguments[_key16];\n      }\n\n      return i = \"string\" == typeof (e = getModularInstance(e)) || e instanceof Nn ? Kn(this._dataReader, \"WriteBatch.update\", s._key, e, n, r) : Wn(this._dataReader, \"WriteBatch.update\", s._key, e), this._mutations.push(i.toMutation(s._key, Ve.exists(!0))), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `WriteBatch` instance. Used for chaining method calls.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(t) {\n      this._verifyNotCommitted();\n\n      var e = zr(t, this._firestore);\n      return this._mutations = this._mutations.concat(new xe(e._key, Ve.none())), this;\n    }\n    /**\n     * Commits all of the writes in this write batch as a single atomic unit.\n     *\n     * The result of these writes will only be reflected in document reads that\n     * occur after the returned promise resolves. If the client is offline, the\n     * write fails. If you would like to see local modifications or buffer writes\n     * until the client is online, use the full Firestore SDK.\n     *\n     * @returns A `Promise` resolved once all of the writes in the batch have been\n     * successfully written to the backend as an atomic unit (note that it won't\n     * resolve while you're offline).\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n    }\n  }, {\n    key: \"_verifyNotCommitted\",\n    value: function _verifyNotCommitted() {\n      if (this._committed) throw new U(S, \"A write batch can no longer be used after commit() has been called.\");\n    }\n  }]);\n\n  return Qr;\n}();\n\nfunction zr(t, e) {\n  if ((t = getModularInstance(t)).firestore !== e) throw new U(P, \"Provided document reference is from a different Firestore instance.\");\n  return t;\n}\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */\n\n\nfunction Gr(t) {\n  var e = hn(t = ct(t, fn));\n  return new Qr(t, function (t) {\n    return sn(e, t);\n  });\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */\n\n\nvar Wr = /*#__PURE__*/function () {\n  function Wr(t) {\n    _classCallCheck(this, Wr);\n\n    this.datastore = t, // The version of each document that was read during this transaction.\n    this.readVersions = new Map(), this.mutations = [], this.committed = !1,\n    /**\n     * A deferred usage error that occurred previously in this transaction that\n     * will cause the transaction to fail once it actually commits.\n     */\n    this.lastWriteError = null,\n    /**\n     * Set of documents that have been written in the transaction.\n     *\n     * When there's more than one write to the same key in a transaction, any\n     * writes after the first are handled differently.\n     */\n    this.writtenDocs = new Set();\n  }\n\n  _createClass(Wr, [{\n    key: \"lookup\",\n    value: function () {\n      var _lookup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(t) {\n        var _this39 = this;\n\n        var e;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(this.ensureCommitNotCalled(), this.mutations.length > 0)) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw new U(P, \"Firestore transactions require all reads to be executed before all writes.\");\n\n              case 2:\n                _context2.next = 4;\n                return on(this.datastore, t);\n\n              case 4:\n                e = _context2.sent;\n                return _context2.abrupt(\"return\", (e.forEach(function (t) {\n                  return _this39.recordVersion(t);\n                }), e));\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function lookup(_x13) {\n        return _lookup.apply(this, arguments);\n      }\n\n      return lookup;\n    }()\n  }, {\n    key: \"set\",\n    value: function set(t, e) {\n      this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n  }, {\n    key: \"update\",\n    value: function update(t, e) {\n      try {\n        this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n      } catch (t) {\n        this.lastWriteError = t;\n      }\n\n      this.writtenDocs.add(t.toString());\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(t) {\n      this.write(new xe(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n  }, {\n    key: \"commit\",\n    value: function () {\n      var _commit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this40 = this;\n\n        var t;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.ensureCommitNotCalled(), this.lastWriteError)) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                throw this.lastWriteError;\n\n              case 2:\n                t = this.readVersions; // For each mutation, note that the doc was written.\n\n                this.mutations.forEach(function (e) {\n                  t.delete(e.key.toString());\n                });\n                // For each document that was read but not written to, we want to perform\n                // a `verify` operation.\n                t.forEach(function (t, e) {\n                  var n = rt.fromPath(e);\n\n                  _this40.mutations.push(new Fe(n, _this40.precondition(n)));\n                });\n                _context3.next = 7;\n                return sn(this.datastore, this.mutations);\n\n              case 7:\n                this.committed = !0;\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function commit() {\n        return _commit.apply(this, arguments);\n      }\n\n      return commit;\n    }()\n  }, {\n    key: \"recordVersion\",\n    value: function recordVersion(t) {\n      var e;\n      if (t.isFoundDocument()) e = t.version;else {\n        if (!t.isNoDocument()) throw b(); // Represent a deleted doc using SnapshotVersion.min().\n\n        e = Et.min();\n      }\n      var n = this.readVersions.get(t.key.toString());\n\n      if (n) {\n        if (!e.isEqual(n)) // This transaction will fail no matter what.\n          throw new U(q, \"Document version changed between two reads.\");\n      } else this.readVersions.set(t.key.toString(), e);\n    }\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */\n\n  }, {\n    key: \"precondition\",\n    value: function precondition(t) {\n      var e = this.readVersions.get(t.toString());\n      return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(Et.min()) ? Ve.exists(!1) : Ve.updateTime(e) : Ve.none();\n    }\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */\n\n  }, {\n    key: \"preconditionForUpdate\",\n    value: function preconditionForUpdate(t) {\n      var e = this.readVersions.get(t.toString()); // The first time a document is written, we want to take into account the\n      // read time and existence\n\n      if (!this.writtenDocs.has(t.toString()) && e) {\n        if (e.isEqual(Et.min())) // The document doesn't exist, so fail the transaction.\n          // This has to be validated locally because you can't send a\n          // precondition that a document does not exist without changing the\n          // semantics of the backend write to be an insert. This is the reverse\n          // of what we want, since we want to assert that the document doesn't\n          // exist but then send the update and have it fail. Since we can't\n          // express that to the backend, we have to validate locally.\n          // Note: this can change once we can send separate verify writes in the\n          // transaction.\n          throw new U(P, \"Can't update a document that doesn't exist.\"); // Document exists, base precondition on document update time.\n\n        return Ve.updateTime(e);\n      } // Document was not read, so we just use the preconditions for a blind\n      // update.\n\n\n      return Ve.exists(!0);\n    }\n  }, {\n    key: \"write\",\n    value: function write(t) {\n      this.ensureCommitNotCalled(), this.mutations.push(t);\n    }\n  }, {\n    key: \"ensureCommitNotCalled\",\n    value: function ensureCommitNotCalled() {}\n  }]);\n\n  return Wr;\n}();\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar Kr = {\n  maxAttempts: 5\n};\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\n\nvar Yr = /*#__PURE__*/function () {\n  function Yr(t, e, n, r, s) {\n    _classCallCheck(this, Yr);\n\n    this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = r, this.deferred = s, this.Rt = n.maxAttempts, this.Pt = new nn(this.asyncQueue, \"transaction_retry\"\n    /* TransactionRetry */\n    );\n  }\n  /** Runs the transaction and sets the result on deferred. */\n\n\n  _createClass(Yr, [{\n    key: \"run\",\n    value: function run() {\n      this.Rt -= 1, this.Vt();\n    }\n  }, {\n    key: \"Vt\",\n    value: function Vt() {\n      var _this41 = this;\n\n      this.Pt.J( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var t, e;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                t = new Wr(_this41.datastore), e = _this41.Nt(t);\n                e && e.then(function (e) {\n                  _this41.asyncQueue.enqueueAndForget(function () {\n                    return t.commit().then(function () {\n                      _this41.deferred.resolve(e);\n                    }).catch(function (t) {\n                      _this41.$t(t);\n                    });\n                  });\n                }).catch(function (t) {\n                  _this41.$t(t);\n                });\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      })));\n    }\n  }, {\n    key: \"Nt\",\n    value: function Nt(t) {\n      try {\n        var e = this.updateFunction(t);\n        return !ht(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), null);\n      } catch (t) {\n        // Do not retry errors thrown by user provided updateFunction.\n        return this.deferred.reject(t), null;\n      }\n    }\n  }, {\n    key: \"$t\",\n    value: function $t(t) {\n      var _this42 = this;\n\n      this.Rt > 0 && this.Dt(t) ? (this.Rt -= 1, this.asyncQueue.enqueueAndForget(function () {\n        return _this42.Vt(), Promise.resolve();\n      })) : this.deferred.reject(t);\n    }\n  }, {\n    key: \"Dt\",\n    value: function Dt(t) {\n      if (\"FirebaseError\" === t.name) {\n        // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n        // non-matching document versions with ABORTED. These errors should be retried.\n        var e = t.code;\n        return \"aborted\" === e || \"failed-precondition\" === e || \"already-exists\" === e || !\n        /**\n        * Determines whether an error code represents a permanent error when received\n        * in response to a non-write operation.\n        *\n        * See isPermanentWriteError for classifying write errors.\n        */\n        function (t) {\n          switch (t) {\n            default:\n              return b();\n\n            case A:\n            case R:\n            case V:\n            case F:\n            case C:\n            case L: // Unauthenticated means something went wrong with our token and we need\n            // to retry with new credentials which will happen automatically.\n\n            case x:\n              return !1;\n\n            case P:\n            case N:\n            case $:\n            case D:\n            case S: // Aborted might be retried in some scenarios, but that is dependant on\n            // the context and should handled individually by the calling code.\n            // See https://cloud.google.com/apis/design/errors.\n\n            case q:\n            case O:\n            case k:\n            case M:\n              return !0;\n          }\n        }(e);\n      }\n\n      return !1;\n    }\n  }]);\n\n  return Yr;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** The Platform's 'document' implementation or null if not available. */\n\n\nfunction Hr() {\n  // `document` is not always available, e.g. in ReactNative and WebWorkers.\n  // eslint-disable-next-line no-restricted-globals\n  return \"undefined\" != typeof document ? document : null;\n}\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */\n\n\nvar Jr = /*#__PURE__*/function () {\n  function Jr(t, e, n, r, s) {\n    _classCallCheck(this, Jr);\n\n    this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = s, this.deferred = new j(), this.then = this.deferred.promise.then.bind(this.deferred.promise), // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(function (t) {});\n  }\n  /**\n   * Creates and returns a DelayedOperation that has been scheduled to be\n   * executed on the provided asyncQueue after the provided delayMs.\n   *\n   * @param asyncQueue - The queue to schedule the operation on.\n   * @param id - A Timer ID identifying the type of operation this is.\n   * @param delayMs - The delay (ms) before the operation should be scheduled.\n   * @param op - The operation to run.\n   * @param removalCallback - A callback to be called synchronously once the\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\n   *   from its delayedOperations list.\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n   *   the DelayedOperation class public.\n   */\n\n\n  _createClass(Jr, [{\n    key: \"start\",\n\n    /**\n     * Starts the timer. This is called immediately after construction by\n     * createAndSchedule().\n     */\n    value: function start(t) {\n      var _this43 = this;\n\n      this.timerHandle = setTimeout(function () {\n        return _this43.handleDelayElapsed();\n      }, t);\n    }\n    /**\n     * Queues the operation to run immediately (if it hasn't already been run or\n     * canceled).\n     */\n\n  }, {\n    key: \"skipDelay\",\n    value: function skipDelay() {\n      return this.handleDelayElapsed();\n    }\n    /**\n     * Cancels the operation if it hasn't already been executed or canceled. The\n     * promise will be rejected.\n     *\n     * As long as the operation has not yet been run, calling cancel() provides a\n     * guarantee that the operation will not be run.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(t) {\n      null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new U(A, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n    }\n  }, {\n    key: \"handleDelayElapsed\",\n    value: function handleDelayElapsed() {\n      var _this44 = this;\n\n      this.asyncQueue.enqueueAndForget(function () {\n        return null !== _this44.timerHandle ? (_this44.clearTimeout(), _this44.op().then(function (t) {\n          return _this44.deferred.resolve(t);\n        })) : Promise.resolve();\n      });\n    }\n  }, {\n    key: \"clearTimeout\",\n    value: function (_clearTimeout) {\n      function clearTimeout() {\n        return _clearTimeout.apply(this, arguments);\n      }\n\n      clearTimeout.toString = function () {\n        return _clearTimeout.toString();\n      };\n\n      return clearTimeout;\n    }(function () {\n      null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), this.timerHandle = null);\n    })\n  }], [{\n    key: \"createAndSchedule\",\n    value: function createAndSchedule(t, e, n, r, s) {\n      var i = Date.now() + n,\n          o = new Jr(t, e, i, r, s);\n      return o.start(n), o;\n    }\n  }]);\n\n  return Jr;\n}();\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nvar Xr = /*#__PURE__*/function () {\n  function Xr() {\n    var _this45 = this;\n\n    _classCallCheck(this, Xr);\n\n    // The last promise in the queue.\n    this.xt = Promise.resolve(), // A list of retryable operations. Retryable operations are run in order and\n    // retried with backoff.\n    this.Ft = [], // Is this AsyncQueue being shut down? Once it is set to true, it will not\n    // be changed again.\n    this.St = !1, // Operations scheduled to be queued in the future. Operations are\n    // automatically removed after they are run or canceled.\n    this.qt = [], // visible for testing\n    this.Ot = null, // Flag set while there's an outstanding AsyncQueue operation, used for\n    // assertion sanity-checks.\n    this.kt = !1, // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n    this.Ct = !1, // List of TimerIds to fast-forward delays for.\n    this.Lt = [], // Backoff timer used to schedule retries for retryable operations\n    this.Pt = new nn(this, \"async_queue_retry\"\n    /* AsyncQueueRetry */\n    ), // Visibility handler that triggers an immediate retry of all retryable\n    // operations. Meant to speed up recovery when we regain file system access\n    // after page comes into foreground.\n    this.Mt = function () {\n      var t = Hr();\n      t && y(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), _this45.Pt.Z();\n    };\n    var t = Hr();\n    t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.Mt);\n  }\n\n  _createClass(Xr, [{\n    key: \"enqueueAndForget\",\n\n    /**\n     * Adds a new operation to the queue without waiting for it to complete (i.e.\n     * we ignore the Promise result).\n     */\n    value: function enqueueAndForget(t) {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.enqueue(t);\n    }\n  }, {\n    key: \"enqueueAndForgetEvenWhileRestricted\",\n    value: function enqueueAndForgetEvenWhileRestricted(t) {\n      this.Ut(), // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.jt(t);\n    }\n  }, {\n    key: \"enterRestrictedMode\",\n    value: function enterRestrictedMode(t) {\n      if (!this.St) {\n        this.St = !0, this.Ct = t || !1;\n        var e = Hr();\n        e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.Mt);\n      }\n    }\n  }, {\n    key: \"enqueue\",\n    value: function enqueue(t) {\n      var _this46 = this;\n\n      if (this.Ut(), this.St) // Return a Promise which never resolves.\n        return new Promise(function () {}); // Create a deferred Promise that we can return to the callee. This\n      // allows us to return a \"hanging Promise\" only to the callee and still\n      // advance the queue even when the operation is not run.\n\n      var e = new j();\n      return this.jt(function () {\n        return _this46.St && _this46.Ct ? Promise.resolve() : (t().then(e.resolve, e.reject), e.promise);\n      }).then(function () {\n        return e.promise;\n      });\n    }\n  }, {\n    key: \"enqueueRetryable\",\n    value: function enqueueRetryable(t) {\n      var _this47 = this;\n\n      this.enqueueAndForget(function () {\n        return _this47.Ft.push(t), _this47.Bt();\n      });\n    }\n    /**\n     * Runs the next operation from the retryable queue. If the operation fails,\n     * reschedules with backoff.\n     */\n\n  }, {\n    key: \"Bt\",\n    value: function () {\n      var _Bt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this48 = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                if (!(0 !== this.Ft.length)) {\n                  _context5.next = 14;\n                  break;\n                }\n\n                _context5.prev = 1;\n                _context5.next = 4;\n                return this.Ft[0]();\n\n              case 4:\n                this.Ft.shift();\n                this.Pt.reset();\n                _context5.next = 13;\n                break;\n\n              case 8:\n                _context5.prev = 8;\n                _context5.t0 = _context5[\"catch\"](1);\n\n                if (\n                /**\n                * @license\n                * Copyright 2017 Google LLC\n                *\n                * Licensed under the Apache License, Version 2.0 (the \"License\");\n                * you may not use this file except in compliance with the License.\n                * You may obtain a copy of the License at\n                *\n                *   http://www.apache.org/licenses/LICENSE-2.0\n                *\n                * Unless required by applicable law or agreed to in writing, software\n                * distributed under the License is distributed on an \"AS IS\" BASIS,\n                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                * See the License for the specific language governing permissions and\n                * limitations under the License.\n                */\n\n                /** Verifies whether `e` is an IndexedDbTransactionError. */\n                function (t) {\n                  // Use name equality, as instanceof checks on errors don't work with errors\n                  // that wrap other errors.\n                  return \"IndexedDbTransactionError\" === t.name;\n                }\n                /**\n                * @license\n                * Copyright 2020 Google LLC\n                *\n                * Licensed under the Apache License, Version 2.0 (the \"License\");\n                * you may not use this file except in compliance with the License.\n                * You may obtain a copy of the License at\n                *\n                *   http://www.apache.org/licenses/LICENSE-2.0\n                *\n                * Unless required by applicable law or agreed to in writing, software\n                * distributed under the License is distributed on an \"AS IS\" BASIS,\n                * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n                * See the License for the specific language governing permissions and\n                * limitations under the License.\n                */\n                (_context5.t0)) {\n                  _context5.next = 12;\n                  break;\n                }\n\n                throw _context5.t0;\n\n              case 12:\n                // Failure will be handled by AsyncQueue\n                y(\"AsyncQueue\", \"Operation failed with retryable error: \" + _context5.t0);\n\n              case 13:\n                this.Ft.length > 0 && // If there are additional operations, we re-schedule `retryNextOp()`.\n                // This is necessary to run retryable operations that failed during\n                // their initial attempt since we don't know whether they are already\n                // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n                // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n                // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n                // call scheduled here.\n                // Since `backoffAndRun()` cancels an existing backoff and schedules a\n                // new backoff on every call, there is only ever a single additional\n                // operation in the queue.\n                this.Pt.J(function () {\n                  return _this48.Bt();\n                });\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[1, 8]]);\n      }));\n\n      function Bt() {\n        return _Bt.apply(this, arguments);\n      }\n\n      return Bt;\n    }()\n  }, {\n    key: \"jt\",\n    value: function jt(t) {\n      var _this49 = this;\n\n      var e = this.xt.then(function () {\n        return _this49.kt = !0, t().catch(function (t) {\n          _this49.Ot = t, _this49.kt = !1;\n\n          var e =\n          /**\n          * Chrome includes Error.message in Error.stack. Other browsers do not.\n          * This returns expected output of message + stack when available.\n          * @param error - Error or FirestoreError\n          */\n          function (t) {\n            var e = t.message || \"\";\n            t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n            return e;\n          }\n          /**\n          * @license\n          * Copyright 2020 Google LLC\n          *\n          * Licensed under the Apache License, Version 2.0 (the \"License\");\n          * you may not use this file except in compliance with the License.\n          * You may obtain a copy of the License at\n          *\n          *   http://www.apache.org/licenses/LICENSE-2.0\n          *\n          * Unless required by applicable law or agreed to in writing, software\n          * distributed under the License is distributed on an \"AS IS\" BASIS,\n          * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n          * See the License for the specific language governing permissions and\n          * limitations under the License.\n          */\n          // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n          // legacy SDK.\n\n          /**\n          * A reference to a transaction.\n          *\n          * The `Transaction` object passed to a transaction's `updateFunction` provides\n          * the methods to read and write data within the transaction context. See\n          * {@link runTransaction}.\n          */\n          (t); // Re-throw the error so that this.tail becomes a rejected Promise and\n          // all further attempts to chain (via .then) will just short-circuit\n          // and return the rejected Promise.\n\n\n          throw _(\"INTERNAL UNHANDLED ERROR: \", e), t;\n        }).then(function (t) {\n          return _this49.kt = !1, t;\n        });\n      });\n      return this.xt = e, e;\n    }\n  }, {\n    key: \"enqueueAfterDelay\",\n    value: function enqueueAfterDelay(t, e, n) {\n      var _this50 = this;\n\n      this.Ut(), // Fast-forward delays for timerIds that have been overriden.\n      this.Lt.indexOf(t) > -1 && (e = 0);\n      var r = Jr.createAndSchedule(this, t, e, n, function (t) {\n        return _this50.Qt(t);\n      });\n      return this.qt.push(r), r;\n    }\n  }, {\n    key: \"Ut\",\n    value: function Ut() {\n      this.Ot && b();\n    }\n  }, {\n    key: \"verifyOperationInProgress\",\n    value: function verifyOperationInProgress() {}\n    /**\n     * Waits until all currently queued tasks are finished executing. Delayed\n     * operations are not run.\n     */\n\n  }, {\n    key: \"zt\",\n    value: function () {\n      var _zt = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var t;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                t = this.xt;\n                _context6.next = 3;\n                return t;\n\n              case 3:\n                if (t !== this.xt) {\n                  _context6.next = 0;\n                  break;\n                }\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function zt() {\n        return _zt.apply(this, arguments);\n      }\n\n      return zt;\n    }()\n    /**\n     * For Tests: Determine if a delayed operation with a particular TimerId\n     * exists.\n     */\n\n  }, {\n    key: \"Gt\",\n    value: function Gt(t) {\n      var _iterator13 = _createForOfIteratorHelper(this.qt),\n          _step13;\n\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var e = _step13.value;\n          if (e.timerId === t) return !0;\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n\n      return !1;\n    }\n    /**\n     * For Tests: Runs some or all delayed operations early.\n     *\n     * @param lastTimerId - Delayed operations up to and including this TimerId\n     * will be drained. Pass TimerId.All to run all delayed operations.\n     * @returns a Promise that resolves once all operations have been run.\n     */\n\n  }, {\n    key: \"Wt\",\n    value: function Wt(t) {\n      var _this51 = this;\n\n      // Note that draining may generate more delayed ops, so we do that first.\n      return this.zt().then(function () {\n        // Run ops in the same order they'd run if they ran naturally.\n        _this51.qt.sort(function (t, e) {\n          return t.targetTimeMs - e.targetTimeMs;\n        });\n\n        var _iterator14 = _createForOfIteratorHelper(_this51.qt),\n            _step14;\n\n        try {\n          for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n            var e = _step14.value;\n            if (e.skipDelay(), \"all\"\n            /* All */\n            !== t && e.timerId === t) break;\n          }\n        } catch (err) {\n          _iterator14.e(err);\n        } finally {\n          _iterator14.f();\n        }\n\n        return _this51.zt();\n      });\n    }\n    /**\n     * For Tests: Skip all subsequent delays for a timer id.\n     */\n\n  }, {\n    key: \"Kt\",\n    value: function Kt(t) {\n      this.Lt.push(t);\n    }\n    /** Called once a DelayedOperation is run or canceled. */\n\n  }, {\n    key: \"Qt\",\n    value: function Qt(t) {\n      // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n      var e = this.qt.indexOf(t);\n      this.qt.splice(e, 1);\n    }\n  }, {\n    key: \"isShuttingDown\",\n    get: function get() {\n      return this.St;\n    }\n  }]);\n\n  return Xr;\n}();\n\nvar Zr = /*#__PURE__*/function () {\n  /** @hideconstructor */\n  function Zr(t, e) {\n    _classCallCheck(this, Zr);\n\n    this._firestore = t, this._transaction = e, this._dataReader = Ln(t);\n  }\n  /**\n   * Reads the document referenced by the provided {@link DocumentReference}.\n   *\n   * @param documentRef - A reference to the document to be read.\n   * @returns A `DocumentSnapshot` with the read data.\n   */\n\n\n  _createClass(Zr, [{\n    key: \"get\",\n    value: function get(t) {\n      var _this52 = this;\n\n      var e = zr(t, this._firestore),\n          n = new $r(this._firestore);\n      return this._transaction.lookup([e._key]).then(function (t) {\n        if (!t || 1 !== t.length) return b();\n        var r = t[0];\n        if (r.isFoundDocument()) return new ir(_this52._firestore, n, r.key, r, e.converter);\n        if (r.isNoDocument()) return new ir(_this52._firestore, n, e._key, null, e.converter);\n        throw b();\n      });\n    }\n  }, {\n    key: \"set\",\n    value: function set(t, e, n) {\n      var r = zr(t, this._firestore),\n          s = Nr(r.converter, e, n),\n          i = Mn(this._dataReader, \"Transaction.set\", r._key, s, null !== r.converter, n);\n      return this._transaction.set(r._key, i), this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(t, e, n) {\n      var s = zr(t, this._firestore); // For Compat types, we have to \"extract\" the underlying types before\n      // performing validation.\n\n      var i;\n\n      for (var _len17 = arguments.length, r = new Array(_len17 > 3 ? _len17 - 3 : 0), _key17 = 3; _key17 < _len17; _key17++) {\n        r[_key17 - 3] = arguments[_key17];\n      }\n\n      return i = \"string\" == typeof (e = getModularInstance(e)) || e instanceof Nn ? Kn(this._dataReader, \"Transaction.update\", s._key, e, n, r) : Wn(this._dataReader, \"Transaction.update\", s._key, e), this._transaction.update(s._key, i), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `Transaction` instance. Used for chaining method calls.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(t) {\n      var e = zr(t, this._firestore);\n      return this._transaction.delete(e._key), this;\n    }\n  }]);\n\n  return Zr;\n}();\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */\n\n\nfunction ts(t, e, n) {\n  var r = hn(t = ct(t, fn)),\n      s = Object.assign(Object.assign({}, Kr), n);\n  !function (t) {\n    if (t.maxAttempts < 1) throw new U(P, \"Max attempts must be at least 1\");\n  }(s);\n  var i = new j();\n  return new Yr(new Xr(), r, s, function (n) {\n    return e(new Zr(t, n));\n  }, i).run(), i.promise;\n}\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */\n\n\n!function (t) {\n  w = t;\n}(\"\".concat(SDK_VERSION, \"_lite\")), _registerComponent(new Component(\"firestore/lite\", function (t, _ref14) {\n  var e = _ref14.instanceIdentifier,\n      n = _ref14.options;\n  var r = t.getProvider(\"app\").getImmediate(),\n      s = new fn(new G(t.getProvider(\"auth-internal\")), new H(t.getProvider(\"app-check-internal\")), function (t, e) {\n    if (!Object.prototype.hasOwnProperty.apply(t.options, [\"projectId\"])) throw new U(P, '\"projectId\" not provided in firebase.initializeApp.');\n    return new X(t.options.projectId, e);\n  }\n  /**\n  * @license\n  * Copyright 2017 Google LLC\n  *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n  *\n  *   http://www.apache.org/licenses/LICENSE-2.0\n  *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n  (r, e), r);\n  return n && s._setSettings(n), s;\n}, \"PUBLIC\").setMultipleInstances(!0)), // RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\nregisterVersion(\"firestore-lite\", \"3.7.3\", \"\"), registerVersion(\"firestore-lite\", \"3.7.3\", \"esm2017\");\nexport { yn as AggregateField, _n as AggregateQuerySnapshot, Vn as Bytes, En as CollectionReference, vn as DocumentReference, ir as DocumentSnapshot, Nn as FieldPath, Dn as FieldValue, fn as Firestore, U as FirestoreError, xn as GeoPoint, bn as Query, hr as QueryConstraint, or as QueryDocumentSnapshot, ur as QuerySnapshot, bt as Timestamp, Zr as Transaction, Qr as WriteBatch, Or as addDoc, Cr as aggregateQuerySnapshotEqual, jr as arrayRemove, Ur as arrayUnion, In as collection, Tn as collectionGroup, mn as connectFirestoreEmulator, qr as deleteDoc, Lr as deleteField, An as doc, $n as documentId, Tr as endAt, Ir as endBefore, kr as getCount, Dr as getDoc, xr as getDocs, wn as getFirestore, Br as increment, dn as initializeFirestore, yr as limit, _r as limitToLast, mr as orderBy, lr as query, Pn as queryEqual, Rn as refEqual, ts as runTransaction, Mr as serverTimestamp, Fr as setDoc, p as setLogLevel, cr as snapshotEqual, br as startAfter, vr as startAt, pn as terminate, Sr as updateDoc, dr as where, Gr as writeBatch };","map":null,"metadata":{},"sourceType":"module"}