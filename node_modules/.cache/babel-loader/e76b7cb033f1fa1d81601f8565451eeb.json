{"ast":null,"code":"import _toConsumableArray from \"/Users/kong/Desktop/react_introduction/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"/Users/kong/Desktop/react_introduction/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"/Users/kong/Desktop/react_introduction/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kong/Desktop/react_introduction/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kong/Desktop/react_introduction/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kong/Desktop/react_introduction/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar _ERRORS;\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, uuidv4, getGlobal, base64, issuedAtTime, calculateBackoffMillis, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar APP_CHECK_STATES = new Map();\nvar DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nvar DEBUG_STATE = {\n  initialized: false,\n  enabled: false\n};\n/**\r\n * Gets a reference to the state object.\r\n */\n\nfunction getStateReference(app) {\n  return APP_CHECK_STATES.get(app) || Object.assign({}, DEFAULT_STATE);\n}\n/**\r\n * Set once on initialization. The map should hold the same reference to the\r\n * same object until this entry is deleted.\r\n */\n\n\nfunction setInitialState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n  return APP_CHECK_STATES.get(app);\n}\n\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1';\nvar EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\nvar EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD = 'exchangeRecaptchaEnterpriseToken';\nvar EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nvar TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n/**\r\n * One day in millis, for certain error code backoffs.\r\n */\n\nvar ONE_DAY = 24 * 60 * 60 * 1000;\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\n\nvar Refresher = /*#__PURE__*/function () {\n  function Refresher(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    _classCallCheck(this, Refresher);\n\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n\n  _createClass(Refresher, [{\n    key: \"start\",\n    value: function start() {\n      this.nextErrorWaitInterval = this.lowerBound;\n      this.process(true).catch(function () {\n        /* we don't care about the result */\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.pending) {\n        this.pending.reject('cancelled');\n        this.pending = null;\n      }\n    }\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      return !!this.pending;\n    }\n  }, {\n    key: \"process\",\n    value: function () {\n      var _process = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(hasSucceeded) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.stop();\n                _context.prev = 1;\n                this.pending = new Deferred();\n                _context.next = 5;\n                return sleep(this.getNextRun(hasSucceeded));\n\n              case 5:\n                // Why do we resolve a promise, then immediate wait for it?\n                // We do it to make the promise chain cancellable.\n                // We can call stop() which rejects the promise before the following line execute, which makes\n                // the code jump to the catch block.\n                // TODO: unit test this\n                this.pending.resolve();\n                _context.next = 8;\n                return this.pending.promise;\n\n              case 8:\n                this.pending = new Deferred();\n                _context.next = 11;\n                return this.operation();\n\n              case 11:\n                this.pending.resolve();\n                _context.next = 14;\n                return this.pending.promise;\n\n              case 14:\n                this.process(true).catch(function () {\n                  /* we don't care about the result */\n                });\n                _context.next = 20;\n                break;\n\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](1);\n\n                if (this.retryPolicy(_context.t0)) {\n                  this.process(false).catch(function () {\n                    /* we don't care about the result */\n                  });\n                } else {\n                  this.stop();\n                }\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 17]]);\n      }));\n\n      function process(_x) {\n        return _process.apply(this, arguments);\n      }\n\n      return process;\n    }()\n  }, {\n    key: \"getNextRun\",\n    value: function getNextRun(hasSucceeded) {\n      if (hasSucceeded) {\n        // If last operation succeeded, reset next error wait interval and return\n        // the default wait duration.\n        this.nextErrorWaitInterval = this.lowerBound; // Return typical wait duration interval after a successful operation.\n\n        return this.getWaitDuration();\n      } else {\n        // Get next error wait interval.\n        var currentErrorWaitInterval = this.nextErrorWaitInterval; // Double interval for next consecutive error.\n\n        this.nextErrorWaitInterval *= 2; // Make sure next wait interval does not exceed the maximum upper bound.\n\n        if (this.nextErrorWaitInterval > this.upperBound) {\n          this.nextErrorWaitInterval = this.upperBound;\n        }\n\n        return currentErrorWaitInterval;\n      }\n    }\n  }]);\n\n  return Refresher;\n}();\n\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar ERRORS = (_ERRORS = {}, _defineProperty(_ERRORS, \"already-initialized\"\n/* ALREADY_INITIALIZED */\n, 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' + 'different options. To avoid this error, call initializeAppCheck() with the ' + 'same options as when it was originally called. This will return the ' + 'already initialized instance.'), _defineProperty(_ERRORS, \"use-before-activation\"\n/* USE_BEFORE_ACTIVATION */\n, 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' + 'Call initializeAppCheck() before instantiating other Firebase services.'), _defineProperty(_ERRORS, \"fetch-network-error\"\n/* FETCH_NETWORK_ERROR */\n, 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"fetch-parse-error\"\n/* FETCH_PARSE_ERROR */\n, 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"fetch-status-error\"\n/* FETCH_STATUS_ERROR */\n, 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'), _defineProperty(_ERRORS, \"storage-open\"\n/* STORAGE_OPEN */\n, 'Error thrown when opening storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"storage-get\"\n/* STORAGE_GET */\n, 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"storage-set\"\n/* STORAGE_WRITE */\n, 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"recaptcha-error\"\n/* RECAPTCHA_ERROR */\n, 'ReCAPTCHA error.'), _defineProperty(_ERRORS, \"throttled\"\n/* THROTTLED */\n, \"Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}\"), _ERRORS);\nvar ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction getRecaptcha() {\n  var isEnterprise = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n  var _a;\n\n  if (isEnterprise) {\n    return (_a = self.grecaptcha) === null || _a === void 0 ? void 0 : _a.enterprise;\n  }\n\n  return self.grecaptcha;\n}\n\nfunction ensureActivated(app) {\n  if (!getStateReference(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\"\n    /* USE_BEFORE_ACTIVATION */\n    , {\n      appName: app.name\n    });\n  }\n}\n\nfunction getDurationString(durationInMillis) {\n  var totalSeconds = Math.round(durationInMillis / 1000);\n  var days = Math.floor(totalSeconds / (3600 * 24));\n  var hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  var minutes = Math.floor((totalSeconds - days * 3600 * 24 - hours * 3600) / 60);\n  var seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n  var result = '';\n\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value) {\n  if (value === 0) {\n    return '00';\n  }\n\n  return value >= 10 ? value.toString() : '0' + value;\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction exchangeToken(_x2, _x3) {\n  return _exchangeToken.apply(this, arguments);\n}\n\nfunction _exchangeToken() {\n  _exchangeToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref, heartbeatServiceProvider) {\n    var url, body, _a, _b, headers, heartbeatService, heartbeatsHeader, options, response, responseBody, match, timeToLiveAsNumber, now;\n\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            url = _ref.url, body = _ref.body;\n            headers = {\n              'Content-Type': 'application/json'\n            }; // If heartbeat service exists, add heartbeat header string to the header.\n\n            heartbeatService = heartbeatServiceProvider.getImmediate({\n              optional: true\n            });\n\n            if (!heartbeatService) {\n              _context6.next = 8;\n              break;\n            }\n\n            _context6.next = 6;\n            return heartbeatService.getHeartbeatsHeader();\n\n          case 6:\n            heartbeatsHeader = _context6.sent;\n\n            if (heartbeatsHeader) {\n              headers['X-Firebase-Client'] = heartbeatsHeader;\n            }\n\n          case 8:\n            options = {\n              method: 'POST',\n              body: JSON.stringify(body),\n              headers: headers\n            };\n            _context6.prev = 9;\n            _context6.next = 12;\n            return fetch(url, options);\n\n          case 12:\n            response = _context6.sent;\n            _context6.next = 18;\n            break;\n\n          case 15:\n            _context6.prev = 15;\n            _context6.t0 = _context6[\"catch\"](9);\n            throw ERROR_FACTORY.create(\"fetch-network-error\"\n            /* FETCH_NETWORK_ERROR */\n            , {\n              originalErrorMessage: (_a = _context6.t0) === null || _a === void 0 ? void 0 : _a.message\n            });\n\n          case 18:\n            if (!(response.status !== 200)) {\n              _context6.next = 20;\n              break;\n            }\n\n            throw ERROR_FACTORY.create(\"fetch-status-error\"\n            /* FETCH_STATUS_ERROR */\n            , {\n              httpStatus: response.status\n            });\n\n          case 20:\n            _context6.prev = 20;\n            _context6.next = 23;\n            return response.json();\n\n          case 23:\n            responseBody = _context6.sent;\n            _context6.next = 29;\n            break;\n\n          case 26:\n            _context6.prev = 26;\n            _context6.t1 = _context6[\"catch\"](20);\n            throw ERROR_FACTORY.create(\"fetch-parse-error\"\n            /* FETCH_PARSE_ERROR */\n            , {\n              originalErrorMessage: (_b = _context6.t1) === null || _b === void 0 ? void 0 : _b.message\n            });\n\n          case 29:\n            // Protobuf duration format.\n            // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n            match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n\n            if (!(!match || !match[2] || isNaN(Number(match[1])))) {\n              _context6.next = 32;\n              break;\n            }\n\n            throw ERROR_FACTORY.create(\"fetch-parse-error\"\n            /* FETCH_PARSE_ERROR */\n            , {\n              originalErrorMessage: \"ttl field (timeToLive) is not in standard Protobuf Duration \" + \"format: \".concat(responseBody.ttl)\n            });\n\n          case 32:\n            timeToLiveAsNumber = Number(match[1]) * 1000;\n            now = Date.now();\n            return _context6.abrupt(\"return\", {\n              token: responseBody.token,\n              expireTimeMillis: now + timeToLiveAsNumber,\n              issuedAtTimeMillis: now\n            });\n\n          case 35:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[9, 15], [20, 26]]);\n  }));\n  return _exchangeToken.apply(this, arguments);\n}\n\nfunction getExchangeRecaptchaV3TokenRequest(app, reCAPTCHAToken) {\n  var _app$options = app.options,\n      projectId = _app$options.projectId,\n      appId = _app$options.appId,\n      apiKey = _app$options.apiKey;\n  return {\n    url: \"\".concat(BASE_ENDPOINT, \"/projects/\").concat(projectId, \"/apps/\").concat(appId, \":\").concat(EXCHANGE_RECAPTCHA_TOKEN_METHOD, \"?key=\").concat(apiKey),\n    body: {\n      'recaptcha_v3_token': reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeRecaptchaEnterpriseTokenRequest(app, reCAPTCHAToken) {\n  var _app$options2 = app.options,\n      projectId = _app$options2.projectId,\n      appId = _app$options2.appId,\n      apiKey = _app$options2.apiKey;\n  return {\n    url: \"\".concat(BASE_ENDPOINT, \"/projects/\").concat(projectId, \"/apps/\").concat(appId, \":\").concat(EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD, \"?key=\").concat(apiKey),\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  var _app$options3 = app.options,\n      projectId = _app$options3.projectId,\n      appId = _app$options3.appId,\n      apiKey = _app$options3.apiKey;\n  return {\n    url: \"\".concat(BASE_ENDPOINT, \"/projects/\").concat(projectId, \"/apps/\").concat(appId, \":\").concat(EXCHANGE_DEBUG_TOKEN_METHOD, \"?key=\").concat(apiKey),\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DB_NAME = 'firebase-app-check-database';\nvar DB_VERSION = 1;\nvar STORE_NAME = 'firebase-app-check-store';\nvar DEBUG_TOKEN_KEY = 'debug-token';\nvar dbPromise = null;\n\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise(function (resolve, reject) {\n    var _a;\n\n    try {\n      var request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = function (event) {\n        resolve(event.target.result);\n      };\n\n      request.onerror = function (event) {\n        var _a;\n\n        reject(ERROR_FACTORY.create(\"storage-open\"\n        /* STORAGE_OPEN */\n        , {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n\n      request.onupgradeneeded = function (event) {\n        var db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    }\n  });\n  return dbPromise;\n}\n\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\n\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\n\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\n\nfunction write(_x4, _x5) {\n  return _write.apply(this, arguments);\n}\n\nfunction _write() {\n  _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key, value) {\n    var db, transaction, store, request;\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return getDBPromise();\n\n          case 2:\n            db = _context7.sent;\n            transaction = db.transaction(STORE_NAME, 'readwrite');\n            store = transaction.objectStore(STORE_NAME);\n            request = store.put({\n              compositeKey: key,\n              value: value\n            });\n            return _context7.abrupt(\"return\", new Promise(function (resolve, reject) {\n              request.onsuccess = function (_event) {\n                resolve();\n              };\n\n              transaction.onerror = function (event) {\n                var _a;\n\n                reject(ERROR_FACTORY.create(\"storage-set\"\n                /* STORAGE_WRITE */\n                , {\n                  originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n                }));\n              };\n            }));\n\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _write.apply(this, arguments);\n}\n\nfunction read(_x6) {\n  return _read.apply(this, arguments);\n}\n\nfunction _read() {\n  _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(key) {\n    var db, transaction, store, request;\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return getDBPromise();\n\n          case 2:\n            db = _context8.sent;\n            transaction = db.transaction(STORE_NAME, 'readonly');\n            store = transaction.objectStore(STORE_NAME);\n            request = store.get(key);\n            return _context8.abrupt(\"return\", new Promise(function (resolve, reject) {\n              request.onsuccess = function (event) {\n                var result = event.target.result;\n\n                if (result) {\n                  resolve(result.value);\n                } else {\n                  resolve(undefined);\n                }\n              };\n\n              transaction.onerror = function (event) {\n                var _a;\n\n                reject(ERROR_FACTORY.create(\"storage-get\"\n                /* STORAGE_GET */\n                , {\n                  originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n                }));\n              };\n            }));\n\n          case 7:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _read.apply(this, arguments);\n}\n\nfunction computeKey(app) {\n  return \"\".concat(app.options.appId, \"-\").concat(app.name);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar logger = new Logger('@firebase/app-check');\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\n\nfunction readTokenFromStorage(_x7) {\n  return _readTokenFromStorage.apply(this, arguments);\n}\n/**\r\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n */\n\n\nfunction _readTokenFromStorage() {\n  _readTokenFromStorage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(app) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (!isIndexedDBAvailable()) {\n              _context9.next = 12;\n              break;\n            }\n\n            token = undefined;\n            _context9.prev = 2;\n            _context9.next = 5;\n            return readTokenFromIndexedDB(app);\n\n          case 5:\n            token = _context9.sent;\n            _context9.next = 11;\n            break;\n\n          case 8:\n            _context9.prev = 8;\n            _context9.t0 = _context9[\"catch\"](2);\n            // swallow the error and return undefined\n            logger.warn(\"Failed to read token from IndexedDB. Error: \".concat(_context9.t0));\n\n          case 11:\n            return _context9.abrupt(\"return\", token);\n\n          case 12:\n            return _context9.abrupt(\"return\", undefined);\n\n          case 13:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[2, 8]]);\n  }));\n  return _readTokenFromStorage.apply(this, arguments);\n}\n\nfunction writeTokenToStorage(app, token) {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(function (e) {\n      // swallow the error and resolve the promise\n      logger.warn(\"Failed to write token to IndexedDB. Error: \".concat(e));\n    });\n  }\n\n  return Promise.resolve();\n}\n\nfunction readOrCreateDebugTokenFromStorage() {\n  return _readOrCreateDebugTokenFromStorage.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction _readOrCreateDebugTokenFromStorage() {\n  _readOrCreateDebugTokenFromStorage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n    var existingDebugToken, newToken;\n    return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            /**\r\n             * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n             * But it won't happen here, because this function will be called exactly once.\r\n             */\n            existingDebugToken = undefined;\n            _context10.prev = 1;\n            _context10.next = 4;\n            return readDebugTokenFromIndexedDB();\n\n          case 4:\n            existingDebugToken = _context10.sent;\n            _context10.next = 9;\n            break;\n\n          case 7:\n            _context10.prev = 7;\n            _context10.t0 = _context10[\"catch\"](1);\n\n          case 9:\n            if (existingDebugToken) {\n              _context10.next = 15;\n              break;\n            }\n\n            // create a new debug token\n            newToken = uuidv4(); // We don't need to block on writing to indexeddb\n            // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n            // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n            // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n            // You should switch to a different browser that supports indexeddb\n\n            writeDebugTokenToIndexedDB(newToken).catch(function (e) {\n              return logger.warn(\"Failed to persist debug token to IndexedDB. Error: \".concat(e));\n            });\n            return _context10.abrupt(\"return\", newToken);\n\n          case 15:\n            return _context10.abrupt(\"return\", existingDebugToken);\n\n          case 16:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[1, 7]]);\n  }));\n  return _readOrCreateDebugTokenFromStorage.apply(this, arguments);\n}\n\nfunction isDebugMode() {\n  var debugState = getDebugState();\n  return debugState.enabled;\n}\n\nfunction getDebugToken() {\n  return _getDebugToken.apply(this, arguments);\n}\n\nfunction _getDebugToken() {\n  _getDebugToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n    var state;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            state = getDebugState();\n\n            if (!(state.enabled && state.token)) {\n              _context11.next = 5;\n              break;\n            }\n\n            return _context11.abrupt(\"return\", state.token.promise);\n\n          case 5:\n            throw Error(\"\\n            Can't get debug token in production mode.\\n        \");\n\n          case 6:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _getDebugToken.apply(this, arguments);\n}\n\nfunction initializeDebugMode() {\n  var globals = getGlobal();\n  var debugState = getDebugState(); // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n\n  debugState.initialized = true;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n\n  debugState.enabled = true;\n  var deferredToken = new Deferred();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\n\n\nvar defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\n\nfunction formatDummyToken(tokenErrorData) {\n  return base64.encodeString(JSON.stringify(tokenErrorData),\n  /* webSafe= */\n  false);\n}\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\n\n\nfunction getToken$2(_x8) {\n  return _getToken$.apply(this, arguments);\n}\n\nfunction _getToken$() {\n  _getToken$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(appCheck) {\n    var forceRefresh,\n        app,\n        state,\n        token,\n        error,\n        cachedToken,\n        shouldCallListeners,\n        tokenFromDebugExchange,\n        interopTokenResult,\n        _args12 = arguments;\n    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            forceRefresh = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : false;\n            app = appCheck.app;\n            ensureActivated(app);\n            state = getStateReference(app);\n            /**\r\n             * First check if there is a token in memory from a previous `getToken()` call.\r\n             */\n\n            token = state.token;\n            error = undefined;\n            /**\r\n             * If an invalid token was found in memory, clear token from\r\n             * memory and unset the local variable `token`.\r\n             */\n\n            if (token && !isValid(token)) {\n              state.token = undefined;\n              token = undefined;\n            }\n            /**\r\n             * If there is no valid token in memory, try to load token from indexedDB.\r\n             */\n\n\n            if (token) {\n              _context12.next = 18;\n              break;\n            }\n\n            _context12.next = 10;\n            return state.cachedTokenPromise;\n\n          case 10:\n            cachedToken = _context12.sent;\n\n            if (!cachedToken) {\n              _context12.next = 18;\n              break;\n            }\n\n            if (!isValid(cachedToken)) {\n              _context12.next = 16;\n              break;\n            }\n\n            token = cachedToken;\n            _context12.next = 18;\n            break;\n\n          case 16:\n            _context12.next = 18;\n            return writeTokenToStorage(app, undefined);\n\n          case 18:\n            if (!(!forceRefresh && token && isValid(token))) {\n              _context12.next = 20;\n              break;\n            }\n\n            return _context12.abrupt(\"return\", {\n              token: token.token\n            });\n\n          case 20:\n            // Only set to true if this `getToken()` call is making the actual\n            // REST call to the exchange endpoint, versus waiting for an already\n            // in-flight call (see debug and regular exchange endpoint paths below)\n            shouldCallListeners = false;\n            /**\r\n             * DEBUG MODE\r\n             * If debug mode is set, and there is no cached token, fetch a new App\r\n             * Check token using the debug token, and return it directly.\r\n             */\n\n            if (!isDebugMode()) {\n              _context12.next = 40;\n              break;\n            }\n\n            if (state.exchangeTokenPromise) {\n              _context12.next = 33;\n              break;\n            }\n\n            _context12.t0 = exchangeToken;\n            _context12.t1 = getExchangeDebugTokenRequest;\n            _context12.t2 = app;\n            _context12.next = 28;\n            return getDebugToken();\n\n          case 28:\n            _context12.t3 = _context12.sent;\n            _context12.t4 = (0, _context12.t1)(_context12.t2, _context12.t3);\n            _context12.t5 = appCheck.heartbeatServiceProvider;\n            state.exchangeTokenPromise = (0, _context12.t0)(_context12.t4, _context12.t5).finally(function () {\n              // Clear promise when settled - either resolved or rejected.\n              state.exchangeTokenPromise = undefined;\n            });\n            shouldCallListeners = true;\n\n          case 33:\n            _context12.next = 35;\n            return state.exchangeTokenPromise;\n\n          case 35:\n            tokenFromDebugExchange = _context12.sent;\n            _context12.next = 38;\n            return writeTokenToStorage(app, tokenFromDebugExchange);\n\n          case 38:\n            // Write debug token to state.\n            state.token = tokenFromDebugExchange;\n            return _context12.abrupt(\"return\", {\n              token: tokenFromDebugExchange.token\n            });\n\n          case 40:\n            _context12.prev = 40;\n\n            // Avoid making another call to the exchange endpoint if one is in flight.\n            if (!state.exchangeTokenPromise) {\n              // state.provider is populated in initializeAppCheck()\n              // ensureActivated() at the top of this function checks that\n              // initializeAppCheck() has been called.\n              state.exchangeTokenPromise = state.provider.getToken().finally(function () {\n                // Clear promise when settled - either resolved or rejected.\n                state.exchangeTokenPromise = undefined;\n              });\n              shouldCallListeners = true;\n            }\n\n            _context12.next = 44;\n            return getStateReference(app).exchangeTokenPromise;\n\n          case 44:\n            token = _context12.sent;\n            _context12.next = 51;\n            break;\n\n          case 47:\n            _context12.prev = 47;\n            _context12.t6 = _context12[\"catch\"](40);\n\n            if (_context12.t6.code === \"appCheck/\".concat(\"throttled\"\n            /* THROTTLED */\n            )) {\n              // Warn if throttled, but do not treat it as an error.\n              logger.warn(_context12.t6.message);\n            } else {\n              // `getToken()` should never throw, but logging error text to console will aid debugging.\n              logger.error(_context12.t6);\n            } // Always save error to be added to dummy token.\n\n\n            error = _context12.t6;\n\n          case 51:\n            if (token) {\n              _context12.next = 55;\n              break;\n            }\n\n            // If token is undefined, there must be an error.\n            // Return a dummy token along with the error.\n            interopTokenResult = makeDummyTokenResult(error);\n            _context12.next = 63;\n            break;\n\n          case 55:\n            if (!error) {\n              _context12.next = 59;\n              break;\n            }\n\n            if (isValid(token)) {\n              // It's also possible a valid token exists, but there's also an error.\n              // (Such as if the token is almost expired, tries to refresh, and\n              // the exchange request fails.)\n              // We add a special error property here so that the refresher will\n              // count this as a failed attempt and use the backoff instead of\n              // retrying repeatedly with no delay, but any 3P listeners will not\n              // be hindered in getting the still-valid token.\n              interopTokenResult = {\n                token: token.token,\n                internalError: error\n              };\n            } else {\n              // No invalid tokens should make it to this step. Memory and cached tokens\n              // are checked. Other tokens are from fresh exchanges. But just in case.\n              interopTokenResult = makeDummyTokenResult(error);\n            }\n\n            _context12.next = 63;\n            break;\n\n          case 59:\n            interopTokenResult = {\n              token: token.token\n            }; // write the new token to the memory state as well as the persistent storage.\n            // Only do it if we got a valid new token\n\n            state.token = token;\n            _context12.next = 63;\n            return writeTokenToStorage(app, token);\n\n          case 63:\n            if (shouldCallListeners) {\n              notifyTokenListeners(app, interopTokenResult);\n            }\n\n            return _context12.abrupt(\"return\", interopTokenResult);\n\n          case 65:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12, null, [[40, 47]]);\n  }));\n  return _getToken$.apply(this, arguments);\n}\n\nfunction _addTokenListener(appCheck, type, listener, onError) {\n  var app = appCheck.app;\n  var state = getStateReference(app);\n  var tokenObserver = {\n    next: listener,\n    error: onError,\n    type: type\n  };\n  state.tokenObservers = [].concat(_toConsumableArray(state.tokenObservers), [tokenObserver]); // Invoke the listener async immediately if there is a valid token\n  // in memory.\n\n  if (state.token && isValid(state.token)) {\n    var validToken = state.token;\n    Promise.resolve().then(function () {\n      listener({\n        token: validToken.token\n      });\n      initTokenRefresher(appCheck);\n    }).catch(function () {\n      /* we don't care about exceptions thrown in listeners */\n    });\n  }\n  /**\r\n   * Wait for any cached token promise to resolve before starting the token\r\n   * refresher. The refresher checks to see if there is an existing token\r\n   * in state and calls the exchange endpoint if not. We should first let the\r\n   * IndexedDB check have a chance to populate state if it can.\r\n   *\r\n   * Listener call isn't needed here because cachedTokenPromise will call any\r\n   * listeners that exist when it resolves.\r\n   */\n  // state.cachedTokenPromise is always populated in `activate()`.\n\n\n  void state.cachedTokenPromise.then(function () {\n    return initTokenRefresher(appCheck);\n  });\n}\n\nfunction _removeTokenListener(app, listener) {\n  var state = getStateReference(app);\n  var newObservers = state.tokenObservers.filter(function (tokenObserver) {\n    return tokenObserver.next !== listener;\n  });\n\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n\n  state.tokenObservers = newObservers;\n}\n/**\r\n * Logic to create and start refresher as needed.\r\n */\n\n\nfunction initTokenRefresher(appCheck) {\n  var app = appCheck.app;\n  var state = getStateReference(app); // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n\n  var refresher = state.tokenRefresher;\n\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    state.tokenRefresher = refresher;\n  }\n\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck) {\n  var app = appCheck.app;\n  return new Refresher(\n  /*#__PURE__*/\n  // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var state, result;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            state = getStateReference(app); // If there is no token, we will try to load it from storage and use it\n            // If there is a token, we force refresh it because we know it's going to expire soon\n\n            if (state.token) {\n              _context2.next = 7;\n              break;\n            }\n\n            _context2.next = 4;\n            return getToken$2(appCheck);\n\n          case 4:\n            result = _context2.sent;\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.next = 9;\n            return getToken$2(appCheck, true);\n\n          case 9:\n            result = _context2.sent;\n\n          case 10:\n            if (!result.error) {\n              _context2.next = 12;\n              break;\n            }\n\n            throw result.error;\n\n          case 12:\n            if (!result.internalError) {\n              _context2.next = 14;\n              break;\n            }\n\n            throw result.internalError;\n\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), function () {\n    return true;\n  }, function () {\n    var state = getStateReference(app);\n\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      var nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000; // Do not allow refresh time to be past (expireTime - 5 minutes)\n\n      var latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\n\nfunction notifyTokenListeners(app, token) {\n  var observers = getStateReference(app).tokenObservers;\n\n  var _iterator = _createForOfIteratorHelper(observers),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var observer = _step.value;\n\n      try {\n        if (observer.type === \"EXTERNAL\"\n        /* EXTERNAL */\n        && token.error != null) {\n          // If this listener was added by a 3P call, send any token error to\n          // the supplied error handler. A 3P observer always has an error\n          // handler.\n          observer.error(token.error);\n        } else {\n          // If the token has no error field, always return the token.\n          // If this is a 2P listener, return the token, whether or not it\n          // has an error field.\n          observer.next(token);\n        }\n      } catch (e) {// Errors in the listener function itself are always ignored.\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error: error\n  };\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * AppCheck Service class.\r\n */\n\n\nvar AppCheckService = /*#__PURE__*/function () {\n  function AppCheckService(app, heartbeatServiceProvider) {\n    _classCallCheck(this, AppCheckService);\n\n    this.app = app;\n    this.heartbeatServiceProvider = heartbeatServiceProvider;\n  }\n\n  _createClass(AppCheckService, [{\n    key: \"_delete\",\n    value: function _delete() {\n      var _getStateReference = getStateReference(this.app),\n          tokenObservers = _getStateReference.tokenObservers;\n\n      var _iterator2 = _createForOfIteratorHelper(tokenObservers),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tokenObserver = _step2.value;\n\n          _removeTokenListener(this.app, tokenObserver.next);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return Promise.resolve();\n    }\n  }]);\n\n  return AppCheckService;\n}();\n\nfunction factory(app, heartbeatServiceProvider) {\n  return new AppCheckService(app, heartbeatServiceProvider);\n}\n\nfunction internalFactory(appCheck) {\n  return {\n    getToken: function getToken(forceRefresh) {\n      return getToken$2(appCheck, forceRefresh);\n    },\n    addTokenListener: function addTokenListener(listener) {\n      return _addTokenListener(appCheck, \"INTERNAL\"\n      /* INTERNAL */\n      , listener);\n    },\n    removeTokenListener: function removeTokenListener(listener) {\n      return _removeTokenListener(appCheck.app, listener);\n    }\n  };\n}\n\nvar name = \"@firebase/app-check\";\nvar version = \"0.5.17\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nvar RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js';\n\nfunction initializeV3(app, siteKey) {\n  var initialized = new Deferred();\n  var state = getStateReference(app);\n  state.reCAPTCHAState = {\n    initialized: initialized\n  };\n  var divId = makeDiv(app);\n  var grecaptcha = getRecaptcha(false);\n\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(function () {\n      var grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n\n  return initialized.promise;\n}\n\nfunction initializeEnterprise(app, siteKey) {\n  var initialized = new Deferred();\n  var state = getStateReference(app);\n  state.reCAPTCHAState = {\n    initialized: initialized\n  };\n  var divId = makeDiv(app);\n  var grecaptcha = getRecaptcha(true);\n\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(function () {\n      var grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n\n  return initialized.promise;\n}\n/**\r\n * Add listener to render the widget and resolve the promise when\r\n * the grecaptcha.ready() event fires.\r\n */\n\n\nfunction queueWidgetRender(app, siteKey, grecaptcha, container, initialized) {\n  grecaptcha.ready(function () {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n/**\r\n * Add invisible div to page.\r\n */\n\n\nfunction makeDiv(app) {\n  var divId = \"fire_app_check_\".concat(app.name);\n  var invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nfunction getToken$1(_x9) {\n  return _getToken$2.apply(this, arguments);\n}\n/**\r\n *\r\n * @param app\r\n * @param container - Id of a HTML element.\r\n */\n\n\nfunction _getToken$2() {\n  _getToken$2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(app) {\n    var reCAPTCHAState, recaptcha;\n    return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            ensureActivated(app); // ensureActivated() guarantees that reCAPTCHAState is set\n\n            reCAPTCHAState = getStateReference(app).reCAPTCHAState;\n            _context13.next = 4;\n            return reCAPTCHAState.initialized.promise;\n\n          case 4:\n            recaptcha = _context13.sent;\n            return _context13.abrupt(\"return\", new Promise(function (resolve, _reject) {\n              // Updated after initialization is complete.\n              var reCAPTCHAState = getStateReference(app).reCAPTCHAState;\n              recaptcha.ready(function () {\n                resolve( // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n                recaptcha.execute(reCAPTCHAState.widgetId, {\n                  action: 'fire_app_check'\n                }));\n              });\n            }));\n\n          case 6:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  }));\n  return _getToken$2.apply(this, arguments);\n}\n\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  var widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n  var state = getStateReference(app);\n  state.reCAPTCHAState = Object.assign(Object.assign({}, state.reCAPTCHAState), {\n    // state.reCAPTCHAState is set in the initialize()\n    widgetId: widgetId\n  });\n}\n\nfunction loadReCAPTCHAV3Script(onload) {\n  var script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload) {\n  var script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nvar ReCaptchaV3Provider = /*#__PURE__*/function () {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  function ReCaptchaV3Provider(_siteKey) {\n    _classCallCheck(this, ReCaptchaV3Provider);\n\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  _createClass(ReCaptchaV3Provider, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _a, _b, attestedClaimsToken, result;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throwIfThrottled(this._throttleData); // Top-level `getToken()` has already checked that App Check is initialized\n                // and therefore this._app and this._heartbeatServiceProvider are available.\n\n                _context3.next = 3;\n                return getToken$1(this._app).catch(function (_e) {\n                  // reCaptcha.execute() throws null which is not very descriptive.\n                  throw ERROR_FACTORY.create(\"recaptcha-error\"\n                  /* RECAPTCHA_ERROR */\n                  );\n                });\n\n              case 3:\n                attestedClaimsToken = _context3.sent;\n                _context3.prev = 4;\n                _context3.next = 7;\n                return exchangeToken(getExchangeRecaptchaV3TokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\n\n              case 7:\n                result = _context3.sent;\n                _context3.next = 18;\n                break;\n\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](4);\n\n                if (!((_a = _context3.t0.code) === null || _a === void 0 ? void 0 : _a.includes(\"fetch-status-error\"\n                /* FETCH_STATUS_ERROR */\n                ))) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                this._throttleData = setBackoff(Number((_b = _context3.t0.customData) === null || _b === void 0 ? void 0 : _b.httpStatus), this._throttleData);\n                throw ERROR_FACTORY.create(\"throttled\"\n                /* THROTTLED */\n                , {\n                  time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n                  httpStatus: this._throttleData.httpStatus\n                });\n\n              case 17:\n                throw _context3.t0;\n\n              case 18:\n                // If successful, clear throttle data.\n                this._throttleData = null;\n                return _context3.abrupt(\"return\", result);\n\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 10]]);\n      }));\n\n      function getToken() {\n        return _getToken.apply(this, arguments);\n      }\n\n      return getToken;\n    }()\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize(app) {\n      this._app = app;\n      this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n      initializeV3(app, this._siteKey).catch(function () {\n        /* we don't care about the initialization result */\n      });\n    }\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(otherProvider) {\n      if (otherProvider instanceof ReCaptchaV3Provider) {\n        return this._siteKey === otherProvider._siteKey;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return ReCaptchaV3Provider;\n}();\n/**\r\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\n\n\nvar ReCaptchaEnterpriseProvider = /*#__PURE__*/function () {\n  /**\r\n   * Create a ReCaptchaEnterpriseProvider instance.\r\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\r\n   */\n  function ReCaptchaEnterpriseProvider(_siteKey) {\n    _classCallCheck(this, ReCaptchaEnterpriseProvider);\n\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n\n\n  _createClass(ReCaptchaEnterpriseProvider, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _a, _b, attestedClaimsToken, result;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                throwIfThrottled(this._throttleData); // Top-level `getToken()` has already checked that App Check is initialized\n                // and therefore this._app and this._heartbeatServiceProvider are available.\n\n                _context4.next = 3;\n                return getToken$1(this._app).catch(function (_e) {\n                  // reCaptcha.execute() throws null which is not very descriptive.\n                  throw ERROR_FACTORY.create(\"recaptcha-error\"\n                  /* RECAPTCHA_ERROR */\n                  );\n                });\n\n              case 3:\n                attestedClaimsToken = _context4.sent;\n                _context4.prev = 4;\n                _context4.next = 7;\n                return exchangeToken(getExchangeRecaptchaEnterpriseTokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\n\n              case 7:\n                result = _context4.sent;\n                _context4.next = 18;\n                break;\n\n              case 10:\n                _context4.prev = 10;\n                _context4.t0 = _context4[\"catch\"](4);\n\n                if (!((_a = _context4.t0.code) === null || _a === void 0 ? void 0 : _a.includes(\"fetch-status-error\"\n                /* FETCH_STATUS_ERROR */\n                ))) {\n                  _context4.next = 17;\n                  break;\n                }\n\n                this._throttleData = setBackoff(Number((_b = _context4.t0.customData) === null || _b === void 0 ? void 0 : _b.httpStatus), this._throttleData);\n                throw ERROR_FACTORY.create(\"throttled\"\n                /* THROTTLED */\n                , {\n                  time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n                  httpStatus: this._throttleData.httpStatus\n                });\n\n              case 17:\n                throw _context4.t0;\n\n              case 18:\n                // If successful, clear throttle data.\n                this._throttleData = null;\n                return _context4.abrupt(\"return\", result);\n\n              case 20:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[4, 10]]);\n      }));\n\n      function getToken() {\n        return _getToken2.apply(this, arguments);\n      }\n\n      return getToken;\n    }()\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize(app) {\n      this._app = app;\n      this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n      initializeEnterprise(app, this._siteKey).catch(function () {\n        /* we don't care about the initialization result */\n      });\n    }\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(otherProvider) {\n      if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n        return this._siteKey === otherProvider._siteKey;\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return ReCaptchaEnterpriseProvider;\n}();\n/**\r\n * Custom provider class.\r\n * @public\r\n */\n\n\nvar CustomProvider = /*#__PURE__*/function () {\n  function CustomProvider(_customProviderOptions) {\n    _classCallCheck(this, CustomProvider);\n\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n\n\n  _createClass(CustomProvider, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var customToken, issuedAtTimeSeconds, issuedAtTimeMillis;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._customProviderOptions.getToken();\n\n              case 2:\n                customToken = _context5.sent;\n                // Try to extract IAT from custom token, in case this token is not\n                // being newly issued. JWT timestamps are in seconds since epoch.\n                issuedAtTimeSeconds = issuedAtTime(customToken.token); // Very basic validation, use current timestamp as IAT if JWT\n                // has no `iat` field or value is out of bounds.\n\n                issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n                return _context5.abrupt(\"return\", Object.assign(Object.assign({}, customToken), {\n                  issuedAtTimeMillis: issuedAtTimeMillis\n                }));\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getToken() {\n        return _getToken3.apply(this, arguments);\n      }\n\n      return getToken;\n    }()\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"initialize\",\n    value: function initialize(app) {\n      this._app = app;\n    }\n    /**\r\n     * @internal\r\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(otherProvider) {\n      if (otherProvider instanceof CustomProvider) {\n        return this._customProviderOptions.getToken.toString() === otherProvider._customProviderOptions.getToken.toString();\n      } else {\n        return false;\n      }\n    }\n  }]);\n\n  return CustomProvider;\n}();\n/**\r\n * Set throttle data to block requests until after a certain time\r\n * depending on the failed request's status code.\r\n * @param httpStatus - Status code of failed request.\r\n * @param throttleData - `ThrottleData` object containing previous throttle\r\n * data state.\r\n * @returns Data about current throttle state and expiration time.\r\n */\n\n\nfunction setBackoff(httpStatus, throttleData) {\n  /**\r\n   * Block retries for 1 day for the following error codes:\r\n   *\r\n   * 404: Likely malformed URL.\r\n   *\r\n   * 403:\r\n   * - Attestation failed\r\n   * - Wrong API key\r\n   * - Project deleted\r\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus: httpStatus\n    };\n  } else {\n    /**\r\n     * For all other error codes, the time when it is ok to retry again\r\n     * is based on exponential backoff.\r\n     */\n    var backoffCount = throttleData ? throttleData.backoffCount : 0;\n    var backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus: httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData) {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(\"throttled\"\n      /* THROTTLED */\n      , {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\n\n\nfunction initializeAppCheck() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n\n  var provider = _getProvider(app, 'app-check'); // Ensure initializeDebugMode() is only called once.\n\n\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  } // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n\n\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(function (token) {\n      return (// Not using logger because I don't think we ever want this accidentally hidden.\n        console.log(\"App Check debug token: \".concat(token, \". You will need to add it to your app's App Check settings in the Firebase console for it to work.\"))\n      );\n    });\n  }\n\n  if (provider.isInitialized()) {\n    var existingInstance = provider.getImmediate();\n    var initialOptions = provider.getOptions();\n\n    if (initialOptions.isTokenAutoRefreshEnabled === options.isTokenAutoRefreshEnabled && initialOptions.provider.isEqual(options.provider)) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\"\n      /* ALREADY_INITIALIZED */\n      , {\n        appName: app.name\n      });\n    }\n  }\n\n  var appCheck = provider.initialize({\n    options: options\n  });\n\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled); // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n\n\n  if (getStateReference(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    _addTokenListener(appCheck, \"INTERNAL\"\n    /* INTERNAL */\n    , function () {});\n  }\n\n  return appCheck;\n}\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\n\n\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\n  // Create an entry in the APP_CHECK_STATES map. Further changes should\n  // directly mutate this object.\n  var state = setInitialState(app, Object.assign({}, DEFAULT_STATE));\n  state.activated = true;\n  state.provider = provider; // Read cached token from storage if it exists and store it in memory.\n\n  state.cachedTokenPromise = readTokenFromStorage(app).then(function (cachedToken) {\n    if (cachedToken && isValid(cachedToken)) {\n      state.token = cachedToken; // notify all listeners with the cached token\n\n      notifyTokenListeners(app, {\n        token: cachedToken.token\n      });\n    }\n\n    return cachedToken;\n  }); // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  state.provider.initialize(app);\n}\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\n\n\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\n  var app = appCheckInstance.app;\n  var state = getStateReference(app); // This will exist if any product libraries have called\n  // `addTokenListener()`\n\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled;\n}\n/**\r\n * Get the current App Check token. Attaches to the most recent\r\n * in-flight request if one is present. Returns null if no token\r\n * is present and no token requests are in-flight.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\n\n\nfunction getToken(_x10, _x11) {\n  return _getToken4.apply(this, arguments);\n}\n/**\r\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n * pattern for public use.\r\n */\n\n\nfunction _getToken4() {\n  _getToken4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(appCheckInstance, forceRefresh) {\n    var result;\n    return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            _context14.next = 2;\n            return getToken$2(appCheckInstance, forceRefresh);\n\n          case 2:\n            result = _context14.sent;\n\n            if (!result.error) {\n              _context14.next = 5;\n              break;\n            }\n\n            throw result.error;\n\n          case 5:\n            return _context14.abrupt(\"return\", {\n              token: result.token\n            });\n\n          case 6:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  }));\n  return _getToken4.apply(this, arguments);\n}\n\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  var nextFn = function nextFn() {};\n\n  var errorFn = function errorFn() {};\n\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n\n  _addTokenListener(appCheckInstance, \"EXTERNAL\"\n  /* EXTERNAL */\n  , nextFn, errorFn);\n\n  return function () {\n    return _removeTokenListener(appCheckInstance.app, nextFn);\n  };\n}\n/**\r\n * Firebase App Check\r\n *\r\n * @packageDocumentation\r\n */\n\n\nvar APP_CHECK_NAME = 'app-check';\nvar APP_CHECK_NAME_INTERNAL = 'app-check-internal';\n\nfunction registerAppCheck() {\n  // The public interface\n  _registerComponent(new Component(APP_CHECK_NAME, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var heartbeatServiceProvider = container.getProvider('heartbeat');\n    return factory(app, heartbeatServiceProvider);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  )\n  /**\r\n   * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n   * other Firebase SDKs\r\n   */\n  .setInstanceCreatedCallback(function (container, _identifier, _appcheckService) {\n    container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n  })); // The internal interface used by other Firebase products\n\n\n  _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, function (container) {\n    var appCheck = container.getProvider('app-check').getImmediate();\n    return internalFactory(appCheck);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setInstantiationMode(\"EXPLICIT\"\n  /* EXPLICIT */\n  ));\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\nexport { CustomProvider, ReCaptchaEnterpriseProvider, ReCaptchaV3Provider, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };","map":null,"metadata":{},"sourceType":"module"}