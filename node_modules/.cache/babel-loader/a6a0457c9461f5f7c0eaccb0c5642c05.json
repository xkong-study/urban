{"ast":null,"code":"import { createStore } from 'redux';\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\n\nfunction counter() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n\n    case 'DECREMENT':\n      return state - 1;\n\n    default:\n      return state;\n  }\n} // 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\n\n\nvar store = createStore(counter); // 可以手动订阅更新，也可以事件绑定到视图层。\n\nstore.subscribe(function () {\n  return console.log(store.getState());\n}); // 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\n\nstore.dispatch({\n  type: 'INCREMENT'\n}); // 1\n\nstore.dispatch({\n  type: 'INCREMENT'\n}); // 2\n\nstore.dispatch({\n  type: 'DECREMENT'\n});","map":{"version":3,"sources":["/Users/kong/Desktop/react_introduction/urban_react/src/store/reducer.js"],"names":["createStore","counter","state","action","type","store","subscribe","console","log","getState","dispatch"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,GAAoC;AAAA,MAAnBC,KAAmB,uEAAX,CAAW;AAAA,MAARC,MAAQ;;AAClC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,aAAOF,KAAK,GAAG,CAAf;;AACF,SAAK,WAAL;AACE,aAAOA,KAAK,GAAG,CAAf;;AACF;AACE,aAAOA,KAAP;AANJ;AAQD,C,CAED;AACA;;;AACA,IAAIG,KAAK,GAAGL,WAAW,CAACC,OAAD,CAAvB,C,CAEA;;AACAI,KAAK,CAACC,SAAN,CAAgB;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAYH,KAAK,CAACI,QAAN,EAAZ,CAAN;AAAA,CAAhB,E,CAEA;AACA;;AACAJ,KAAK,CAACK,QAAN,CAAe;AAAEN,EAAAA,IAAI,EAAE;AAAR,CAAf,E,CACA;;AACAC,KAAK,CAACK,QAAN,CAAe;AAAEN,EAAAA,IAAI,EAAE;AAAR,CAAf,E,CACA;;AACAC,KAAK,CAACK,QAAN,CAAe;AAAEN,EAAAA,IAAI,EAAE;AAAR,CAAf","sourcesContent":["import { createStore } from 'redux'\n\n/**\n * 这是一个 reducer，形式为 (state, action) => state 的纯函数。\n * 描述了 action 如何把 state 转变成下一个 state。\n *\n * state 的形式取决于你，可以是基本类型、数组、对象、\n * 甚至是 Immutable.js 生成的数据结构。惟一的要点是\n * 当 state 变化时需要返回全新的对象，而不是修改传入的参数。\n *\n * 下面例子使用 `switch` 语句和字符串来做判断，但你可以写帮助类(helper)\n * 根据不同的约定（如方法映射）来判断，只要适用你的项目即可。\n */\nfunction counter(state = 0, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1\n    case 'DECREMENT':\n      return state - 1\n    default:\n      return state\n  }\n}\n\n// 创建 Redux store 来存放应用的状态。\n// API 是 { subscribe, dispatch, getState }。\nlet store = createStore(counter)\n\n// 可以手动订阅更新，也可以事件绑定到视图层。\nstore.subscribe(() => console.log(store.getState()))\n\n// 改变内部 state 惟一方法是 dispatch 一个 action。\n// action 可以被序列化，用日记记录和储存下来，后期还可以以回放的方式执行\nstore.dispatch({ type: 'INCREMENT' })\n// 1\nstore.dispatch({ type: 'INCREMENT' })\n// 2\nstore.dispatch({ type: 'DECREMENT' })\n"]},"metadata":{},"sourceType":"module"}