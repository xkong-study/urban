{"ast":null,"code":"var _jsxFileName = \"/Users/kong/Desktop/urban_react/src/pages/test.jsx\";\n\n/* jshint esversion: 6 */\n// import {MarkerClusterer, useJsApiLoader} from \"@react-google-maps/api\";\n// const randomPosition = () => ({\n//     longitude: 53 + Math.random(),\n//     latitude: -6 + Math.random()\n// });\n// const randomMarker = (len) => (\n//     Array(len).fill(true).map((e, idx) => ({\n//         position: randomPosition()\n//     }))\n// );\n//\n//\n//     const [count,setCount] = React.useState({markers: randomMarker(10)});\n//     const randomMarkers=function (){\n//         setCount({markers: randomMarker(10)});\n//     };\n//     const plugins = [\n//         'MapType',\n//         'Scale',\n//         'OverView',\n//         'ControlBar', // v1.1.0 新增\n//         {\n//             name: 'ToolBar',\n//             options: {\n//                 visible: true,  // 不设置该属性默认就是 true\n//                 onCreated(ins){\n//                     console.log(ins);\n//                 },\n//             },\n//         }\n//     ];\n//     return(\n//             <div>\n//             <div style={{width: '100%', height: 372}}>\n//                 <Map plugins={plugins}  zoom={6} center={{longitude: 53,latitude: -6}}>\n//                     <Markers\n//                         markers={count.markers}\n//                     />\n//                 </Map>\n//             </div>\n//             <button onClick={randomMarkers.bind(this)}>Random Markers</button>\n//         </div>\n//         )\n// }\n//\n//\n//\n//\n// // import React, { Component } from 'react';\n// // import { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n// //\n// // import CurrentLocation from './Map';\n// // import {Map} from \"react-amap\";\n// //\n// // export default function Test(){\n// //     const state = {\n// //         showingInfoWindow: false,\n// //         activeMarker: {},\n// //         selectedPlace: {}\n// //     };\n// //\n// //     const onMarkerClick = (props, marker, e) =>\n// //         this.setState({\n// //             selectedPlace: props,\n// //             activeMarker: marker,\n// //             showingInfoWindow: true\n// //         });\n// //\n// //     const onClose = props => {\n// //         if (this.state.showingInfoWindow) {\n// //             this.setState({\n// //                 showingInfoWindow: false,\n// //                 activeMarker: null\n// //             });\n// //         }\n// //     };\n// //\n// //         return (\n// //             <CurrentLocation\n// //                 centerAroundCurrentLocation\n// //                 google={this.props.google}\n// //             ><Map\n// //                 google={this.props.google}\n// //                 zoom={14}\n// //                 initialCenter={{\n// //                     lat: -1.2884,\n// //                     lng: 36.8233\n// //                 }}\n// //             />\n// //\n// //                 <Marker onClick={onMarkerClick} name={'current location'} />\n// //                 <InfoWindow\n// //                     marker={state.activeMarker}\n// //                     visible={state.showingInfoWindow}\n// //                     onClose={onClose}\n// //                 >\n// //                     <div>\n// //                         <h4>{state.selectedPlace.name}</h4>\n// //                     </div>\n// //                 </InfoWindow>\n// //             </CurrentLocation>\n// //         );\n// //   }\n// //\n//Create a new map\nimport React, { useEffect, useRef } from 'react';\nimport { Loader } from '@googlemaps/js-api-loader';\nexport default function Test() {\n  var _this = this;\n\n  var googlemap = useRef(null);\n  useEffect(function () {\n    var loader = new Loader({\n      apiKey: 'AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c',\n      version: 'weekly'\n    });\n    var map;\n    loader.load().then(function () {\n      map = new window.google.maps.Map(googlemap.current, {\n        center: {\n          lat: -34.397,\n          lng: 150.644\n        },\n        zoom: 8\n      });\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"map\",\n      ref: googlemap,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }\n    }));\n  });\n}","map":{"version":3,"sources":["/Users/kong/Desktop/urban_react/src/pages/test.jsx"],"names":["React","useEffect","useRef","Loader","Test","googlemap","loader","apiKey","version","map","load","then","window","google","maps","Map","current","center","lat","lng","zoom"],"mappingscC,SAAd,EAAyBC,MAAzB,QAAsC,OAAtC;AACA,SAAQC,MAAR,QAAqB,2BAArB;AAEA,eAAe,SAASC,IAAT,GAAgB;AAAA;;AAC3B,MAAMC,SAAS,GAAGH,MAAM,CAAC,IAAD,CAAxB;AACAD,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMK,MAAM,GAAG,IAAIH,MAAJ,CAAW;AACtBI,MAAAA,MAAM,EAAC,yCADe;AAEtBC,MAAAA,OAAO,EAAE;AAFa,KAAX,CAAf;AAIA,QAAIC,GAAJ;AACAH,IAAAA,MAAM,CAACI,IAAP,GAAcC,IAAd,CAAmB,YAAM;AACrBF,MAAAA,GAAG,GAAG,IAAIG,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,GAAvB,CAA2BV,SAAS,CAACW,OAArC,EAA8C;AAChDC,QAAAA,MAAM,EAAE;AAACC,UAAAA,GAAG,EAAE,CAAC,MAAP;AAAeC,UAAAA,GAAG,EAAE;AAApB,SADwC;AAEhDC,QAAAA,IAAI,EAAE;AAF0C,OAA9C,CAAN;AAIH,KALD;AAMA,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAK,MAAA,EAAE,EAAC,KAAR;AAAc,MAAA,GAAG,EAAEf,SAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CADJ;AAMH,GAlBQ,CAAT;AAmBH","sourcesContent":["/* jshint esversion: 6 */\n// import {MarkerClusterer, useJsApiLoader} from \"@react-google-maps/api\";\n// const randomPosition = () => ({\n//     longitude: 53 + Math.random(),\n//     latitude: -6 + Math.random()\n// });\n// const randomMarker = (len) => (\n//     Array(len).fill(true).map((e, idx) => ({\n//         position: randomPosition()\n//     }))\n// );\n//\n\n//\n//     const [count,setCount] = React.useState({markers: randomMarker(10)});\n//     const randomMarkers=function (){\n//         setCount({markers: randomMarker(10)});\n//     };\n//     const plugins = [\n//         'MapType',\n//         'Scale',\n//         'OverView',\n//         'ControlBar', // v1.1.0 新增\n//         {\n//             name: 'ToolBar',\n//             options: {\n//                 visible: true,  // 不设置该属性默认就是 true\n//                 onCreated(ins){\n//                     console.log(ins);\n//                 },\n//             },\n//         }\n//     ];\n//     return(\n//             <div>\n//             <div style={{width: '100%', height: 372}}>\n//                 <Map plugins={plugins}  zoom={6} center={{longitude: 53,latitude: -6}}>\n//                     <Markers\n//                         markers={count.markers}\n//                     />\n//                 </Map>\n//             </div>\n//             <button onClick={randomMarkers.bind(this)}>Random Markers</button>\n//         </div>\n//         )\n// }\n//\n//\n//\n//\n// // import React, { Component } from 'react';\n// // import { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\n// //\n// // import CurrentLocation from './Map';\n// // import {Map} from \"react-amap\";\n// //\n// // export default function Test(){\n// //     const state = {\n// //         showingInfoWindow: false,\n// //         activeMarker: {},\n// //         selectedPlace: {}\n// //     };\n// //\n// //     const onMarkerClick = (props, marker, e) =>\n// //         this.setState({\n// //             selectedPlace: props,\n// //             activeMarker: marker,\n// //             showingInfoWindow: true\n// //         });\n// //\n// //     const onClose = props => {\n// //         if (this.state.showingInfoWindow) {\n// //             this.setState({\n// //                 showingInfoWindow: false,\n// //                 activeMarker: null\n// //             });\n// //         }\n// //     };\n// //\n// //         return (\n// //             <CurrentLocation\n// //                 centerAroundCurrentLocation\n// //                 google={this.props.google}\n// //             ><Map\n// //                 google={this.props.google}\n// //                 zoom={14}\n// //                 initialCenter={{\n// //                     lat: -1.2884,\n// //                     lng: 36.8233\n// //                 }}\n// //             />\n// //\n// //                 <Marker onClick={onMarkerClick} name={'current location'} />\n// //                 <InfoWindow\n// //                     marker={state.activeMarker}\n// //                     visible={state.showingInfoWindow}\n// //                     onClose={onClose}\n// //                 >\n// //                     <div>\n// //                         <h4>{state.selectedPlace.name}</h4>\n// //                     </div>\n// //                 </InfoWindow>\n// //             </CurrentLocation>\n// //         );\n// //   }\n// //\n\n\n//Create a new map\n\nimport React,{useEffect, useRef} from 'react';\nimport {Loader} from '@googlemaps/js-api-loader';\n\nexport default function Test() {\n    const googlemap = useRef(null);\n    useEffect(() => {\n        const loader = new Loader({\n            apiKey:'AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c',\n            version: 'weekly',\n        });\n        let map;\n        loader.load().then(() => {\n            map = new window.google.maps.Map(googlemap.current, {\n                center: {lat: -34.397, lng: 150.644},\n                zoom: 8,\n            });\n        });\n        return (\n            <div>\n\n                <div id='map' ref={googlemap}/>\n            </div>\n        )\n    });\n}\n"]},"metadata":{},"sourceType":"module"}