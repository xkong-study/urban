{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kong/Desktop/react_introduction/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kong/Desktop/react_introduction/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/kong/Desktop/react_introduction/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kong/Desktop/react_introduction/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { getToken as _getToken, deleteToken as _deleteToken, onMessage as _onMessage } from '@firebase/messaging';\nimport { isIndexedDBAvailable, areCookiesEnabled } from '@firebase/util';\nimport { onBackgroundMessage as _onBackgroundMessage } from '@firebase/messaging/sw';\nvar name = \"@firebase/messaging-compat\";\nvar version = \"0.1.21\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction isSupported() {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // Running in ServiceWorker context\n    return isSwSupported();\n  } else {\n    // Assume we are in the window context.\n    return isWindowSupported();\n  }\n}\n/**\r\n * Checks to see if the required APIs exist.\r\n * Unlike the modular version, it does not check if IndexedDB.open() is allowed\r\n * in order to keep isSupported() synchronous and maintain v8 compatibility.\r\n */\n\n\nfunction isWindowSupported() {\n  return typeof window !== 'undefined' && isIndexedDBAvailable() && areCookiesEnabled() && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n/**\r\n * Checks to see if the required APIs exist within SW Context.\r\n */\n\n\nfunction isSwSupported() {\n  return isIndexedDBAvailable() && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');\n}\n\nvar MessagingCompatImpl = /*#__PURE__*/function () {\n  function MessagingCompatImpl(app, _delegate) {\n    _classCallCheck(this, MessagingCompatImpl);\n\n    this.app = app;\n    this._delegate = _delegate;\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  _createClass(MessagingCompatImpl, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(options) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", _getToken(this._delegate, options));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getToken(_x) {\n        return _getToken2.apply(this, arguments);\n      }\n\n      return getToken;\n    }()\n  }, {\n    key: \"deleteToken\",\n    value: function () {\n      var _deleteToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", _deleteToken(this._delegate));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function deleteToken() {\n        return _deleteToken2.apply(this, arguments);\n      }\n\n      return deleteToken;\n    }()\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(nextOrObserver) {\n      return _onMessage(this._delegate, nextOrObserver);\n    }\n  }, {\n    key: \"onBackgroundMessage\",\n    value: function onBackgroundMessage(nextOrObserver) {\n      return _onBackgroundMessage(this._delegate, nextOrObserver);\n    }\n  }]);\n\n  return MessagingCompatImpl;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar messagingCompatFactory = function messagingCompatFactory(container) {\n  if (self && 'ServiceWorkerGlobalScope' in self) {\n    // in sw\n    return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging-sw').getImmediate());\n  } else {\n    // in window\n    return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging').getImmediate());\n  }\n};\n\nvar NAMESPACE_EXPORTS = {\n  isSupported: isSupported\n};\n\nfunction registerMessagingCompat() {\n  firebase.INTERNAL.registerComponent(new Component('messaging-compat', messagingCompatFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(NAMESPACE_EXPORTS));\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nregisterMessagingCompat();\nfirebase.registerVersion(name, version);","map":null,"metadata":{},"sourceType":"module"}