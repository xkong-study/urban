{"ast":null,"code":"import _classCallCheck from \"/Users/kong/Downloads/urban computing/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kong/Downloads/urban computing/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { activate as _activate, ensureInitialized as _ensureInitialized, fetchConfig, fetchAndActivate as _fetchAndActivate, getAll as _getAll, getBoolean as _getBoolean, getNumber as _getNumber, getString as _getString, getValue as _getValue, setLogLevel as _setLogLevel, isSupported } from '@firebase/remote-config';\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar RemoteConfigCompatImpl = /*#__PURE__*/function () {\n  function RemoteConfigCompatImpl(app, _delegate) {\n    _classCallCheck(this, RemoteConfigCompatImpl);\n\n    this.app = app;\n    this._delegate = _delegate;\n  }\n\n  _createClass(RemoteConfigCompatImpl, [{\n    key: \"activate\",\n    value: function activate() {\n      return _activate(this._delegate);\n    }\n  }, {\n    key: \"ensureInitialized\",\n    value: function ensureInitialized() {\n      return _ensureInitialized(this._delegate);\n    }\n    /**\r\n     * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\r\n     * {@link Settings.fetchTimeoutInSeconds} or\r\n     * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\r\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function fetch() {\n      return fetchConfig(this._delegate);\n    }\n  }, {\n    key: \"fetchAndActivate\",\n    value: function fetchAndActivate() {\n      return _fetchAndActivate(this._delegate);\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return _getAll(this._delegate);\n    }\n  }, {\n    key: \"getBoolean\",\n    value: function getBoolean(key) {\n      return _getBoolean(this._delegate, key);\n    }\n  }, {\n    key: \"getNumber\",\n    value: function getNumber(key) {\n      return _getNumber(this._delegate, key);\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(key) {\n      return _getString(this._delegate, key);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key) {\n      return _getValue(this._delegate, key);\n    } // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n    // to differentiate 2p and 3p use-cases.\n\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(logLevel) {\n      _setLogLevel(this._delegate, logLevel);\n    }\n  }, {\n    key: \"defaultConfig\",\n    get: function get() {\n      return this._delegate.defaultConfig;\n    },\n    set: function set(value) {\n      this._delegate.defaultConfig = value;\n    }\n  }, {\n    key: \"fetchTimeMillis\",\n    get: function get() {\n      return this._delegate.fetchTimeMillis;\n    }\n  }, {\n    key: \"lastFetchStatus\",\n    get: function get() {\n      return this._delegate.lastFetchStatus;\n    }\n  }, {\n    key: \"settings\",\n    get: function get() {\n      return this._delegate.settings;\n    },\n    set: function set(value) {\n      this._delegate.settings = value;\n    }\n  }]);\n\n  return RemoteConfigCompatImpl;\n}();\n\nvar name = \"@firebase/remote-config-compat\";\nvar version = \"0.1.16\";\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nfunction registerRemoteConfigCompat(firebaseInstance) {\n  firebaseInstance.INTERNAL.registerComponent(new Component('remoteConfig-compat', remoteConfigFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true).setServiceProps({\n    isSupported: isSupported\n  }));\n  firebaseInstance.registerVersion(name, version);\n}\n\nfunction remoteConfigFactory(container, _ref) {\n  var namespace = _ref.instanceIdentifier;\n  var app = container.getProvider('app-compat').getImmediate(); // The following call will always succeed because rc `import {...} from '@firebase/remote-config'`\n\n  var remoteConfig = container.getProvider('remote-config').getImmediate({\n    identifier: namespace\n  });\n  return new RemoteConfigCompatImpl(app, remoteConfig);\n}\n\nregisterRemoteConfigCompat(firebase);","map":null,"metadata":{},"sourceType":"module"}