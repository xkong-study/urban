{"ast":null,"code":"import _slicedToArray from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/kong/Desktop/urban_react/src/pages/map.jsx\";\n\n/* jshint esversion: 6 */\nimport React from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api'; // Import the functions you need from the SDKs you need\n\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\nvar firebaseConfig = {\n  apiKey: \"AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c\",\n  authDomain: \"urban-computing-cb07c.firebaseapp.com\",\n  databaseURL: \"https://urban-computing-cb07c-default-rtdb.firebaseio.com\",\n  projectId: \"urban-computing-cb07c\",\n  storageBucket: \"urban-computing-cb07c.appspot.com\",\n  messagingSenderId: \"293478437107\",\n  appId: \"1:293478437107:web:4cd5199b68f68eac542786\",\n  measurementId: \"G-3Z5DD1SJYQ\"\n}; // Initialize Firebase\n\nvar app = initializeApp(firebaseConfig);\nvar analytics = getAnalytics(app);\n\nvar getCities = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var citiesCol, citySnapshot, cityList;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            citiesCol = collection(app, 'users');\n            _context.next = 3;\n            return getDocs(citiesCol);\n\n          case 3:\n            citySnapshot = _context.sent;\n            cityList = citySnapshot.docs.map(function (doc) {\n              return doc.data();\n            });\n            return _context.abrupt(\"return\", cityList);\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getCities() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar containerStyle = {\n  width: '400px',\n  height: '400px'\n};\nvar center = {\n  lat: -3.745,\n  lng: -38.523\n};\nexport default function map() {\n  var _useJsApiLoader = useJsApiLoader({\n    id: 'google-map-script',\n    googleMapsApiKey: \"AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c\"\n  }),\n      isLoaded = _useJsApiLoader.isLoaded;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      map = _React$useState2[0],\n      setMap = _React$useState2[1];\n\n  var onLoad = React.useCallback(function callback(map) {\n    var bounds = new window.google.maps.LatLngBounds(center);\n    map.fitBounds(bounds);\n    setMap(map);\n  }, []);\n  var onUnmount = React.useCallback(function callback(map) {\n    setMap(null);\n  }, []);\n  return isLoaded ? /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: containerStyle,\n    center: center,\n    zoom: 10,\n    onLoad: onLoad,\n    onUnmount: onUnmount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null);\n}","map":{"version":3,"sources":["/Users/kong/Desktop/urban_react/src/pages/map.jsx"],"names":["React","GoogleMap","useJsApiLoader","initializeApp","getAnalytics","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","getCities","citiesCol","collection","getDocs","citySnapshot","cityList","docs","map","doc","data","containerStyle","width","height","center","lat","lng","id","googleMapsApiKey","isLoaded","useState","setMap","onLoad","useCallback","callback","bounds","window","google","maps","LatLngBounds","fitBounds","onUnmount"],"mappings":";;;;;AAAA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,cAApB,QAA0C,wBAA1C,C,CACA;;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAIA,IAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAE,yCADW;AAEnBC,EAAAA,UAAU,EAAE,uCAFO;AAGnBC,EAAAA,WAAW,EAAE,2DAHM;AAInBC,EAAAA,SAAS,EAAE,uBAJQ;AAKnBC,EAAAA,aAAa,EAAE,mCALI;AAMnBC,EAAAA,iBAAiB,EAAE,cANA;AAOnBC,EAAAA,KAAK,EAAE,2CAPY;AAQnBC,EAAAA,aAAa,EAAE;AARI,CAAvB,C,CAWA;;AACA,IAAMC,GAAG,GAAGX,aAAa,CAACE,cAAD,CAAzB;AACA,IAAMU,SAAS,GAAGX,YAAY,CAACU,GAAD,CAA9B;;AAEA,IAAME,SAAS;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACRC,YAAAA,SADQ,GACIC,UAAU,CAACJ,GAAD,EAAM,OAAN,CADd;AAAA;AAAA,mBAEaK,OAAO,CAACF,SAAD,CAFpB;;AAAA;AAERG,YAAAA,YAFQ;AAGRC,YAAAA,QAHQ,GAGGD,YAAY,CAACE,IAAb,CAAkBC,GAAlB,CAAsB,UAACC,GAAD;AAAA,qBAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,aAAtB,CAHH;AAAA,6CAIPJ,QAJO;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATL,SAAS;AAAA;AAAA;AAAA,GAAf;;AAQA,IAAMU,cAAc,GAAG;AACnBC,EAAAA,KAAK,EAAE,OADY;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAAvB;AAKA,IAAMC,MAAM,GAAG;AACXC,EAAAA,GAAG,EAAE,CAAC,KADK;AAEXC,EAAAA,GAAG,EAAE,CAAC;AAFK,CAAf;AAOA,eAAe,SAASR,GAAT,GAAe;AAAA,wBACLrB,cAAc,CAAC;AAChC8B,IAAAA,EAAE,EAAE,mBAD4B;AAEhCC,IAAAA,gBAAgB,EAAE;AAFc,GAAD,CADT;AAAA,MAClBC,QADkB,mBAClBA,QADkB;;AAAA,wBAMJlC,KAAK,CAACmC,QAAN,CAAe,IAAf,CANI;AAAA;AAAA,MAMnBZ,GANmB;AAAA,MAMda,MANc;;AAQ1B,MAAMC,MAAM,GAAGrC,KAAK,CAACsC,WAAN,CAAkB,SAASC,QAAT,CAAkBhB,GAAlB,EAAuB;AACpD,QAAMiB,MAAM,GAAG,IAAIC,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,YAAvB,CAAoCf,MAApC,CAAf;AACAN,IAAAA,GAAG,CAACsB,SAAJ,CAAcL,MAAd;AACAJ,IAAAA,MAAM,CAACb,GAAD,CAAN;AACH,GAJc,EAIZ,EAJY,CAAf;AAMA,MAAMuB,SAAS,GAAG9C,KAAK,CAACsC,WAAN,CAAkB,SAASC,QAAT,CAAkBhB,GAAlB,EAAuB;AACvDa,IAAAA,MAAM,CAAC,IAAD,CAAN;AACH,GAFiB,EAEf,EAFe,CAAlB;AAIA,SAAOF,QAAQ,gBACX,oBAAC,SAAD;AACI,IAAA,iBAAiB,EAAER,cADvB;AAEI,IAAA,MAAM,EAAEG,MAFZ;AAGI,IAAA,IAAI,EAAE,EAHV;AAII,IAAA,MAAM,EAAEQ,MAJZ;AAKI,IAAA,SAAS,EAAES,SALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADW,gBASX,yCATJ;AAUH","sourcesContent":["/* jshint esversion: 6 */\nimport React from 'react';\nimport { GoogleMap, useJsApiLoader } from '@react-google-maps/api';\n// Import the functions you need from the SDKs you need\nimport { initializeApp } from \"firebase/app\";\nimport { getAnalytics } from \"firebase/analytics\";\n\n\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c\",\n    authDomain: \"urban-computing-cb07c.firebaseapp.com\",\n    databaseURL: \"https://urban-computing-cb07c-default-rtdb.firebaseio.com\",\n    projectId: \"urban-computing-cb07c\",\n    storageBucket: \"urban-computing-cb07c.appspot.com\",\n    messagingSenderId: \"293478437107\",\n    appId: \"1:293478437107:web:4cd5199b68f68eac542786\",\n    measurementId: \"G-3Z5DD1SJYQ\"\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n\nconst getCities = async () => {\n    const citiesCol = collection(app, 'users');\n    const citySnapshot = await getDocs(citiesCol);\n    const cityList = citySnapshot.docs.map((doc) => doc.data());\n    return cityList;\n}\n\n\nconst containerStyle = {\n    width: '400px',\n    height: '400px'\n};\n\nconst center = {\n    lat: -3.745,\n    lng: -38.523\n};\n\n\n\nexport default function map() {\n    const { isLoaded } = useJsApiLoader({\n        id: 'google-map-script',\n        googleMapsApiKey: \"AIzaSyDSR-cgFYuYuXoDo4jvjxL0FbTfEN4me2c\"\n    })\n\n    const [map, setMap] = React.useState(null);\n\n    const onLoad = React.useCallback(function callback(map) {\n        const bounds = new window.google.maps.LatLngBounds(center);\n        map.fitBounds(bounds);\n        setMap(map);\n    }, []);\n\n    const onUnmount = React.useCallback(function callback(map) {\n        setMap(null);\n    }, []);\n\n    return isLoaded ? (\n        <GoogleMap\n            mapContainerStyle={containerStyle}\n            center={center}\n            zoom={10}\n            onLoad={onLoad}\n            onUnmount={onUnmount}\n        >\n        </GoogleMap>\n    ) : <></>\n}\n\n"]},"metadata":{},"sourceType":"module"}