{"ast":null,"code":"import _regeneratorRuntime from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kong/Desktop/urban_react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nvar _ERROR_DESCRIPTION_MA;\n\nimport { _getProvider, getApp, _registerComponent, registerVersion, SDK_VERSION } from '@firebase/app';\nimport { ErrorFactory, FirebaseError, getModularInstance, calculateBackoffMillis, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Component } from '@firebase/component';\nimport { LogLevel, Logger } from '@firebase/logger';\nimport '@firebase/installations';\nvar name = \"@firebase/remote-config\";\nvar version = \"0.3.15\";\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Shims a minimal AbortSignal.\r\n *\r\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\r\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\r\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\r\n * swapped out if/when we do.\r\n */\n\nvar RemoteConfigAbortSignal = /*#__PURE__*/function () {\n  function RemoteConfigAbortSignal() {\n    _classCallCheck(this, RemoteConfigAbortSignal);\n\n    this.listeners = [];\n  }\n\n  _createClass(RemoteConfigAbortSignal, [{\n    key: \"addEventListener\",\n    value: function addEventListener(listener) {\n      this.listeners.push(listener);\n    }\n  }, {\n    key: \"abort\",\n    value: function abort() {\n      this.listeners.forEach(function (listener) {\n        return listener();\n      });\n    }\n  }]);\n\n  return RemoteConfigAbortSignal;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar RC_COMPONENT_NAME = 'remote-config';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ERROR_DESCRIPTION_MAP = (_ERROR_DESCRIPTION_MA = {}, _defineProperty(_ERROR_DESCRIPTION_MA, \"registration-window\"\n/* REGISTRATION_WINDOW */\n, 'Undefined window object. This SDK only supports usage in a browser environment.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"registration-project-id\"\n/* REGISTRATION_PROJECT_ID */\n, 'Undefined project identifier. Check Firebase app initialization.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"registration-api-key\"\n/* REGISTRATION_API_KEY */\n, 'Undefined API key. Check Firebase app initialization.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"registration-app-id\"\n/* REGISTRATION_APP_ID */\n, 'Undefined app identifier. Check Firebase app initialization.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"storage-open\"\n/* STORAGE_OPEN */\n, 'Error thrown when opening storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"storage-get\"\n/* STORAGE_GET */\n, 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"storage-set\"\n/* STORAGE_SET */\n, 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"storage-delete\"\n/* STORAGE_DELETE */\n, 'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"fetch-client-network\"\n/* FETCH_NETWORK */\n, 'Fetch client failed to connect to a network. Check Internet connection.' + ' Original error: {$originalErrorMessage}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"fetch-timeout\"\n/* FETCH_TIMEOUT */\n, 'The config fetch request timed out. ' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"fetch-throttle\"\n/* FETCH_THROTTLE */\n, 'The config fetch request timed out while in an exponential backoff state.' + ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' + ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"fetch-client-parse\"\n/* FETCH_PARSE */\n, 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"fetch-status\"\n/* FETCH_STATUS */\n, 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"indexed-db-unavailable\"\n/* INDEXED_DB_UNAVAILABLE */\n, 'Indexed DB is not supported by current browser'), _ERROR_DESCRIPTION_MA);\nvar ERROR_FACTORY = new ErrorFactory('remoteconfig'\n/* service */\n, 'Remote Config'\n/* service name */\n, ERROR_DESCRIPTION_MAP); // Note how this is like typeof/instanceof, but for ErrorCode.\n\nfunction hasErrorCode(e, errorCode) {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_VALUE_FOR_BOOLEAN = false;\nvar DEFAULT_VALUE_FOR_STRING = '';\nvar DEFAULT_VALUE_FOR_NUMBER = 0;\nvar BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nvar Value = /*#__PURE__*/function () {\n  function Value(_source) {\n    var _value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_VALUE_FOR_STRING;\n\n    _classCallCheck(this, Value);\n\n    this._source = _source;\n    this._value = _value;\n  }\n\n  _createClass(Value, [{\n    key: \"asString\",\n    value: function asString() {\n      return this._value;\n    }\n  }, {\n    key: \"asBoolean\",\n    value: function asBoolean() {\n      if (this._source === 'static') {\n        return DEFAULT_VALUE_FOR_BOOLEAN;\n      }\n\n      return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n    }\n  }, {\n    key: \"asNumber\",\n    value: function asNumber() {\n      if (this._source === 'static') {\n        return DEFAULT_VALUE_FOR_NUMBER;\n      }\n\n      var num = Number(this._value);\n\n      if (isNaN(num)) {\n        num = DEFAULT_VALUE_FOR_NUMBER;\n      }\n\n      return num;\n    }\n  }, {\n    key: \"getSource\",\n    value: function getSource() {\n      return this._source;\n    }\n  }]);\n\n  return Value;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} instance.\r\n * @returns A {@link RemoteConfig} instance.\r\n *\r\n * @public\r\n */\n\n\nfunction getRemoteConfig() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  app = getModularInstance(app);\n\n  var rcProvider = _getProvider(app, RC_COMPONENT_NAME);\n\n  return rcProvider.getImmediate();\n}\n/**\r\n * Makes the last fetched config available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\n\n\nfunction activate(_x) {\n  return _activate.apply(this, arguments);\n}\n/**\r\n * Ensures the last activated config are available to the getters.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` that resolves when the last activated config is available to the getters.\r\n * @public\r\n */\n\n\nfunction _activate() {\n  _activate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(remoteConfig) {\n    var rc, _yield$Promise$all5, _yield$Promise$all6, lastSuccessfulFetchResponse, activeConfigEtag;\n\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            rc = getModularInstance(remoteConfig);\n            _context9.next = 3;\n            return Promise.all([rc._storage.getLastSuccessfulFetchResponse(), rc._storage.getActiveConfigEtag()]);\n\n          case 3:\n            _yield$Promise$all5 = _context9.sent;\n            _yield$Promise$all6 = _slicedToArray(_yield$Promise$all5, 2);\n            lastSuccessfulFetchResponse = _yield$Promise$all6[0];\n            activeConfigEtag = _yield$Promise$all6[1];\n\n            if (!(!lastSuccessfulFetchResponse || !lastSuccessfulFetchResponse.config || !lastSuccessfulFetchResponse.eTag || lastSuccessfulFetchResponse.eTag === activeConfigEtag)) {\n              _context9.next = 9;\n              break;\n            }\n\n            return _context9.abrupt(\"return\", false);\n\n          case 9:\n            _context9.next = 11;\n            return Promise.all([rc._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config), rc._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)]);\n\n          case 11:\n            return _context9.abrupt(\"return\", true);\n\n          case 12:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _activate.apply(this, arguments);\n}\n\nfunction ensureInitialized(remoteConfig) {\n  var rc = getModularInstance(remoteConfig);\n\n  if (!rc._initializePromise) {\n    rc._initializePromise = rc._storageCache.loadFromStorage().then(function () {\n      rc._isInitializationComplete = true;\n    });\n  }\n\n  return rc._initializePromise;\n}\n/**\r\n * Fetches and caches configuration from the Remote Config service.\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @public\r\n */\n\n\nfunction fetchConfig(_x2) {\n  return _fetchConfig.apply(this, arguments);\n}\n/**\r\n * Gets all config.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @returns All config.\r\n *\r\n * @public\r\n */\n\n\nfunction _fetchConfig() {\n  _fetchConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(remoteConfig) {\n    var rc, abortSignal, lastFetchStatus;\n    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            rc = getModularInstance(remoteConfig); // Aborts the request after the given timeout, causing the fetch call to\n            // reject with an `AbortError`.\n            //\n            // <p>Aborting after the request completes is a no-op, so we don't need a\n            // corresponding `clearTimeout`.\n            //\n            // Locating abort logic here because:\n            // * it uses a developer setting (timeout)\n            // * it applies to all retries (like curl's max-time arg)\n            // * it is consistent with the Fetch API's signal input\n\n            abortSignal = new RemoteConfigAbortSignal();\n            setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n              return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n                while (1) {\n                  switch (_context10.prev = _context10.next) {\n                    case 0:\n                      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n                      abortSignal.abort();\n\n                    case 1:\n                    case \"end\":\n                      return _context10.stop();\n                  }\n                }\n              }, _callee10);\n            })), rc.settings.fetchTimeoutMillis); // Catches *all* errors thrown by client so status can be set consistently.\n\n            _context11.prev = 3;\n            _context11.next = 6;\n            return rc._client.fetch({\n              cacheMaxAgeMillis: rc.settings.minimumFetchIntervalMillis,\n              signal: abortSignal\n            });\n\n          case 6:\n            _context11.next = 8;\n            return rc._storageCache.setLastFetchStatus('success');\n\n          case 8:\n            _context11.next = 16;\n            break;\n\n          case 10:\n            _context11.prev = 10;\n            _context11.t0 = _context11[\"catch\"](3);\n            lastFetchStatus = hasErrorCode(_context11.t0, \"fetch-throttle\"\n            /* FETCH_THROTTLE */\n            ) ? 'throttle' : 'failure';\n            _context11.next = 15;\n            return rc._storageCache.setLastFetchStatus(lastFetchStatus);\n\n          case 15:\n            throw _context11.t0;\n\n          case 16:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11, null, [[3, 10]]);\n  }));\n  return _fetchConfig.apply(this, arguments);\n}\n\nfunction getAll(remoteConfig) {\n  var rc = getModularInstance(remoteConfig);\n  return getAllKeys(rc._storageCache.getActiveConfig(), rc.defaultConfig).reduce(function (allConfigs, key) {\n    allConfigs[key] = getValue(remoteConfig, key);\n    return allConfigs;\n  }, {});\n}\n/**\r\n * Gets the value for the given key as a boolean.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asBoolean()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a boolean.\r\n * @public\r\n */\n\n\nfunction getBoolean(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asBoolean();\n}\n/**\r\n * Gets the value for the given key as a number.\r\n *\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asNumber()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a number.\r\n *\r\n * @public\r\n */\n\n\nfunction getNumber(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asNumber();\n}\n/**\r\n * Gets the value for the given key as a string.\r\n * Convenience method for calling <code>remoteConfig.getValue(key).asString()</code>.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key as a string.\r\n *\r\n * @public\r\n */\n\n\nfunction getString(remoteConfig, key) {\n  return getValue(getModularInstance(remoteConfig), key).asString();\n}\n/**\r\n * Gets the {@link Value} for the given key.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param key - The name of the parameter.\r\n *\r\n * @returns The value for the given key.\r\n *\r\n * @public\r\n */\n\n\nfunction getValue(remoteConfig, key) {\n  var rc = getModularInstance(remoteConfig);\n\n  if (!rc._isInitializationComplete) {\n    rc._logger.debug(\"A value was requested for key \\\"\".concat(key, \"\\\" before SDK initialization completed.\") + ' Await on ensureInitialized if the intent was to get a previously activated value.');\n  }\n\n  var activeConfig = rc._storageCache.getActiveConfig();\n\n  if (activeConfig && activeConfig[key] !== undefined) {\n    return new Value('remote', activeConfig[key]);\n  } else if (rc.defaultConfig && rc.defaultConfig[key] !== undefined) {\n    return new Value('default', String(rc.defaultConfig[key]));\n  }\n\n  rc._logger.debug(\"Returning static value for key \\\"\".concat(key, \"\\\".\") + ' Define a default or remote value if this is unintentional.');\n\n  return new Value('static');\n}\n/**\r\n * Defines the log level to use.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n * @param logLevel - The log level to set.\r\n *\r\n * @public\r\n */\n\n\nfunction setLogLevel(remoteConfig, logLevel) {\n  var rc = getModularInstance(remoteConfig);\n\n  switch (logLevel) {\n    case 'debug':\n      rc._logger.logLevel = LogLevel.DEBUG;\n      break;\n\n    case 'silent':\n      rc._logger.logLevel = LogLevel.SILENT;\n      break;\n\n    default:\n      rc._logger.logLevel = LogLevel.ERROR;\n  }\n}\n/**\r\n * Dedupes and returns an array of all the keys of the received objects.\r\n */\n\n\nfunction getAllKeys() {\n  var obj1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var obj2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return Object.keys(Object.assign(Object.assign({}, obj1), obj2));\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\r\n *\r\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\r\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\r\n * Cache API doesn't support matching entries by time.\r\n */\n\n\nvar CachingClient = /*#__PURE__*/function () {\n  function CachingClient(client, storage, storageCache, logger) {\n    _classCallCheck(this, CachingClient);\n\n    this.client = client;\n    this.storage = storage;\n    this.storageCache = storageCache;\n    this.logger = logger;\n  }\n  /**\r\n   * Returns true if the age of the cached fetched configs is less than or equal to\r\n   * {@link Settings#minimumFetchIntervalInSeconds}.\r\n   *\r\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\r\n   * native Fetch API.\r\n   *\r\n   * <p>Visible for testing.\r\n   */\n\n\n  _createClass(CachingClient, [{\n    key: \"isCachedDataFresh\",\n    value: function isCachedDataFresh(cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis) {\n      // Cache can only be fresh if it's populated.\n      if (!lastSuccessfulFetchTimestampMillis) {\n        this.logger.debug('Config fetch cache check. Cache unpopulated.');\n        return false;\n      } // Calculates age of cache entry.\n\n\n      var cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n      var isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n      this.logger.debug('Config fetch cache check.' + \" Cache age millis: \".concat(cacheAgeMillis, \".\") + \" Cache max age millis (minimumFetchIntervalMillis setting): \".concat(cacheMaxAgeMillis, \".\") + \" Is cache hit: \".concat(isCachedDataFresh, \".\"));\n      return isCachedDataFresh;\n    }\n  }, {\n    key: \"fetch\",\n    value: function () {\n      var _fetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(request) {\n        var _yield$Promise$all, _yield$Promise$all2, lastSuccessfulFetchTimestampMillis, lastSuccessfulFetchResponse, response, storageOperations;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Promise.all([this.storage.getLastSuccessfulFetchTimestampMillis(), this.storage.getLastSuccessfulFetchResponse()]);\n\n              case 2:\n                _yield$Promise$all = _context.sent;\n                _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n                lastSuccessfulFetchTimestampMillis = _yield$Promise$all2[0];\n                lastSuccessfulFetchResponse = _yield$Promise$all2[1];\n\n                if (!(lastSuccessfulFetchResponse && this.isCachedDataFresh(request.cacheMaxAgeMillis, lastSuccessfulFetchTimestampMillis))) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", lastSuccessfulFetchResponse);\n\n              case 8:\n                // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n                // that allows the caller to pass an ETag.\n                request.eTag = lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag; // Falls back to service on cache miss.\n\n                _context.next = 11;\n                return this.client.fetch(request);\n\n              case 11:\n                response = _context.sent;\n                // Fetch throws for non-success responses, so success is guaranteed here.\n                storageOperations = [// Uses write-through cache for consistency with synchronous public API.\n                this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())];\n\n                if (response.status === 200) {\n                  // Caches response only if it has changed, ie non-304 responses.\n                  storageOperations.push(this.storage.setLastSuccessfulFetchResponse(response));\n                }\n\n                _context.next = 16;\n                return Promise.all(storageOperations);\n\n              case 16:\n                return _context.abrupt(\"return\", response);\n\n              case 17:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function fetch(_x3) {\n        return _fetch.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n  }]);\n\n  return CachingClient;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Attempts to get the most accurate browser language setting.\r\n *\r\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\r\n *\r\n * <p>Defers default language specification to server logic for consistency.\r\n *\r\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\r\n */\n\n\nfunction getUserLanguage() {\n  var navigatorLanguage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : navigator;\n  return (// Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] || // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language // Polyfill otherwise.\n\n  );\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Implements the Client abstraction for the Remote Config REST API.\r\n */\n\n\nvar RestClient = /*#__PURE__*/function () {\n  function RestClient(firebaseInstallations, sdkVersion, namespace, projectId, apiKey, appId) {\n    _classCallCheck(this, RestClient);\n\n    this.firebaseInstallations = firebaseInstallations;\n    this.sdkVersion = sdkVersion;\n    this.namespace = namespace;\n    this.projectId = projectId;\n    this.apiKey = apiKey;\n    this.appId = appId;\n  }\n  /**\r\n   * Fetches from the Remote Config REST API.\r\n   *\r\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\r\n   * connect to the network.\r\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\r\n   * fetch response.\r\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\r\n   */\n\n\n  _createClass(RestClient, [{\n    key: \"fetch\",\n    value: function (_fetch2) {\n      function fetch(_x4) {\n        return _fetch2.apply(this, arguments);\n      }\n\n      fetch.toString = function () {\n        return _fetch2.toString();\n      };\n\n      return fetch;\n    }( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(request) {\n        var _a, _b, _c, _yield$Promise$all3, _yield$Promise$all4, installationId, installationToken, urlBase, url, headers, requestBody, options, fetchPromise, timeoutPromise, response, errorCode, status, responseEtag, config, state, responseBody;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Promise.all([this.firebaseInstallations.getId(), this.firebaseInstallations.getToken()]);\n\n              case 2:\n                _yield$Promise$all3 = _context2.sent;\n                _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 2);\n                installationId = _yield$Promise$all4[0];\n                installationToken = _yield$Promise$all4[1];\n                urlBase = window.FIREBASE_REMOTE_CONFIG_URL_BASE || 'https://firebaseremoteconfig.googleapis.com';\n                url = \"\".concat(urlBase, \"/v1/projects/\").concat(this.projectId, \"/namespaces/\").concat(this.namespace, \":fetch?key=\").concat(this.apiKey);\n                headers = {\n                  'Content-Type': 'application/json',\n                  'Content-Encoding': 'gzip',\n                  // Deviates from pure decorator by not passing max-age header since we don't currently have\n                  // service behavior using that header.\n                  'If-None-Match': request.eTag || '*'\n                };\n                requestBody = {\n                  /* eslint-disable camelcase */\n                  sdk_version: this.sdkVersion,\n                  app_instance_id: installationId,\n                  app_instance_id_token: installationToken,\n                  app_id: this.appId,\n                  language_code: getUserLanguage()\n                  /* eslint-enable camelcase */\n\n                };\n                options = {\n                  method: 'POST',\n                  headers: headers,\n                  body: JSON.stringify(requestBody)\n                }; // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n\n                fetchPromise = fetch(url, options);\n                timeoutPromise = new Promise(function (_resolve, reject) {\n                  // Maps async event listener to Promise API.\n                  request.signal.addEventListener(function () {\n                    // Emulates https://heycam.github.io/webidl/#aborterror\n                    var error = new Error('The operation was aborted.');\n                    error.name = 'AbortError';\n                    reject(error);\n                  });\n                });\n                _context2.prev = 13;\n                _context2.next = 16;\n                return Promise.race([fetchPromise, timeoutPromise]);\n\n              case 16:\n                _context2.next = 18;\n                return fetchPromise;\n\n              case 18:\n                response = _context2.sent;\n                _context2.next = 26;\n                break;\n\n              case 21:\n                _context2.prev = 21;\n                _context2.t0 = _context2[\"catch\"](13);\n                errorCode = \"fetch-client-network\";\n\n                if (((_a = _context2.t0) === null || _a === void 0 ? void 0 : _a.name) === 'AbortError') {\n                  errorCode = \"fetch-timeout\"\n                  /* FETCH_TIMEOUT */\n                  ;\n                }\n\n                throw ERROR_FACTORY.create(errorCode, {\n                  originalErrorMessage: (_b = _context2.t0) === null || _b === void 0 ? void 0 : _b.message\n                });\n\n              case 26:\n                status = response.status; // Normalizes nullable header to optional.\n\n                responseEtag = response.headers.get('ETag') || undefined;\n\n                if (!(response.status === 200)) {\n                  _context2.next = 40;\n                  break;\n                }\n\n                _context2.prev = 29;\n                _context2.next = 32;\n                return response.json();\n\n              case 32:\n                responseBody = _context2.sent;\n                _context2.next = 38;\n                break;\n\n              case 35:\n                _context2.prev = 35;\n                _context2.t1 = _context2[\"catch\"](29);\n                throw ERROR_FACTORY.create(\"fetch-client-parse\"\n                /* FETCH_PARSE */\n                , {\n                  originalErrorMessage: (_c = _context2.t1) === null || _c === void 0 ? void 0 : _c.message\n                });\n\n              case 38:\n                config = responseBody['entries'];\n                state = responseBody['state'];\n\n              case 40:\n                // Normalizes based on legacy state.\n                if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n                  status = 500;\n                } else if (state === 'NO_CHANGE') {\n                  status = 304;\n                } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n                  // These cases can be fixed remotely, so normalize to safe value.\n                  config = {};\n                } // Normalize to exception-based control flow for non-success cases.\n                // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n                // differentiating success states (200 from 304; the state body param is undefined in a\n                // standard 304).\n\n\n                if (!(status !== 304 && status !== 200)) {\n                  _context2.next = 43;\n                  break;\n                }\n\n                throw ERROR_FACTORY.create(\"fetch-status\"\n                /* FETCH_STATUS */\n                , {\n                  httpStatus: status\n                });\n\n              case 43:\n                return _context2.abrupt(\"return\", {\n                  status: status,\n                  eTag: responseEtag,\n                  config: config\n                });\n\n              case 44:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[13, 21], [29, 35]]);\n      }));\n\n      return function (_x5) {\n        return _ref.apply(this, arguments);\n      };\n    }())\n  }]);\n\n  return RestClient;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Supports waiting on a backoff by:\r\n *\r\n * <ul>\r\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\r\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\r\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\r\n *       request appear the same.</li>\r\n * </ul>\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nfunction setAbortableTimeout(signal, throttleEndTimeMillis) {\n  return new Promise(function (resolve, reject) {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n    var timeout = setTimeout(resolve, backoffMillis); // Adds listener, rather than sets onabort, because signal is a shared object.\n\n    signal.addEventListener(function () {\n      clearTimeout(timeout); // If the request completes before this timeout, the rejection has no effect.\n\n      reject(ERROR_FACTORY.create(\"fetch-throttle\"\n      /* FETCH_THROTTLE */\n      , {\n        throttleEndTimeMillis: throttleEndTimeMillis\n      }));\n    });\n  });\n}\n/**\r\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\r\n */\n\n\nfunction isRetriableError(e) {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  } // Uses string index defined by ErrorData, which FirebaseError implements.\n\n\n  var httpStatus = Number(e.customData['httpStatus']);\n  return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;\n}\n/**\r\n * Decorates a Client with retry logic.\r\n *\r\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\r\n * responses (because the SDK has no use for error responses).\r\n */\n\n\nvar RetryingClient = /*#__PURE__*/function () {\n  function RetryingClient(client, storage) {\n    _classCallCheck(this, RetryingClient);\n\n    this.client = client;\n    this.storage = storage;\n  }\n\n  _createClass(RetryingClient, [{\n    key: \"fetch\",\n    value: function () {\n      var _fetch3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(request) {\n        var throttleMetadata;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.storage.getThrottleMetadata();\n\n              case 2:\n                _context3.t0 = _context3.sent;\n\n                if (_context3.t0) {\n                  _context3.next = 5;\n                  break;\n                }\n\n                _context3.t0 = {\n                  backoffCount: 0,\n                  throttleEndTimeMillis: Date.now()\n                };\n\n              case 5:\n                throttleMetadata = _context3.t0;\n                return _context3.abrupt(\"return\", this.attemptFetch(request, throttleMetadata));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function fetch(_x6) {\n        return _fetch3.apply(this, arguments);\n      }\n\n      return fetch;\n    }()\n    /**\r\n     * A recursive helper for attempting a fetch request repeatedly.\r\n     *\r\n     * @throws any non-retriable errors.\r\n     */\n\n  }, {\n    key: \"attemptFetch\",\n    value: function () {\n      var _attemptFetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(request, _ref2) {\n        var throttleEndTimeMillis, backoffCount, response, throttleMetadata;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                throttleEndTimeMillis = _ref2.throttleEndTimeMillis, backoffCount = _ref2.backoffCount;\n                _context4.next = 3;\n                return setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n              case 3:\n                _context4.prev = 3;\n                _context4.next = 6;\n                return this.client.fetch(request);\n\n              case 6:\n                response = _context4.sent;\n                _context4.next = 9;\n                return this.storage.deleteThrottleMetadata();\n\n              case 9:\n                return _context4.abrupt(\"return\", response);\n\n              case 12:\n                _context4.prev = 12;\n                _context4.t0 = _context4[\"catch\"](3);\n\n                if (isRetriableError(_context4.t0)) {\n                  _context4.next = 16;\n                  break;\n                }\n\n                throw _context4.t0;\n\n              case 16:\n                // Increments backoff state.\n                throttleMetadata = {\n                  throttleEndTimeMillis: Date.now() + calculateBackoffMillis(backoffCount),\n                  backoffCount: backoffCount + 1\n                }; // Persists state.\n\n                _context4.next = 19;\n                return this.storage.setThrottleMetadata(throttleMetadata);\n\n              case 19:\n                return _context4.abrupt(\"return\", this.attemptFetch(request, throttleMetadata));\n\n              case 20:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 12]]);\n      }));\n\n      function attemptFetch(_x7, _x8) {\n        return _attemptFetch.apply(this, arguments);\n      }\n\n      return attemptFetch;\n    }()\n  }]);\n\n  return RetryingClient;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\n\nvar DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\r\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\r\n *\r\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\r\n */\n\nvar RemoteConfig = /*#__PURE__*/function () {\n  function RemoteConfig( // Required by FirebaseServiceFactory interface.\n  app, // JS doesn't support private yet\n  // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n  // underscore prefix.\n\n  /**\r\n   * @internal\r\n   */\n  _client,\n  /**\r\n   * @internal\r\n   */\n  _storageCache,\n  /**\r\n   * @internal\r\n   */\n  _storage,\n  /**\r\n   * @internal\r\n   */\n  _logger) {\n    _classCallCheck(this, RemoteConfig);\n\n    this.app = app;\n    this._client = _client;\n    this._storageCache = _storageCache;\n    this._storage = _storage;\n    this._logger = _logger;\n    /**\r\n     * Tracks completion of initialization promise.\r\n     * @internal\r\n     */\n\n    this._isInitializationComplete = false;\n    this.settings = {\n      fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n      minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n    };\n    this.defaultConfig = {};\n  }\n\n  _createClass(RemoteConfig, [{\n    key: \"fetchTimeMillis\",\n    get: function get() {\n      return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n    }\n  }, {\n    key: \"lastFetchStatus\",\n    get: function get() {\n      return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n    }\n  }]);\n\n  return RemoteConfig;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\r\n */\n\n\nfunction toFirebaseError(event, errorCode) {\n  var _a;\n\n  var originalError = event.target.error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && ((_a = originalError) === null || _a === void 0 ? void 0 : _a.message)\n  });\n}\n/**\r\n * A general-purpose store keyed by app + namespace + {@link\r\n * ProjectNamespaceKeyFieldValue}.\r\n *\r\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\r\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\r\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\r\n *\r\n * <p>Visible for testing.\r\n */\n\n\nvar APP_NAMESPACE_STORE = 'app_namespace_store';\nvar DB_NAME = 'firebase_remote_config';\nvar DB_VERSION = 1; // Visible for testing.\n\nfunction openDatabase() {\n  return new Promise(function (resolve, reject) {\n    var _a;\n\n    try {\n      var request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onerror = function (event) {\n        reject(toFirebaseError(event, \"storage-open\"\n        /* STORAGE_OPEN */\n        ));\n      };\n\n      request.onsuccess = function (event) {\n        resolve(event.target.result);\n      };\n\n      request.onupgradeneeded = function (event) {\n        var db = event.target.result; // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(APP_NAMESPACE_STORE, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (error) {\n      reject(ERROR_FACTORY.create(\"storage-open\"\n      /* STORAGE_OPEN */\n      , {\n        originalErrorMessage: (_a = error) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    }\n  });\n}\n/**\r\n * Abstracts data persistence.\r\n */\n\n\nvar Storage = /*#__PURE__*/function () {\n  /**\r\n   * @param appId enables storage segmentation by app (ID + name).\r\n   * @param appName enables storage segmentation by app (ID + name).\r\n   * @param namespace enables storage segmentation by namespace.\r\n   */\n  function Storage(appId, appName, namespace) {\n    var openDbPromise = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : openDatabase();\n\n    _classCallCheck(this, Storage);\n\n    this.appId = appId;\n    this.appName = appName;\n    this.namespace = namespace;\n    this.openDbPromise = openDbPromise;\n  }\n\n  _createClass(Storage, [{\n    key: \"getLastFetchStatus\",\n    value: function getLastFetchStatus() {\n      return this.get('last_fetch_status');\n    }\n  }, {\n    key: \"setLastFetchStatus\",\n    value: function setLastFetchStatus(status) {\n      return this.set('last_fetch_status', status);\n    } // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n    // consider adding timestamp to all storage records and an optional max age arg to getters.\n\n  }, {\n    key: \"getLastSuccessfulFetchTimestampMillis\",\n    value: function getLastSuccessfulFetchTimestampMillis() {\n      return this.get('last_successful_fetch_timestamp_millis');\n    }\n  }, {\n    key: \"setLastSuccessfulFetchTimestampMillis\",\n    value: function setLastSuccessfulFetchTimestampMillis(timestamp) {\n      return this.set('last_successful_fetch_timestamp_millis', timestamp);\n    }\n  }, {\n    key: \"getLastSuccessfulFetchResponse\",\n    value: function getLastSuccessfulFetchResponse() {\n      return this.get('last_successful_fetch_response');\n    }\n  }, {\n    key: \"setLastSuccessfulFetchResponse\",\n    value: function setLastSuccessfulFetchResponse(response) {\n      return this.set('last_successful_fetch_response', response);\n    }\n  }, {\n    key: \"getActiveConfig\",\n    value: function getActiveConfig() {\n      return this.get('active_config');\n    }\n  }, {\n    key: \"setActiveConfig\",\n    value: function setActiveConfig(config) {\n      return this.set('active_config', config);\n    }\n  }, {\n    key: \"getActiveConfigEtag\",\n    value: function getActiveConfigEtag() {\n      return this.get('active_config_etag');\n    }\n  }, {\n    key: \"setActiveConfigEtag\",\n    value: function setActiveConfigEtag(etag) {\n      return this.set('active_config_etag', etag);\n    }\n  }, {\n    key: \"getThrottleMetadata\",\n    value: function getThrottleMetadata() {\n      return this.get('throttle_metadata');\n    }\n  }, {\n    key: \"setThrottleMetadata\",\n    value: function setThrottleMetadata(metadata) {\n      return this.set('throttle_metadata', metadata);\n    }\n  }, {\n    key: \"deleteThrottleMetadata\",\n    value: function deleteThrottleMetadata() {\n      return this.delete('throttle_metadata');\n    }\n  }, {\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(key) {\n        var _this = this;\n\n        var db;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.openDbPromise;\n\n              case 2:\n                db = _context5.sent;\n                return _context5.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var _a;\n\n                  var transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n                  var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n\n                  var compositeKey = _this.createCompositeKey(key);\n\n                  try {\n                    var request = objectStore.get(compositeKey);\n\n                    request.onerror = function (event) {\n                      reject(toFirebaseError(event, \"storage-get\"\n                      /* STORAGE_GET */\n                      ));\n                    };\n\n                    request.onsuccess = function (event) {\n                      var result = event.target.result;\n\n                      if (result) {\n                        resolve(result.value);\n                      } else {\n                        resolve(undefined);\n                      }\n                    };\n                  } catch (e) {\n                    reject(ERROR_FACTORY.create(\"storage-get\"\n                    /* STORAGE_GET */\n                    , {\n                      originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n                    }));\n                  }\n                }));\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function get(_x9) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(key, value) {\n        var _this2 = this;\n\n        var db;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this.openDbPromise;\n\n              case 2:\n                db = _context6.sent;\n                return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var _a;\n\n                  var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n                  var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n\n                  var compositeKey = _this2.createCompositeKey(key);\n\n                  try {\n                    var request = objectStore.put({\n                      compositeKey: compositeKey,\n                      value: value\n                    });\n\n                    request.onerror = function (event) {\n                      reject(toFirebaseError(event, \"storage-set\"\n                      /* STORAGE_SET */\n                      ));\n                    };\n\n                    request.onsuccess = function () {\n                      resolve();\n                    };\n                  } catch (e) {\n                    reject(ERROR_FACTORY.create(\"storage-set\"\n                    /* STORAGE_SET */\n                    , {\n                      originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n                    }));\n                  }\n                }));\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function set(_x10, _x11) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(key) {\n        var _this3 = this;\n\n        var db;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.openDbPromise;\n\n              case 2:\n                db = _context7.sent;\n                return _context7.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  var _a;\n\n                  var transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n                  var objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n\n                  var compositeKey = _this3.createCompositeKey(key);\n\n                  try {\n                    var request = objectStore.delete(compositeKey);\n\n                    request.onerror = function (event) {\n                      reject(toFirebaseError(event, \"storage-delete\"\n                      /* STORAGE_DELETE */\n                      ));\n                    };\n\n                    request.onsuccess = function () {\n                      resolve();\n                    };\n                  } catch (e) {\n                    reject(ERROR_FACTORY.create(\"storage-delete\"\n                    /* STORAGE_DELETE */\n                    , {\n                      originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n                    }));\n                  }\n                }));\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _delete(_x12) {\n        return _delete2.apply(this, arguments);\n      }\n\n      return _delete;\n    }() // Facilitates composite key functionality (which is unsupported in IE).\n\n  }, {\n    key: \"createCompositeKey\",\n    value: function createCompositeKey(key) {\n      return [this.appId, this.appName, this.namespace, key].join();\n    }\n  }]);\n\n  return Storage;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\r\n */\n\n\nvar StorageCache = /*#__PURE__*/function () {\n  function StorageCache(storage) {\n    _classCallCheck(this, StorageCache);\n\n    this.storage = storage;\n  }\n  /**\r\n   * Memory-only getters\r\n   */\n\n\n  _createClass(StorageCache, [{\n    key: \"getLastFetchStatus\",\n    value: function getLastFetchStatus() {\n      return this.lastFetchStatus;\n    }\n  }, {\n    key: \"getLastSuccessfulFetchTimestampMillis\",\n    value: function getLastSuccessfulFetchTimestampMillis() {\n      return this.lastSuccessfulFetchTimestampMillis;\n    }\n  }, {\n    key: \"getActiveConfig\",\n    value: function getActiveConfig() {\n      return this.activeConfig;\n    }\n    /**\r\n     * Read-ahead getter\r\n     */\n\n  }, {\n    key: \"loadFromStorage\",\n    value: function () {\n      var _loadFromStorage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var lastFetchStatusPromise, lastSuccessfulFetchTimestampMillisPromise, activeConfigPromise, lastFetchStatus, lastSuccessfulFetchTimestampMillis, activeConfig;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                lastFetchStatusPromise = this.storage.getLastFetchStatus();\n                lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n                activeConfigPromise = this.storage.getActiveConfig(); // Note:\n                // 1. we consistently check for undefined to avoid clobbering defined values\n                //   in memory\n                // 2. we defer awaiting to improve readability, as opposed to destructuring\n                //   a Promise.all result, for example\n\n                _context8.next = 5;\n                return lastFetchStatusPromise;\n\n              case 5:\n                lastFetchStatus = _context8.sent;\n\n                if (lastFetchStatus) {\n                  this.lastFetchStatus = lastFetchStatus;\n                }\n\n                _context8.next = 9;\n                return lastSuccessfulFetchTimestampMillisPromise;\n\n              case 9:\n                lastSuccessfulFetchTimestampMillis = _context8.sent;\n\n                if (lastSuccessfulFetchTimestampMillis) {\n                  this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n                }\n\n                _context8.next = 13;\n                return activeConfigPromise;\n\n              case 13:\n                activeConfig = _context8.sent;\n\n                if (activeConfig) {\n                  this.activeConfig = activeConfig;\n                }\n\n              case 15:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function loadFromStorage() {\n        return _loadFromStorage.apply(this, arguments);\n      }\n\n      return loadFromStorage;\n    }()\n    /**\r\n     * Write-through setters\r\n     */\n\n  }, {\n    key: \"setLastFetchStatus\",\n    value: function setLastFetchStatus(status) {\n      this.lastFetchStatus = status;\n      return this.storage.setLastFetchStatus(status);\n    }\n  }, {\n    key: \"setLastSuccessfulFetchTimestampMillis\",\n    value: function setLastSuccessfulFetchTimestampMillis(timestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n      return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n    }\n  }, {\n    key: \"setActiveConfig\",\n    value: function setActiveConfig(activeConfig) {\n      this.activeConfig = activeConfig;\n      return this.storage.setActiveConfig(activeConfig);\n    }\n  }]);\n\n  return StorageCache;\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction registerRemoteConfig() {\n  _registerComponent(new Component(RC_COMPONENT_NAME, remoteConfigFactory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setMultipleInstances(true));\n\n  registerVersion(name, version); // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n\n  registerVersion(name, version, 'esm2017');\n\n  function remoteConfigFactory(container, _ref3) {\n    var namespace = _ref3.instanceIdentifier;\n\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate(); // The following call will always succeed because rc has `import '@firebase/installations'`\n\n    var installations = container.getProvider('installations-internal').getImmediate(); // Guards against the SDK being used in non-browser environments.\n\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(\"registration-window\"\n      /* REGISTRATION_WINDOW */\n      );\n    } // Guards against the SDK being used when indexedDB is not available.\n\n\n    if (!isIndexedDBAvailable()) {\n      throw ERROR_FACTORY.create(\"indexed-db-unavailable\"\n      /* INDEXED_DB_UNAVAILABLE */\n      );\n    } // Normalizes optional inputs.\n\n\n    var _app$options = app.options,\n        projectId = _app$options.projectId,\n        apiKey = _app$options.apiKey,\n        appId = _app$options.appId;\n\n    if (!projectId) {\n      throw ERROR_FACTORY.create(\"registration-project-id\"\n      /* REGISTRATION_PROJECT_ID */\n      );\n    }\n\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(\"registration-api-key\"\n      /* REGISTRATION_API_KEY */\n      );\n    }\n\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"registration-app-id\"\n      /* REGISTRATION_APP_ID */\n      );\n    }\n\n    namespace = namespace || 'firebase';\n    var storage = new Storage(appId, app.name, namespace);\n    var storageCache = new StorageCache(storage);\n    var logger = new Logger(name); // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n\n    logger.logLevel = LogLevel.ERROR;\n    var restClient = new RestClient(installations, // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n    SDK_VERSION, namespace, projectId, apiKey, appId);\n    var retryingClient = new RetryingClient(restClient, storage);\n    var cachingClient = new CachingClient(retryingClient, storage, storageCache, logger);\n    var remoteConfigInstance = new RemoteConfig(app, cachingClient, storageCache, storage, logger); // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n    ensureInitialized(remoteConfigInstance);\n    return remoteConfigInstance;\n  }\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// This API is put in a separate file, so we can stub fetchConfig and activate in tests.\n// It's not possible to stub standalone functions from the same module.\n\n/**\r\n *\r\n * Performs fetch and activate operations, as a convenience.\r\n *\r\n * @param remoteConfig - The {@link RemoteConfig} instance.\r\n *\r\n * @returns A `Promise` which resolves to true if the current call activated the fetched configs.\r\n * If the fetched configs were already activated, the `Promise` will resolve to false.\r\n *\r\n * @public\r\n */\n\n\nfunction fetchAndActivate(_x13) {\n  return _fetchAndActivate.apply(this, arguments);\n}\n/**\r\n * This method provides two different checks:\r\n *\r\n * 1. Check if IndexedDB exists in the browser environment.\r\n * 2. Check if the current browser context allows IndexedDB `open()` calls.\r\n *\r\n * @returns A `Promise` which resolves to true if a {@link RemoteConfig} instance\r\n * can be initialized in this environment, or false if it cannot.\r\n * @public\r\n */\n\n\nfunction _fetchAndActivate() {\n  _fetchAndActivate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(remoteConfig) {\n    return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            remoteConfig = getModularInstance(remoteConfig);\n            _context12.next = 3;\n            return fetchConfig(remoteConfig);\n\n          case 3:\n            return _context12.abrupt(\"return\", activate(remoteConfig));\n\n          case 4:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12);\n  }));\n  return _fetchAndActivate.apply(this, arguments);\n}\n\nfunction isSupported() {\n  return _isSupported.apply(this, arguments);\n}\n/**\r\n * Firebase Remote Config\r\n *\r\n * @packageDocumentation\r\n */\n\n/** register component and version */\n\n\nfunction _isSupported() {\n  _isSupported = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n    var isDBOpenable;\n    return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            if (isIndexedDBAvailable()) {\n              _context13.next = 2;\n              break;\n            }\n\n            return _context13.abrupt(\"return\", false);\n\n          case 2:\n            _context13.prev = 2;\n            _context13.next = 5;\n            return validateIndexedDBOpenable();\n\n          case 5:\n            isDBOpenable = _context13.sent;\n            return _context13.abrupt(\"return\", isDBOpenable);\n\n          case 9:\n            _context13.prev = 9;\n            _context13.t0 = _context13[\"catch\"](2);\n            return _context13.abrupt(\"return\", false);\n\n          case 12:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13, null, [[2, 9]]);\n  }));\n  return _isSupported.apply(this, arguments);\n}\n\nregisterRemoteConfig();\nexport { activate, ensureInitialized, fetchAndActivate, fetchConfig, getAll, getBoolean, getNumber, getRemoteConfig, getString, getValue, isSupported, setLogLevel };","map":null,"metadata":{},"sourceType":"module"}